
Atmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001c4  008001c4  00000eea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022b9  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001134  00000000  00000000  000034bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a1  00000000  00000000  000045f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d8  00000000  00000000  00005a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ad  00000000  00000000  000068d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007986  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e9       	ldi	r30, 0x92	; 146
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 3c       	cpi	r26, 0xC4	; 196
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 ec       	ldi	r26, 0xC4	; 196
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 3c       	cpi	r26, 0xCE	; 206
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 14 01 	call	0x228	; 0x228 <main>
  a6:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include <util/delay.h>

#define BASE_ADDRESS_ADC 0x1400;

void adc_init (void){
	MCUCR |= (1 << SRE );  // enable XMEM
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)	
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <can_init>:
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
			mcp2515_write(TXB0D0+reg,can_msg.data[reg]); //Data
	}
	//Request-to-send
	mcp2515_request_to_send(0); //Send buffer 	
}
  bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <mcp2515_init>
  c0:	08 95       	ret

000000c2 <can_message_receive>:

can_message can_message_receive(void){
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	7c 01       	movw	r14, r24
	//Wait for interrupt
	can_message can_msg;
	//Read status register
	 uint8_t int_flags = mcp2515_read (MCP_CANINTF); //We need it to know if it is RX0 or 1
  d0:	8c e2       	ldi	r24, 0x2C	; 44
  d2:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
	 if(int_flags & 0b00000001 == 1){	//RX0 Interrupt
  d6:	80 ff       	sbrs	r24, 0
  d8:	36 c0       	rjmp	.+108    	; 0x146 <can_message_receive+0x84>
		//Read message
		uint8_t high = mcp2515_read(RXB0SIDH); //ID High
  da:	81 e6       	ldi	r24, 0x61	; 97
  dc:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
		can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
  e0:	c8 2f       	mov	r28, r24
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	cc 0f       	add	r28, r28
  e6:	dd 1f       	adc	r29, r29
  e8:	cc 0f       	add	r28, r28
  ea:	dd 1f       	adc	r29, r29
  ec:	cc 0f       	add	r28, r28
  ee:	dd 1f       	adc	r29, r29
  f0:	82 e6       	ldi	r24, 0x62	; 98
  f2:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
  f6:	82 95       	swap	r24
  f8:	86 95       	lsr	r24
  fa:	87 70       	andi	r24, 0x07	; 7
  fc:	c8 2b       	or	r28, r24
  fe:	f7 01       	movw	r30, r14
 100:	d1 83       	std	Z+1, r29	; 0x01
 102:	c0 83       	st	Z, r28
		can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
 104:	85 e6       	ldi	r24, 0x65	; 101
 106:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
 10a:	d8 2f       	mov	r29, r24
 10c:	f7 01       	movw	r30, r14
 10e:	82 83       	std	Z+2, r24	; 0x02
		for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	0b c0       	rjmp	.+22     	; 0x12a <can_message_receive+0x68>
			can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
 114:	0c 2f       	mov	r16, r28
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	86 e6       	ldi	r24, 0x66	; 102
 11a:	8c 0f       	add	r24, r28
 11c:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
 120:	f7 01       	movw	r30, r14
 122:	e0 0f       	add	r30, r16
 124:	f1 1f       	adc	r31, r17
 126:	83 83       	std	Z+3, r24	; 0x03
	 if(int_flags & 0b00000001 == 1){	//RX0 Interrupt
		//Read message
		uint8_t high = mcp2515_read(RXB0SIDH); //ID High
		can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
		can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
		for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	cd 17       	cp	r28, r29
 12c:	98 f3       	brcs	.-26     	; 0x114 <can_message_receive+0x52>
			can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
		}
		//Filter and masks
			
		//Reset interrupt
		mcp2515_bit_modify(MCP_CANINTF, 0, 0b00000001);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	8c e2       	ldi	r24, 0x2C	; 44
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <mcp2515_bit_modify>
		int_flags = mcp2515_read (MCP_CANINTF);
 13e:	8c e2       	ldi	r24, 0x2C	; 44
 140:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
		return can_msg; 
 144:	00 c0       	rjmp	.+0      	; 0x146 <can_message_receive+0x84>
	 }
}
 146:	c7 01       	movw	r24, r14
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	ff 90       	pop	r15
 152:	ef 90       	pop	r14
 154:	08 95       	ret

00000156 <INT_init>:
#include "../CAN/can.h"
#include <util/delay.h>
#define F_CPU 4915200

void INT_init(void){
	GICR = 1<<INT0;		/* Enable INT0*/
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 & ~(1<<ISC00);  /* Trigger INT0 on falling edge */	
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	85 bf       	out	0x35, r24	; 53
	sei();			/* Enable Global Interrupt */
 15e:	78 94       	sei
 160:	08 95       	ret

00000162 <__vector_1>:
}

/*Interrupt Service Routine for INT0*/
ISR(INT0_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	2b 97       	sbiw	r28, 0x0b	; 11
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
	printf("This is an INT0: CAN message:\n\r");
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9f 93       	push	r25
 198:	8f 93       	push	r24
 19a:	0e 94 75 02 	call	0x4ea	; 0x4ea <printf>
	can_message can_message_rtr = can_message_receive();
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 61 00 	call	0xc2	; 0xc2 <can_message_receive>
	printf("ID=%d, length=%d, data=%d, data2=%d\n\r",can_message_rtr.id, can_message_rtr.data_length, can_message_rtr.data[0],can_message_rtr.data[1]);
 1a6:	2d 81       	ldd	r18, Y+5	; 0x05
 1a8:	9c 81       	ldd	r25, Y+4	; 0x04
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	1f 92       	push	r1
 1ae:	2f 93       	push	r18
 1b0:	1f 92       	push	r1
 1b2:	9f 93       	push	r25
 1b4:	1f 92       	push	r1
 1b6:	8f 93       	push	r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	8f 93       	push	r24
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	8f 93       	push	r24
 1c0:	86 e2       	ldi	r24, 0x26	; 38
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	9f 93       	push	r25
 1c6:	8f 93       	push	r24
 1c8:	0e 94 75 02 	call	0x4ea	; 0x4ea <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	83 ed       	ldi	r24, 0xD3	; 211
 1ce:	90 e3       	ldi	r25, 0x30	; 48
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <__vector_1+0x6e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <__vector_1+0x74>
 1d6:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	2b 96       	adiw	r28, 0x0b	; 11
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <init_buttons>:
int16_t get_slider_l(void){
	return get_slider(0);
}

void init_buttons(void){
	DDRB &= ~(1 << PINB1);
 214:	87 b3       	in	r24, 0x17	; 23
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB2);
 21a:	87 b3       	in	r24, 0x17	; 23
 21c:	8b 7f       	andi	r24, 0xFB	; 251
 21e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB3);
 220:	87 b3       	in	r24, 0x17	; 23
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	87 bb       	out	0x17, r24	; 23
 226:	08 95       	ret

00000228 <main>:


int main(void)
{

	USART_Init(MYUBRR); //Initializing UART
 228:	8f e1       	ldi	r24, 0x1F	; 31
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 0a 02 	call	0x414	; 0x414 <USART_Init>
	printf("Initializing...\n\r");
 230:	8c e4       	ldi	r24, 0x4C	; 76
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	9f 93       	push	r25
 236:	8f 93       	push	r24
 238:	0e 94 75 02 	call	0x4ea	; 0x4ea <printf>
	xmem_init();		//Initializing Memory
 23c:	0e 94 1d 02 	call	0x43a	; 0x43a <xmem_init>
	adc_init();			//Initializing ADC
 240:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	init_buttons();		//Init PB buttons
 244:	0e 94 0a 01 	call	0x214	; 0x214 <init_buttons>
	OLED_init();		//Init OLED
 248:	0e 94 a7 01 	call	0x34e	; 0x34e <OLED_init>
	can_init();
 24c:	0e 94 5e 00 	call	0xbc	; 0xbc <can_init>
	INT_init();
 250:	0e 94 ab 00 	call	0x156	; 0x156 <INT_init>
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	2f e9       	ldi	r18, 0x9F	; 159
 25a:	86 e8       	ldi	r24, 0x86	; 134
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x36>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x40>
 268:	00 00       	nop
 26a:	f6 cf       	rjmp	.-20     	; 0x258 <main+0x30>

0000026c <mcp2515_reset>:
	PORTB &= ~(1 << PB4); // Select CAN - controller
	SPI_send( MCP_READ_STATUS ); // Send read status instruction
	uint8_t value = SPI_read();
	PORTB |= (1 << PB4 ); // Deselect CAN - controller
	return value;
}
 26c:	80 ec       	ldi	r24, 0xC0	; 192
 26e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 272:	08 95       	ret

00000274 <mcp2515_read>:
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	8f 7e       	andi	r24, 0xEF	; 239
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 28a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SPI_read>
 28e:	98 b3       	in	r25, 0x18	; 24
 290:	90 61       	ori	r25, 0x10	; 16
 292:	98 bb       	out	0x18, r25	; 24
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <mcp2515_write>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	d8 2f       	mov	r29, r24
 29e:	c6 2f       	mov	r28, r22
 2a0:	88 b3       	in	r24, 0x18	; 24
 2a2:	8f 7e       	andi	r24, 0xEF	; 239
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2ac:	8d 2f       	mov	r24, r29
 2ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <mcp2515_bit_modify>:
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	18 2f       	mov	r17, r24
 2cc:	c6 2f       	mov	r28, r22
 2ce:	d4 2f       	mov	r29, r20
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	88 bb       	out	0x18, r24	; 24
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2dc:	81 2f       	mov	r24, r17
 2de:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2e2:	8d 2f       	mov	r24, r29
 2e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <mcp2515_init>:


uint8_t mcp2515_init (void){
	uint8_t value, ctrlreg ;
	SPI_init() ; // Initialize SPI
 2fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SPI_init>
	mcp2515_reset() ; // Send reset - command
 300:	0e 94 36 01 	call	0x26c	; 0x26c <mcp2515_reset>
	// Self - test
	value = mcp2515_read (MCP_CANSTAT);
 304:	8e e0       	ldi	r24, 0x0E	; 14
 306:	0e 94 3a 01 	call	0x274	; 0x274 <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 30a:	80 7e       	andi	r24, 0xE0	; 224
 30c:	80 38       	cpi	r24, 0x80	; 128
 30e:	31 f0       	breq	.+12     	; 0x31c <mcp2515_init+0x20>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
 310:	8e e5       	ldi	r24, 0x5E	; 94
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 8b 02 	call	0x516	; 0x516 <puts>
		return 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
	}
	// More initialization
	mcp2515_write(MCP_CANCTRL,0b00000000); //Set to Normal mode
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	0e 94 4c 01 	call	0x298	; 0x298 <mcp2515_write>
	mcp2515_write(MCP_CANINTE,0b00000011); //Enable interrupts on RX buffers
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	8b e2       	ldi	r24, 0x2B	; 43
 328:	0e 94 4c 01 	call	0x298	; 0x298 <mcp2515_write>
	mcp2515_write(MCP_CNF1,0b00000010); //BRP Baud Rate Prescaler = 2
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	8a e2       	ldi	r24, 0x2A	; 42
 330:	0e 94 4c 01 	call	0x298	; 0x298 <mcp2515_write>
	mcp2515_write(MCP_CNF2,0b10111111); //PRSEG=8TQ, PS1=8TQ
 334:	6f eb       	ldi	r22, 0xBF	; 191
 336:	89 e2       	ldi	r24, 0x29	; 41
 338:	0e 94 4c 01 	call	0x298	; 0x298 <mcp2515_write>
	mcp2515_write(MCP_CNF3,0b00000111); //PS=8TQ
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	0e 94 4c 01 	call	0x298	; 0x298 <mcp2515_write>
	
	return 0;
 344:	80 e0       	ldi	r24, 0x00	; 0
}
 346:	08 95       	ret

00000348 <OLED_write_cmd>:
	OLED_CMD[0x0000] = cmd;
}

void OLED_write_data(uint8_t msg){
	volatile char *data = (char *) BASE_ADDRESS_OLED_DATA;
	data[0x0000] = msg;
 348:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe32>
 34c:	08 95       	ret

0000034e <OLED_init>:
}

void OLED_init(void){
	 printf("Initializing OLED\n\r");
 34e:	82 e9       	ldi	r24, 0x92	; 146
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	0e 94 75 02 	call	0x4ea	; 0x4ea <printf>
	 OLED_write_cmd(0xae); //display off
 35a:	8e ea       	ldi	r24, 0xAE	; 174
 35c:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xa1); //segment remap
 360:	81 ea       	ldi	r24, 0xA1	; 161
 362:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xda); //common pads hardware: alternative
 366:	8a ed       	ldi	r24, 0xDA	; 218
 368:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x12);
 36c:	82 e1       	ldi	r24, 0x12	; 18
 36e:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xc8); //common output scan direction:com63~com0
 372:	88 ec       	ldi	r24, 0xC8	; 200
 374:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xa8); //multiplex ration mode:63
 378:	88 ea       	ldi	r24, 0xA8	; 168
 37a:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x3f);
 37e:	8f e3       	ldi	r24, 0x3F	; 63
 380:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xd5); //display divide ratio/osc. freq. mode
 384:	85 ed       	ldi	r24, 0xD5	; 213
 386:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x80);
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x81); //contrast control
 390:	81 e8       	ldi	r24, 0x81	; 129
 392:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x50);
 396:	80 e5       	ldi	r24, 0x50	; 80
 398:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xd9); //set pre-charge period
 39c:	89 ed       	ldi	r24, 0xD9	; 217
 39e:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x21); //Set Column Address
 3a2:	81 e2       	ldi	r24, 0x21	; 33
 3a4:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x20); //Set Memory Addressing Mode
 3a8:	80 e2       	ldi	r24, 0x20	; 32
 3aa:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x02);
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xdb); //VCOM deselect level mode
 3b4:	8b ed       	ldi	r24, 0xDB	; 219
 3b6:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x30);
 3ba:	80 e3       	ldi	r24, 0x30	; 48
 3bc:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xad); //master configuration
 3c0:	8d ea       	ldi	r24, 0xAD	; 173
 3c2:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0x00);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xa4); //out follows RAM content
 3cc:	84 ea       	ldi	r24, 0xA4	; 164
 3ce:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xa6); //set normal display
 3d2:	86 ea       	ldi	r24, 0xA6	; 166
 3d4:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
	 OLED_write_cmd(0xaf); //display on
 3d8:	8f ea       	ldi	r24, 0xAF	; 175
 3da:	0e 94 a4 01 	call	0x348	; 0x348 <OLED_write_cmd>
}
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	08 95       	ret

000003e4 <SPI_init>:
#include "spi.h"

/* Init procedure. Partially taken from datasheet */
void SPI_init(void){
	/* Set SSn, MOSI and SCK as output, all others input */
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
 3e4:	80 eb       	ldi	r24, 0xB0	; 176
 3e6:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3e8:	81 e5       	ldi	r24, 0x51	; 81
 3ea:	8d b9       	out	0x0d, r24	; 13
	/* Set SPI Mode = 0 (CPOL=0, CPHA=0) */
	SPCR &= ~(1<<CPOL)| ~(1<<CPHA);
 3ec:	8d b1       	in	r24, 0x0d	; 13
 3ee:	8d b9       	out	0x0d, r24	; 13
 3f0:	08 95       	ret

000003f2 <SPI_send>:
}

void SPI_send(uint8_t data){
	/* Transmission starts when writing to SPDR register */
	SPDR = data;
 3f2:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 3f4:	77 9b       	sbis	0x0e, 7	; 14
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <SPI_send+0x2>
	;
}
 3f8:	08 95       	ret

000003fa <SPI_read>:

uint8_t SPI_read(void){
	SPI_send(0xAA); //Send dummy data
 3fa:	8a ea       	ldi	r24, 0xAA	; 170
 3fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SPI_send>
	//Read data left in the SPI data register
	return SPDR;
 400:	8f b1       	in	r24, 0x0f	; 15
}
 402:	08 95       	ret

00000404 <USART_Transmit>:
 404:	5d 9b       	sbis	0x0b, 5	; 11
 406:	fe cf       	rjmp	.-4      	; 0x404 <USART_Transmit>
 408:	8c b9       	out	0x0c, r24	; 12
 40a:	08 95       	ret

0000040c <USART_Receive>:
 40c:	5f 9b       	sbis	0x0b, 7	; 11
 40e:	fe cf       	rjmp	.-4      	; 0x40c <USART_Receive>
 410:	8c b1       	in	r24, 0x0c	; 12
 412:	08 95       	ret

00000414 <USART_Init>:
 414:	20 b5       	in	r18, 0x20	; 32
 416:	92 2b       	or	r25, r18
 418:	90 bd       	out	0x20, r25	; 32
 41a:	99 b1       	in	r25, 0x09	; 9
 41c:	89 2b       	or	r24, r25
 41e:	89 b9       	out	0x09, r24	; 9
 420:	8a b1       	in	r24, 0x0a	; 10
 422:	88 61       	ori	r24, 0x18	; 24
 424:	8a b9       	out	0x0a, r24	; 10
 426:	80 b5       	in	r24, 0x20	; 32
 428:	8e 68       	ori	r24, 0x8E	; 142
 42a:	80 bd       	out	0x20, r24	; 32
 42c:	66 e0       	ldi	r22, 0x06	; 6
 42e:	72 e0       	ldi	r23, 0x02	; 2
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	0e 94 2a 02 	call	0x454	; 0x454 <fdevopen>
 438:	08 95       	ret

0000043a <xmem_init>:

/*Initializing external memory driver
Basic code taken from slides
*/
void xmem_init(void){
	MCUCR |= (1 << SRE );  // enable XMEM
 43a:	85 b7       	in	r24, 0x35	; 53
 43c:	80 68       	ori	r24, 0x80	; 128
 43e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)
 440:	80 b7       	in	r24, 0x30	; 48
 442:	80 62       	ori	r24, 0x20	; 32
 444:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM1 );
 446:	80 b7       	in	r24, 0x30	; 48
 448:	8f 7e       	andi	r24, 0xEF	; 239
 44a:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 );
 44c:	80 b7       	in	r24, 0x30	; 48
 44e:	87 7f       	andi	r24, 0xF7	; 247
 450:	80 bf       	out	0x30, r24	; 48
 452:	08 95       	ret

00000454 <fdevopen>:
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	31 f4       	brne	.+12     	; 0x46c <fdevopen+0x18>
 460:	61 15       	cp	r22, r1
 462:	71 05       	cpc	r23, r1
 464:	19 f4       	brne	.+6      	; 0x46c <fdevopen+0x18>
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	3a c0       	rjmp	.+116    	; 0x4e0 <fdevopen+0x8c>
 46c:	8b 01       	movw	r16, r22
 46e:	ec 01       	movw	r28, r24
 470:	6e e0       	ldi	r22, 0x0E	; 14
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 9c 04 	call	0x938	; 0x938 <calloc>
 47c:	fc 01       	movw	r30, r24
 47e:	89 2b       	or	r24, r25
 480:	91 f3       	breq	.-28     	; 0x466 <fdevopen+0x12>
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	83 83       	std	Z+3, r24	; 0x03
 486:	01 15       	cp	r16, r1
 488:	11 05       	cpc	r17, r1
 48a:	71 f0       	breq	.+28     	; 0x4a8 <fdevopen+0x54>
 48c:	13 87       	std	Z+11, r17	; 0x0b
 48e:	02 87       	std	Z+10, r16	; 0x0a
 490:	81 e8       	ldi	r24, 0x81	; 129
 492:	83 83       	std	Z+3, r24	; 0x03
 494:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
 498:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__data_end+0x1>
 49c:	89 2b       	or	r24, r25
 49e:	21 f4       	brne	.+8      	; 0x4a8 <fdevopen+0x54>
 4a0:	f0 93 c5 01 	sts	0x01C5, r31	; 0x8001c5 <__data_end+0x1>
 4a4:	e0 93 c4 01 	sts	0x01C4, r30	; 0x8001c4 <__data_end>
 4a8:	20 97       	sbiw	r28, 0x00	; 0
 4aa:	c9 f0       	breq	.+50     	; 0x4de <fdevopen+0x8a>
 4ac:	d1 87       	std	Z+9, r29	; 0x09
 4ae:	c0 87       	std	Z+8, r28	; 0x08
 4b0:	83 81       	ldd	r24, Z+3	; 0x03
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	83 83       	std	Z+3, r24	; 0x03
 4b6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end+0x2>
 4ba:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x3>
 4be:	89 2b       	or	r24, r25
 4c0:	71 f4       	brne	.+28     	; 0x4de <fdevopen+0x8a>
 4c2:	f0 93 c7 01 	sts	0x01C7, r31	; 0x8001c7 <__data_end+0x3>
 4c6:	e0 93 c6 01 	sts	0x01C6, r30	; 0x8001c6 <__data_end+0x2>
 4ca:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end+0x4>
 4ce:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0x5>
 4d2:	89 2b       	or	r24, r25
 4d4:	21 f4       	brne	.+8      	; 0x4de <fdevopen+0x8a>
 4d6:	f0 93 c9 01 	sts	0x01C9, r31	; 0x8001c9 <__data_end+0x5>
 4da:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <__data_end+0x4>
 4de:	cf 01       	movw	r24, r30
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <printf>:
 4ea:	a0 e0       	ldi	r26, 0x00	; 0
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	eb e7       	ldi	r30, 0x7B	; 123
 4f0:	f2 e0       	ldi	r31, 0x02	; 2
 4f2:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__prologue_saves__+0x20>
 4f6:	ae 01       	movw	r20, r28
 4f8:	4b 5f       	subi	r20, 0xFB	; 251
 4fa:	5f 4f       	sbci	r21, 0xFF	; 255
 4fc:	fa 01       	movw	r30, r20
 4fe:	61 91       	ld	r22, Z+
 500:	71 91       	ld	r23, Z+
 502:	af 01       	movw	r20, r30
 504:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end+0x2>
 508:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x3>
 50c:	0e 94 bb 02 	call	0x576	; 0x576 <vfprintf>
 510:	e2 e0       	ldi	r30, 0x02	; 2
 512:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__epilogue_restores__+0x20>

00000516 <puts>:
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end+0x2>
 522:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <__data_end+0x3>
 526:	23 81       	ldd	r18, Z+3	; 0x03
 528:	21 ff       	sbrs	r18, 1
 52a:	1b c0       	rjmp	.+54     	; 0x562 <puts+0x4c>
 52c:	8c 01       	movw	r16, r24
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	c0 e0       	ldi	r28, 0x00	; 0
 532:	f8 01       	movw	r30, r16
 534:	81 91       	ld	r24, Z+
 536:	8f 01       	movw	r16, r30
 538:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <__data_end+0x2>
 53c:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <__data_end+0x3>
 540:	db 01       	movw	r26, r22
 542:	18 96       	adiw	r26, 0x08	; 8
 544:	ed 91       	ld	r30, X+
 546:	fc 91       	ld	r31, X
 548:	19 97       	sbiw	r26, 0x09	; 9
 54a:	88 23       	and	r24, r24
 54c:	31 f0       	breq	.+12     	; 0x55a <puts+0x44>
 54e:	09 95       	icall
 550:	89 2b       	or	r24, r25
 552:	79 f3       	breq	.-34     	; 0x532 <puts+0x1c>
 554:	df ef       	ldi	r29, 0xFF	; 255
 556:	cf ef       	ldi	r28, 0xFF	; 255
 558:	ec cf       	rjmp	.-40     	; 0x532 <puts+0x1c>
 55a:	8a e0       	ldi	r24, 0x0A	; 10
 55c:	09 95       	icall
 55e:	89 2b       	or	r24, r25
 560:	19 f0       	breq	.+6      	; 0x568 <puts+0x52>
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f ef       	ldi	r25, 0xFF	; 255
 566:	02 c0       	rjmp	.+4      	; 0x56c <puts+0x56>
 568:	8d 2f       	mov	r24, r29
 56a:	9c 2f       	mov	r25, r28
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <vfprintf>:
 576:	ab e0       	ldi	r26, 0x0B	; 11
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e1 ec       	ldi	r30, 0xC1	; 193
 57c:	f2 e0       	ldi	r31, 0x02	; 2
 57e:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__prologue_saves__>
 582:	6c 01       	movw	r12, r24
 584:	7b 01       	movw	r14, r22
 586:	8a 01       	movw	r16, r20
 588:	fc 01       	movw	r30, r24
 58a:	17 82       	std	Z+7, r1	; 0x07
 58c:	16 82       	std	Z+6, r1	; 0x06
 58e:	83 81       	ldd	r24, Z+3	; 0x03
 590:	81 ff       	sbrs	r24, 1
 592:	cc c1       	rjmp	.+920    	; 0x92c <vfprintf+0x3b6>
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	3c 01       	movw	r6, r24
 59a:	f6 01       	movw	r30, r12
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	f7 01       	movw	r30, r14
 5a0:	93 fd       	sbrc	r25, 3
 5a2:	85 91       	lpm	r24, Z+
 5a4:	93 ff       	sbrs	r25, 3
 5a6:	81 91       	ld	r24, Z+
 5a8:	7f 01       	movw	r14, r30
 5aa:	88 23       	and	r24, r24
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <vfprintf+0x3a>
 5ae:	ba c1       	rjmp	.+884    	; 0x924 <vfprintf+0x3ae>
 5b0:	85 32       	cpi	r24, 0x25	; 37
 5b2:	39 f4       	brne	.+14     	; 0x5c2 <vfprintf+0x4c>
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	7f 01       	movw	r14, r30
 5be:	85 32       	cpi	r24, 0x25	; 37
 5c0:	29 f4       	brne	.+10     	; 0x5cc <vfprintf+0x56>
 5c2:	b6 01       	movw	r22, r12
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 5ca:	e7 cf       	rjmp	.-50     	; 0x59a <vfprintf+0x24>
 5cc:	91 2c       	mov	r9, r1
 5ce:	21 2c       	mov	r2, r1
 5d0:	31 2c       	mov	r3, r1
 5d2:	ff e1       	ldi	r31, 0x1F	; 31
 5d4:	f3 15       	cp	r31, r3
 5d6:	d8 f0       	brcs	.+54     	; 0x60e <vfprintf+0x98>
 5d8:	8b 32       	cpi	r24, 0x2B	; 43
 5da:	79 f0       	breq	.+30     	; 0x5fa <vfprintf+0x84>
 5dc:	38 f4       	brcc	.+14     	; 0x5ec <vfprintf+0x76>
 5de:	80 32       	cpi	r24, 0x20	; 32
 5e0:	79 f0       	breq	.+30     	; 0x600 <vfprintf+0x8a>
 5e2:	83 32       	cpi	r24, 0x23	; 35
 5e4:	a1 f4       	brne	.+40     	; 0x60e <vfprintf+0x98>
 5e6:	23 2d       	mov	r18, r3
 5e8:	20 61       	ori	r18, 0x10	; 16
 5ea:	1d c0       	rjmp	.+58     	; 0x626 <vfprintf+0xb0>
 5ec:	8d 32       	cpi	r24, 0x2D	; 45
 5ee:	61 f0       	breq	.+24     	; 0x608 <vfprintf+0x92>
 5f0:	80 33       	cpi	r24, 0x30	; 48
 5f2:	69 f4       	brne	.+26     	; 0x60e <vfprintf+0x98>
 5f4:	23 2d       	mov	r18, r3
 5f6:	21 60       	ori	r18, 0x01	; 1
 5f8:	16 c0       	rjmp	.+44     	; 0x626 <vfprintf+0xb0>
 5fa:	83 2d       	mov	r24, r3
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	38 2e       	mov	r3, r24
 600:	e3 2d       	mov	r30, r3
 602:	e4 60       	ori	r30, 0x04	; 4
 604:	3e 2e       	mov	r3, r30
 606:	2a c0       	rjmp	.+84     	; 0x65c <vfprintf+0xe6>
 608:	f3 2d       	mov	r31, r3
 60a:	f8 60       	ori	r31, 0x08	; 8
 60c:	1d c0       	rjmp	.+58     	; 0x648 <vfprintf+0xd2>
 60e:	37 fc       	sbrc	r3, 7
 610:	2d c0       	rjmp	.+90     	; 0x66c <vfprintf+0xf6>
 612:	20 ed       	ldi	r18, 0xD0	; 208
 614:	28 0f       	add	r18, r24
 616:	2a 30       	cpi	r18, 0x0A	; 10
 618:	40 f0       	brcs	.+16     	; 0x62a <vfprintf+0xb4>
 61a:	8e 32       	cpi	r24, 0x2E	; 46
 61c:	b9 f4       	brne	.+46     	; 0x64c <vfprintf+0xd6>
 61e:	36 fc       	sbrc	r3, 6
 620:	81 c1       	rjmp	.+770    	; 0x924 <vfprintf+0x3ae>
 622:	23 2d       	mov	r18, r3
 624:	20 64       	ori	r18, 0x40	; 64
 626:	32 2e       	mov	r3, r18
 628:	19 c0       	rjmp	.+50     	; 0x65c <vfprintf+0xe6>
 62a:	36 fe       	sbrs	r3, 6
 62c:	06 c0       	rjmp	.+12     	; 0x63a <vfprintf+0xc4>
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	98 9e       	mul	r9, r24
 632:	20 0d       	add	r18, r0
 634:	11 24       	eor	r1, r1
 636:	92 2e       	mov	r9, r18
 638:	11 c0       	rjmp	.+34     	; 0x65c <vfprintf+0xe6>
 63a:	ea e0       	ldi	r30, 0x0A	; 10
 63c:	2e 9e       	mul	r2, r30
 63e:	20 0d       	add	r18, r0
 640:	11 24       	eor	r1, r1
 642:	22 2e       	mov	r2, r18
 644:	f3 2d       	mov	r31, r3
 646:	f0 62       	ori	r31, 0x20	; 32
 648:	3f 2e       	mov	r3, r31
 64a:	08 c0       	rjmp	.+16     	; 0x65c <vfprintf+0xe6>
 64c:	8c 36       	cpi	r24, 0x6C	; 108
 64e:	21 f4       	brne	.+8      	; 0x658 <vfprintf+0xe2>
 650:	83 2d       	mov	r24, r3
 652:	80 68       	ori	r24, 0x80	; 128
 654:	38 2e       	mov	r3, r24
 656:	02 c0       	rjmp	.+4      	; 0x65c <vfprintf+0xe6>
 658:	88 36       	cpi	r24, 0x68	; 104
 65a:	41 f4       	brne	.+16     	; 0x66c <vfprintf+0xf6>
 65c:	f7 01       	movw	r30, r14
 65e:	93 fd       	sbrc	r25, 3
 660:	85 91       	lpm	r24, Z+
 662:	93 ff       	sbrs	r25, 3
 664:	81 91       	ld	r24, Z+
 666:	7f 01       	movw	r14, r30
 668:	81 11       	cpse	r24, r1
 66a:	b3 cf       	rjmp	.-154    	; 0x5d2 <vfprintf+0x5c>
 66c:	98 2f       	mov	r25, r24
 66e:	9f 7d       	andi	r25, 0xDF	; 223
 670:	95 54       	subi	r25, 0x45	; 69
 672:	93 30       	cpi	r25, 0x03	; 3
 674:	28 f4       	brcc	.+10     	; 0x680 <vfprintf+0x10a>
 676:	0c 5f       	subi	r16, 0xFC	; 252
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	9f e3       	ldi	r25, 0x3F	; 63
 67c:	99 83       	std	Y+1, r25	; 0x01
 67e:	0d c0       	rjmp	.+26     	; 0x69a <vfprintf+0x124>
 680:	83 36       	cpi	r24, 0x63	; 99
 682:	31 f0       	breq	.+12     	; 0x690 <vfprintf+0x11a>
 684:	83 37       	cpi	r24, 0x73	; 115
 686:	71 f0       	breq	.+28     	; 0x6a4 <vfprintf+0x12e>
 688:	83 35       	cpi	r24, 0x53	; 83
 68a:	09 f0       	breq	.+2      	; 0x68e <vfprintf+0x118>
 68c:	59 c0       	rjmp	.+178    	; 0x740 <vfprintf+0x1ca>
 68e:	21 c0       	rjmp	.+66     	; 0x6d2 <vfprintf+0x15c>
 690:	f8 01       	movw	r30, r16
 692:	80 81       	ld	r24, Z
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	0e 5f       	subi	r16, 0xFE	; 254
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	88 24       	eor	r8, r8
 69c:	83 94       	inc	r8
 69e:	91 2c       	mov	r9, r1
 6a0:	53 01       	movw	r10, r6
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <vfprintf+0x154>
 6a4:	28 01       	movw	r4, r16
 6a6:	f2 e0       	ldi	r31, 0x02	; 2
 6a8:	4f 0e       	add	r4, r31
 6aa:	51 1c       	adc	r5, r1
 6ac:	f8 01       	movw	r30, r16
 6ae:	a0 80       	ld	r10, Z
 6b0:	b1 80       	ldd	r11, Z+1	; 0x01
 6b2:	36 fe       	sbrs	r3, 6
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <vfprintf+0x146>
 6b6:	69 2d       	mov	r22, r9
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vfprintf+0x14a>
 6bc:	6f ef       	ldi	r22, 0xFF	; 255
 6be:	7f ef       	ldi	r23, 0xFF	; 255
 6c0:	c5 01       	movw	r24, r10
 6c2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <strnlen>
 6c6:	4c 01       	movw	r8, r24
 6c8:	82 01       	movw	r16, r4
 6ca:	f3 2d       	mov	r31, r3
 6cc:	ff 77       	andi	r31, 0x7F	; 127
 6ce:	3f 2e       	mov	r3, r31
 6d0:	16 c0       	rjmp	.+44     	; 0x6fe <vfprintf+0x188>
 6d2:	28 01       	movw	r4, r16
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	42 0e       	add	r4, r18
 6d8:	51 1c       	adc	r5, r1
 6da:	f8 01       	movw	r30, r16
 6dc:	a0 80       	ld	r10, Z
 6de:	b1 80       	ldd	r11, Z+1	; 0x01
 6e0:	36 fe       	sbrs	r3, 6
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <vfprintf+0x174>
 6e4:	69 2d       	mov	r22, r9
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <vfprintf+0x178>
 6ea:	6f ef       	ldi	r22, 0xFF	; 255
 6ec:	7f ef       	ldi	r23, 0xFF	; 255
 6ee:	c5 01       	movw	r24, r10
 6f0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <strnlen_P>
 6f4:	4c 01       	movw	r8, r24
 6f6:	f3 2d       	mov	r31, r3
 6f8:	f0 68       	ori	r31, 0x80	; 128
 6fa:	3f 2e       	mov	r3, r31
 6fc:	82 01       	movw	r16, r4
 6fe:	33 fc       	sbrc	r3, 3
 700:	1b c0       	rjmp	.+54     	; 0x738 <vfprintf+0x1c2>
 702:	82 2d       	mov	r24, r2
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	88 16       	cp	r8, r24
 708:	99 06       	cpc	r9, r25
 70a:	b0 f4       	brcc	.+44     	; 0x738 <vfprintf+0x1c2>
 70c:	b6 01       	movw	r22, r12
 70e:	80 e2       	ldi	r24, 0x20	; 32
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 716:	2a 94       	dec	r2
 718:	f4 cf       	rjmp	.-24     	; 0x702 <vfprintf+0x18c>
 71a:	f5 01       	movw	r30, r10
 71c:	37 fc       	sbrc	r3, 7
 71e:	85 91       	lpm	r24, Z+
 720:	37 fe       	sbrs	r3, 7
 722:	81 91       	ld	r24, Z+
 724:	5f 01       	movw	r10, r30
 726:	b6 01       	movw	r22, r12
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 72e:	21 10       	cpse	r2, r1
 730:	2a 94       	dec	r2
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	82 1a       	sub	r8, r18
 736:	91 08       	sbc	r9, r1
 738:	81 14       	cp	r8, r1
 73a:	91 04       	cpc	r9, r1
 73c:	71 f7       	brne	.-36     	; 0x71a <vfprintf+0x1a4>
 73e:	e8 c0       	rjmp	.+464    	; 0x910 <vfprintf+0x39a>
 740:	84 36       	cpi	r24, 0x64	; 100
 742:	11 f0       	breq	.+4      	; 0x748 <vfprintf+0x1d2>
 744:	89 36       	cpi	r24, 0x69	; 105
 746:	41 f5       	brne	.+80     	; 0x798 <vfprintf+0x222>
 748:	f8 01       	movw	r30, r16
 74a:	37 fe       	sbrs	r3, 7
 74c:	07 c0       	rjmp	.+14     	; 0x75c <vfprintf+0x1e6>
 74e:	60 81       	ld	r22, Z
 750:	71 81       	ldd	r23, Z+1	; 0x01
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	93 81       	ldd	r25, Z+3	; 0x03
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0x1f6>
 75c:	60 81       	ld	r22, Z
 75e:	71 81       	ldd	r23, Z+1	; 0x01
 760:	07 2e       	mov	r0, r23
 762:	00 0c       	add	r0, r0
 764:	88 0b       	sbc	r24, r24
 766:	99 0b       	sbc	r25, r25
 768:	0e 5f       	subi	r16, 0xFE	; 254
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	f3 2d       	mov	r31, r3
 76e:	ff 76       	andi	r31, 0x6F	; 111
 770:	3f 2e       	mov	r3, r31
 772:	97 ff       	sbrs	r25, 7
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x212>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	f0 68       	ori	r31, 0x80	; 128
 786:	3f 2e       	mov	r3, r31
 788:	2a e0       	ldi	r18, 0x0A	; 10
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	a3 01       	movw	r20, r6
 78e:	0e 94 32 06 	call	0xc64	; 0xc64 <__ultoa_invert>
 792:	88 2e       	mov	r8, r24
 794:	86 18       	sub	r8, r6
 796:	45 c0       	rjmp	.+138    	; 0x822 <vfprintf+0x2ac>
 798:	85 37       	cpi	r24, 0x75	; 117
 79a:	31 f4       	brne	.+12     	; 0x7a8 <vfprintf+0x232>
 79c:	23 2d       	mov	r18, r3
 79e:	2f 7e       	andi	r18, 0xEF	; 239
 7a0:	b2 2e       	mov	r11, r18
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	25 c0       	rjmp	.+74     	; 0x7f2 <vfprintf+0x27c>
 7a8:	93 2d       	mov	r25, r3
 7aa:	99 7f       	andi	r25, 0xF9	; 249
 7ac:	b9 2e       	mov	r11, r25
 7ae:	8f 36       	cpi	r24, 0x6F	; 111
 7b0:	c1 f0       	breq	.+48     	; 0x7e2 <vfprintf+0x26c>
 7b2:	18 f4       	brcc	.+6      	; 0x7ba <vfprintf+0x244>
 7b4:	88 35       	cpi	r24, 0x58	; 88
 7b6:	79 f0       	breq	.+30     	; 0x7d6 <vfprintf+0x260>
 7b8:	b5 c0       	rjmp	.+362    	; 0x924 <vfprintf+0x3ae>
 7ba:	80 37       	cpi	r24, 0x70	; 112
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <vfprintf+0x24e>
 7be:	88 37       	cpi	r24, 0x78	; 120
 7c0:	21 f0       	breq	.+8      	; 0x7ca <vfprintf+0x254>
 7c2:	b0 c0       	rjmp	.+352    	; 0x924 <vfprintf+0x3ae>
 7c4:	e9 2f       	mov	r30, r25
 7c6:	e0 61       	ori	r30, 0x10	; 16
 7c8:	be 2e       	mov	r11, r30
 7ca:	b4 fe       	sbrs	r11, 4
 7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <vfprintf+0x272>
 7ce:	fb 2d       	mov	r31, r11
 7d0:	f4 60       	ori	r31, 0x04	; 4
 7d2:	bf 2e       	mov	r11, r31
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x272>
 7d6:	34 fe       	sbrs	r3, 4
 7d8:	0a c0       	rjmp	.+20     	; 0x7ee <vfprintf+0x278>
 7da:	29 2f       	mov	r18, r25
 7dc:	26 60       	ori	r18, 0x06	; 6
 7de:	b2 2e       	mov	r11, r18
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0x278>
 7e2:	28 e0       	ldi	r18, 0x08	; 8
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <vfprintf+0x27c>
 7e8:	20 e1       	ldi	r18, 0x10	; 16
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x27c>
 7ee:	20 e1       	ldi	r18, 0x10	; 16
 7f0:	32 e0       	ldi	r19, 0x02	; 2
 7f2:	f8 01       	movw	r30, r16
 7f4:	b7 fe       	sbrs	r11, 7
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <vfprintf+0x290>
 7f8:	60 81       	ld	r22, Z
 7fa:	71 81       	ldd	r23, Z+1	; 0x01
 7fc:	82 81       	ldd	r24, Z+2	; 0x02
 7fe:	93 81       	ldd	r25, Z+3	; 0x03
 800:	0c 5f       	subi	r16, 0xFC	; 252
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0x29c>
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 5f       	subi	r16, 0xFE	; 254
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	a3 01       	movw	r20, r6
 814:	0e 94 32 06 	call	0xc64	; 0xc64 <__ultoa_invert>
 818:	88 2e       	mov	r8, r24
 81a:	86 18       	sub	r8, r6
 81c:	fb 2d       	mov	r31, r11
 81e:	ff 77       	andi	r31, 0x7F	; 127
 820:	3f 2e       	mov	r3, r31
 822:	36 fe       	sbrs	r3, 6
 824:	0d c0       	rjmp	.+26     	; 0x840 <vfprintf+0x2ca>
 826:	23 2d       	mov	r18, r3
 828:	2e 7f       	andi	r18, 0xFE	; 254
 82a:	a2 2e       	mov	r10, r18
 82c:	89 14       	cp	r8, r9
 82e:	58 f4       	brcc	.+22     	; 0x846 <vfprintf+0x2d0>
 830:	34 fe       	sbrs	r3, 4
 832:	0b c0       	rjmp	.+22     	; 0x84a <vfprintf+0x2d4>
 834:	32 fc       	sbrc	r3, 2
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x2d4>
 838:	83 2d       	mov	r24, r3
 83a:	8e 7e       	andi	r24, 0xEE	; 238
 83c:	a8 2e       	mov	r10, r24
 83e:	05 c0       	rjmp	.+10     	; 0x84a <vfprintf+0x2d4>
 840:	b8 2c       	mov	r11, r8
 842:	a3 2c       	mov	r10, r3
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x2d6>
 846:	b8 2c       	mov	r11, r8
 848:	01 c0       	rjmp	.+2      	; 0x84c <vfprintf+0x2d6>
 84a:	b9 2c       	mov	r11, r9
 84c:	a4 fe       	sbrs	r10, 4
 84e:	0f c0       	rjmp	.+30     	; 0x86e <vfprintf+0x2f8>
 850:	fe 01       	movw	r30, r28
 852:	e8 0d       	add	r30, r8
 854:	f1 1d       	adc	r31, r1
 856:	80 81       	ld	r24, Z
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	21 f4       	brne	.+8      	; 0x864 <vfprintf+0x2ee>
 85c:	9a 2d       	mov	r25, r10
 85e:	99 7e       	andi	r25, 0xE9	; 233
 860:	a9 2e       	mov	r10, r25
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x300>
 864:	a2 fe       	sbrs	r10, 2
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x2fe>
 868:	b3 94       	inc	r11
 86a:	b3 94       	inc	r11
 86c:	04 c0       	rjmp	.+8      	; 0x876 <vfprintf+0x300>
 86e:	8a 2d       	mov	r24, r10
 870:	86 78       	andi	r24, 0x86	; 134
 872:	09 f0       	breq	.+2      	; 0x876 <vfprintf+0x300>
 874:	b3 94       	inc	r11
 876:	a3 fc       	sbrc	r10, 3
 878:	11 c0       	rjmp	.+34     	; 0x89c <vfprintf+0x326>
 87a:	a0 fe       	sbrs	r10, 0
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x314>
 87e:	b2 14       	cp	r11, r2
 880:	88 f4       	brcc	.+34     	; 0x8a4 <vfprintf+0x32e>
 882:	28 0c       	add	r2, r8
 884:	92 2c       	mov	r9, r2
 886:	9b 18       	sub	r9, r11
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <vfprintf+0x330>
 88a:	b2 14       	cp	r11, r2
 88c:	60 f4       	brcc	.+24     	; 0x8a6 <vfprintf+0x330>
 88e:	b6 01       	movw	r22, r12
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 898:	b3 94       	inc	r11
 89a:	f7 cf       	rjmp	.-18     	; 0x88a <vfprintf+0x314>
 89c:	b2 14       	cp	r11, r2
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <vfprintf+0x330>
 8a0:	2b 18       	sub	r2, r11
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x332>
 8a4:	98 2c       	mov	r9, r8
 8a6:	21 2c       	mov	r2, r1
 8a8:	a4 fe       	sbrs	r10, 4
 8aa:	10 c0       	rjmp	.+32     	; 0x8cc <vfprintf+0x356>
 8ac:	b6 01       	movw	r22, r12
 8ae:	80 e3       	ldi	r24, 0x30	; 48
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 8b6:	a2 fe       	sbrs	r10, 2
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <vfprintf+0x372>
 8ba:	a1 fc       	sbrc	r10, 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x34e>
 8be:	88 e7       	ldi	r24, 0x78	; 120
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x352>
 8c4:	88 e5       	ldi	r24, 0x58	; 88
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	b6 01       	movw	r22, r12
 8ca:	0c c0       	rjmp	.+24     	; 0x8e4 <vfprintf+0x36e>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <vfprintf+0x372>
 8d2:	a1 fe       	sbrs	r10, 1
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x364>
 8d6:	8b e2       	ldi	r24, 0x2B	; 43
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <vfprintf+0x366>
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	a7 fc       	sbrc	r10, 7
 8de:	8d e2       	ldi	r24, 0x2D	; 45
 8e0:	b6 01       	movw	r22, r12
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 8e8:	89 14       	cp	r8, r9
 8ea:	38 f4       	brcc	.+14     	; 0x8fa <vfprintf+0x384>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 8f6:	9a 94       	dec	r9
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <vfprintf+0x372>
 8fa:	8a 94       	dec	r8
 8fc:	f3 01       	movw	r30, r6
 8fe:	e8 0d       	add	r30, r8
 900:	f1 1d       	adc	r31, r1
 902:	80 81       	ld	r24, Z
 904:	b6 01       	movw	r22, r12
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 90c:	81 10       	cpse	r8, r1
 90e:	f5 cf       	rjmp	.-22     	; 0x8fa <vfprintf+0x384>
 910:	22 20       	and	r2, r2
 912:	09 f4       	brne	.+2      	; 0x916 <vfprintf+0x3a0>
 914:	42 ce       	rjmp	.-892    	; 0x59a <vfprintf+0x24>
 916:	b6 01       	movw	r22, r12
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 f6 05 	call	0xbec	; 0xbec <fputc>
 920:	2a 94       	dec	r2
 922:	f6 cf       	rjmp	.-20     	; 0x910 <vfprintf+0x39a>
 924:	f6 01       	movw	r30, r12
 926:	86 81       	ldd	r24, Z+6	; 0x06
 928:	97 81       	ldd	r25, Z+7	; 0x07
 92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0x3ba>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	9f ef       	ldi	r25, 0xFF	; 255
 930:	2b 96       	adiw	r28, 0x0b	; 11
 932:	e2 e1       	ldi	r30, 0x12	; 18
 934:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__epilogue_restores__>

00000938 <calloc>:
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	86 9f       	mul	r24, r22
 942:	80 01       	movw	r16, r0
 944:	87 9f       	mul	r24, r23
 946:	10 0d       	add	r17, r0
 948:	96 9f       	mul	r25, r22
 94a:	10 0d       	add	r17, r0
 94c:	11 24       	eor	r1, r1
 94e:	c8 01       	movw	r24, r16
 950:	0e 94 b8 04 	call	0x970	; 0x970 <malloc>
 954:	ec 01       	movw	r28, r24
 956:	00 97       	sbiw	r24, 0x00	; 0
 958:	29 f0       	breq	.+10     	; 0x964 <calloc+0x2c>
 95a:	a8 01       	movw	r20, r16
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <memset>
 964:	ce 01       	movw	r24, r28
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	08 95       	ret

00000970 <malloc>:
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	82 30       	cpi	r24, 0x02	; 2
 97a:	91 05       	cpc	r25, r1
 97c:	10 f4       	brcc	.+4      	; 0x982 <malloc+0x12>
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <__flp>
 986:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <__flp+0x1>
 98a:	20 e0       	ldi	r18, 0x00	; 0
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	a0 e0       	ldi	r26, 0x00	; 0
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	30 97       	sbiw	r30, 0x00	; 0
 994:	19 f1       	breq	.+70     	; 0x9dc <malloc+0x6c>
 996:	40 81       	ld	r20, Z
 998:	51 81       	ldd	r21, Z+1	; 0x01
 99a:	02 81       	ldd	r16, Z+2	; 0x02
 99c:	13 81       	ldd	r17, Z+3	; 0x03
 99e:	48 17       	cp	r20, r24
 9a0:	59 07       	cpc	r21, r25
 9a2:	c8 f0       	brcs	.+50     	; 0x9d6 <malloc+0x66>
 9a4:	84 17       	cp	r24, r20
 9a6:	95 07       	cpc	r25, r21
 9a8:	69 f4       	brne	.+26     	; 0x9c4 <malloc+0x54>
 9aa:	10 97       	sbiw	r26, 0x00	; 0
 9ac:	31 f0       	breq	.+12     	; 0x9ba <malloc+0x4a>
 9ae:	12 96       	adiw	r26, 0x02	; 2
 9b0:	0c 93       	st	X, r16
 9b2:	12 97       	sbiw	r26, 0x02	; 2
 9b4:	13 96       	adiw	r26, 0x03	; 3
 9b6:	1c 93       	st	X, r17
 9b8:	27 c0       	rjmp	.+78     	; 0xa08 <malloc+0x98>
 9ba:	00 93 cc 01 	sts	0x01CC, r16	; 0x8001cc <__flp>
 9be:	10 93 cd 01 	sts	0x01CD, r17	; 0x8001cd <__flp+0x1>
 9c2:	22 c0       	rjmp	.+68     	; 0xa08 <malloc+0x98>
 9c4:	21 15       	cp	r18, r1
 9c6:	31 05       	cpc	r19, r1
 9c8:	19 f0       	breq	.+6      	; 0x9d0 <malloc+0x60>
 9ca:	42 17       	cp	r20, r18
 9cc:	53 07       	cpc	r21, r19
 9ce:	18 f4       	brcc	.+6      	; 0x9d6 <malloc+0x66>
 9d0:	9a 01       	movw	r18, r20
 9d2:	bd 01       	movw	r22, r26
 9d4:	ef 01       	movw	r28, r30
 9d6:	df 01       	movw	r26, r30
 9d8:	f8 01       	movw	r30, r16
 9da:	db cf       	rjmp	.-74     	; 0x992 <malloc+0x22>
 9dc:	21 15       	cp	r18, r1
 9de:	31 05       	cpc	r19, r1
 9e0:	f9 f0       	breq	.+62     	; 0xa20 <malloc+0xb0>
 9e2:	28 1b       	sub	r18, r24
 9e4:	39 0b       	sbc	r19, r25
 9e6:	24 30       	cpi	r18, 0x04	; 4
 9e8:	31 05       	cpc	r19, r1
 9ea:	80 f4       	brcc	.+32     	; 0xa0c <malloc+0x9c>
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	9b 81       	ldd	r25, Y+3	; 0x03
 9f0:	61 15       	cp	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	21 f0       	breq	.+8      	; 0x9fe <malloc+0x8e>
 9f6:	fb 01       	movw	r30, r22
 9f8:	93 83       	std	Z+3, r25	; 0x03
 9fa:	82 83       	std	Z+2, r24	; 0x02
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <malloc+0x96>
 9fe:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__flp+0x1>
 a02:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__flp>
 a06:	fe 01       	movw	r30, r28
 a08:	32 96       	adiw	r30, 0x02	; 2
 a0a:	44 c0       	rjmp	.+136    	; 0xa94 <malloc+0x124>
 a0c:	fe 01       	movw	r30, r28
 a0e:	e2 0f       	add	r30, r18
 a10:	f3 1f       	adc	r31, r19
 a12:	81 93       	st	Z+, r24
 a14:	91 93       	st	Z+, r25
 a16:	22 50       	subi	r18, 0x02	; 2
 a18:	31 09       	sbc	r19, r1
 a1a:	39 83       	std	Y+1, r19	; 0x01
 a1c:	28 83       	st	Y, r18
 a1e:	3a c0       	rjmp	.+116    	; 0xa94 <malloc+0x124>
 a20:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
 a24:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
 a28:	23 2b       	or	r18, r19
 a2a:	41 f4       	brne	.+16     	; 0xa3c <malloc+0xcc>
 a2c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a30:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a34:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__brkval+0x1>
 a38:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__brkval>
 a3c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a40:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a44:	21 15       	cp	r18, r1
 a46:	31 05       	cpc	r19, r1
 a48:	41 f4       	brne	.+16     	; 0xa5a <malloc+0xea>
 a4a:	2d b7       	in	r18, 0x3d	; 61
 a4c:	3e b7       	in	r19, 0x3e	; 62
 a4e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a52:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a56:	24 1b       	sub	r18, r20
 a58:	35 0b       	sbc	r19, r21
 a5a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <__brkval>
 a5e:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <__brkval+0x1>
 a62:	e2 17       	cp	r30, r18
 a64:	f3 07       	cpc	r31, r19
 a66:	a0 f4       	brcc	.+40     	; 0xa90 <malloc+0x120>
 a68:	2e 1b       	sub	r18, r30
 a6a:	3f 0b       	sbc	r19, r31
 a6c:	28 17       	cp	r18, r24
 a6e:	39 07       	cpc	r19, r25
 a70:	78 f0       	brcs	.+30     	; 0xa90 <malloc+0x120>
 a72:	ac 01       	movw	r20, r24
 a74:	4e 5f       	subi	r20, 0xFE	; 254
 a76:	5f 4f       	sbci	r21, 0xFF	; 255
 a78:	24 17       	cp	r18, r20
 a7a:	35 07       	cpc	r19, r21
 a7c:	48 f0       	brcs	.+18     	; 0xa90 <malloc+0x120>
 a7e:	4e 0f       	add	r20, r30
 a80:	5f 1f       	adc	r21, r31
 a82:	50 93 cb 01 	sts	0x01CB, r21	; 0x8001cb <__brkval+0x1>
 a86:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__brkval>
 a8a:	81 93       	st	Z+, r24
 a8c:	91 93       	st	Z+, r25
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <malloc+0x124>
 a90:	e0 e0       	ldi	r30, 0x00	; 0
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	cf 01       	movw	r24, r30
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	08 95       	ret

00000aa0 <free>:
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	09 f4       	brne	.+2      	; 0xaaa <free+0xa>
 aa8:	81 c0       	rjmp	.+258    	; 0xbac <free+0x10c>
 aaa:	fc 01       	movw	r30, r24
 aac:	32 97       	sbiw	r30, 0x02	; 2
 aae:	13 82       	std	Z+3, r1	; 0x03
 ab0:	12 82       	std	Z+2, r1	; 0x02
 ab2:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <__flp>
 ab6:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <__flp+0x1>
 aba:	10 97       	sbiw	r26, 0x00	; 0
 abc:	81 f4       	brne	.+32     	; 0xade <free+0x3e>
 abe:	20 81       	ld	r18, Z
 ac0:	31 81       	ldd	r19, Z+1	; 0x01
 ac2:	82 0f       	add	r24, r18
 ac4:	93 1f       	adc	r25, r19
 ac6:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
 aca:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
 ace:	28 17       	cp	r18, r24
 ad0:	39 07       	cpc	r19, r25
 ad2:	51 f5       	brne	.+84     	; 0xb28 <free+0x88>
 ad4:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <__brkval+0x1>
 ad8:	e0 93 ca 01 	sts	0x01CA, r30	; 0x8001ca <__brkval>
 adc:	67 c0       	rjmp	.+206    	; 0xbac <free+0x10c>
 ade:	ed 01       	movw	r28, r26
 ae0:	20 e0       	ldi	r18, 0x00	; 0
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	ce 17       	cp	r28, r30
 ae6:	df 07       	cpc	r29, r31
 ae8:	40 f4       	brcc	.+16     	; 0xafa <free+0x5a>
 aea:	4a 81       	ldd	r20, Y+2	; 0x02
 aec:	5b 81       	ldd	r21, Y+3	; 0x03
 aee:	9e 01       	movw	r18, r28
 af0:	41 15       	cp	r20, r1
 af2:	51 05       	cpc	r21, r1
 af4:	f1 f0       	breq	.+60     	; 0xb32 <free+0x92>
 af6:	ea 01       	movw	r28, r20
 af8:	f5 cf       	rjmp	.-22     	; 0xae4 <free+0x44>
 afa:	d3 83       	std	Z+3, r29	; 0x03
 afc:	c2 83       	std	Z+2, r28	; 0x02
 afe:	40 81       	ld	r20, Z
 b00:	51 81       	ldd	r21, Z+1	; 0x01
 b02:	84 0f       	add	r24, r20
 b04:	95 1f       	adc	r25, r21
 b06:	c8 17       	cp	r28, r24
 b08:	d9 07       	cpc	r29, r25
 b0a:	59 f4       	brne	.+22     	; 0xb22 <free+0x82>
 b0c:	88 81       	ld	r24, Y
 b0e:	99 81       	ldd	r25, Y+1	; 0x01
 b10:	84 0f       	add	r24, r20
 b12:	95 1f       	adc	r25, r21
 b14:	02 96       	adiw	r24, 0x02	; 2
 b16:	91 83       	std	Z+1, r25	; 0x01
 b18:	80 83       	st	Z, r24
 b1a:	8a 81       	ldd	r24, Y+2	; 0x02
 b1c:	9b 81       	ldd	r25, Y+3	; 0x03
 b1e:	93 83       	std	Z+3, r25	; 0x03
 b20:	82 83       	std	Z+2, r24	; 0x02
 b22:	21 15       	cp	r18, r1
 b24:	31 05       	cpc	r19, r1
 b26:	29 f4       	brne	.+10     	; 0xb32 <free+0x92>
 b28:	f0 93 cd 01 	sts	0x01CD, r31	; 0x8001cd <__flp+0x1>
 b2c:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <__flp>
 b30:	3d c0       	rjmp	.+122    	; 0xbac <free+0x10c>
 b32:	e9 01       	movw	r28, r18
 b34:	fb 83       	std	Y+3, r31	; 0x03
 b36:	ea 83       	std	Y+2, r30	; 0x02
 b38:	49 91       	ld	r20, Y+
 b3a:	59 91       	ld	r21, Y+
 b3c:	c4 0f       	add	r28, r20
 b3e:	d5 1f       	adc	r29, r21
 b40:	ec 17       	cp	r30, r28
 b42:	fd 07       	cpc	r31, r29
 b44:	61 f4       	brne	.+24     	; 0xb5e <free+0xbe>
 b46:	80 81       	ld	r24, Z
 b48:	91 81       	ldd	r25, Z+1	; 0x01
 b4a:	84 0f       	add	r24, r20
 b4c:	95 1f       	adc	r25, r21
 b4e:	02 96       	adiw	r24, 0x02	; 2
 b50:	e9 01       	movw	r28, r18
 b52:	99 83       	std	Y+1, r25	; 0x01
 b54:	88 83       	st	Y, r24
 b56:	82 81       	ldd	r24, Z+2	; 0x02
 b58:	93 81       	ldd	r25, Z+3	; 0x03
 b5a:	9b 83       	std	Y+3, r25	; 0x03
 b5c:	8a 83       	std	Y+2, r24	; 0x02
 b5e:	e0 e0       	ldi	r30, 0x00	; 0
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	12 96       	adiw	r26, 0x02	; 2
 b64:	8d 91       	ld	r24, X+
 b66:	9c 91       	ld	r25, X
 b68:	13 97       	sbiw	r26, 0x03	; 3
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	19 f0       	breq	.+6      	; 0xb74 <free+0xd4>
 b6e:	fd 01       	movw	r30, r26
 b70:	dc 01       	movw	r26, r24
 b72:	f7 cf       	rjmp	.-18     	; 0xb62 <free+0xc2>
 b74:	8d 91       	ld	r24, X+
 b76:	9c 91       	ld	r25, X
 b78:	11 97       	sbiw	r26, 0x01	; 1
 b7a:	9d 01       	movw	r18, r26
 b7c:	2e 5f       	subi	r18, 0xFE	; 254
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	82 0f       	add	r24, r18
 b82:	93 1f       	adc	r25, r19
 b84:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
 b88:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
 b8c:	28 17       	cp	r18, r24
 b8e:	39 07       	cpc	r19, r25
 b90:	69 f4       	brne	.+26     	; 0xbac <free+0x10c>
 b92:	30 97       	sbiw	r30, 0x00	; 0
 b94:	29 f4       	brne	.+10     	; 0xba0 <free+0x100>
 b96:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <__flp+0x1>
 b9a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__flp>
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <free+0x104>
 ba0:	13 82       	std	Z+3, r1	; 0x03
 ba2:	12 82       	std	Z+2, r1	; 0x02
 ba4:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <__brkval+0x1>
 ba8:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <__brkval>
 bac:	df 91       	pop	r29
 bae:	cf 91       	pop	r28
 bb0:	08 95       	ret

00000bb2 <strnlen_P>:
 bb2:	fc 01       	movw	r30, r24
 bb4:	05 90       	lpm	r0, Z+
 bb6:	61 50       	subi	r22, 0x01	; 1
 bb8:	70 40       	sbci	r23, 0x00	; 0
 bba:	01 10       	cpse	r0, r1
 bbc:	d8 f7       	brcc	.-10     	; 0xbb4 <strnlen_P+0x2>
 bbe:	80 95       	com	r24
 bc0:	90 95       	com	r25
 bc2:	8e 0f       	add	r24, r30
 bc4:	9f 1f       	adc	r25, r31
 bc6:	08 95       	ret

00000bc8 <memset>:
 bc8:	dc 01       	movw	r26, r24
 bca:	01 c0       	rjmp	.+2      	; 0xbce <memset+0x6>
 bcc:	6d 93       	st	X+, r22
 bce:	41 50       	subi	r20, 0x01	; 1
 bd0:	50 40       	sbci	r21, 0x00	; 0
 bd2:	e0 f7       	brcc	.-8      	; 0xbcc <memset+0x4>
 bd4:	08 95       	ret

00000bd6 <strnlen>:
 bd6:	fc 01       	movw	r30, r24
 bd8:	61 50       	subi	r22, 0x01	; 1
 bda:	70 40       	sbci	r23, 0x00	; 0
 bdc:	01 90       	ld	r0, Z+
 bde:	01 10       	cpse	r0, r1
 be0:	d8 f7       	brcc	.-10     	; 0xbd8 <strnlen+0x2>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	8e 0f       	add	r24, r30
 be8:	9f 1f       	adc	r25, r31
 bea:	08 95       	ret

00000bec <fputc>:
 bec:	0f 93       	push	r16
 bee:	1f 93       	push	r17
 bf0:	cf 93       	push	r28
 bf2:	df 93       	push	r29
 bf4:	fb 01       	movw	r30, r22
 bf6:	23 81       	ldd	r18, Z+3	; 0x03
 bf8:	21 fd       	sbrc	r18, 1
 bfa:	03 c0       	rjmp	.+6      	; 0xc02 <fputc+0x16>
 bfc:	8f ef       	ldi	r24, 0xFF	; 255
 bfe:	9f ef       	ldi	r25, 0xFF	; 255
 c00:	2c c0       	rjmp	.+88     	; 0xc5a <fputc+0x6e>
 c02:	22 ff       	sbrs	r18, 2
 c04:	16 c0       	rjmp	.+44     	; 0xc32 <fputc+0x46>
 c06:	46 81       	ldd	r20, Z+6	; 0x06
 c08:	57 81       	ldd	r21, Z+7	; 0x07
 c0a:	24 81       	ldd	r18, Z+4	; 0x04
 c0c:	35 81       	ldd	r19, Z+5	; 0x05
 c0e:	42 17       	cp	r20, r18
 c10:	53 07       	cpc	r21, r19
 c12:	44 f4       	brge	.+16     	; 0xc24 <fputc+0x38>
 c14:	a0 81       	ld	r26, Z
 c16:	b1 81       	ldd	r27, Z+1	; 0x01
 c18:	9d 01       	movw	r18, r26
 c1a:	2f 5f       	subi	r18, 0xFF	; 255
 c1c:	3f 4f       	sbci	r19, 0xFF	; 255
 c1e:	31 83       	std	Z+1, r19	; 0x01
 c20:	20 83       	st	Z, r18
 c22:	8c 93       	st	X, r24
 c24:	26 81       	ldd	r18, Z+6	; 0x06
 c26:	37 81       	ldd	r19, Z+7	; 0x07
 c28:	2f 5f       	subi	r18, 0xFF	; 255
 c2a:	3f 4f       	sbci	r19, 0xFF	; 255
 c2c:	37 83       	std	Z+7, r19	; 0x07
 c2e:	26 83       	std	Z+6, r18	; 0x06
 c30:	14 c0       	rjmp	.+40     	; 0xc5a <fputc+0x6e>
 c32:	8b 01       	movw	r16, r22
 c34:	ec 01       	movw	r28, r24
 c36:	fb 01       	movw	r30, r22
 c38:	00 84       	ldd	r0, Z+8	; 0x08
 c3a:	f1 85       	ldd	r31, Z+9	; 0x09
 c3c:	e0 2d       	mov	r30, r0
 c3e:	09 95       	icall
 c40:	89 2b       	or	r24, r25
 c42:	e1 f6       	brne	.-72     	; 0xbfc <fputc+0x10>
 c44:	d8 01       	movw	r26, r16
 c46:	16 96       	adiw	r26, 0x06	; 6
 c48:	8d 91       	ld	r24, X+
 c4a:	9c 91       	ld	r25, X
 c4c:	17 97       	sbiw	r26, 0x07	; 7
 c4e:	01 96       	adiw	r24, 0x01	; 1
 c50:	17 96       	adiw	r26, 0x07	; 7
 c52:	9c 93       	st	X, r25
 c54:	8e 93       	st	-X, r24
 c56:	16 97       	sbiw	r26, 0x06	; 6
 c58:	ce 01       	movw	r24, r28
 c5a:	df 91       	pop	r29
 c5c:	cf 91       	pop	r28
 c5e:	1f 91       	pop	r17
 c60:	0f 91       	pop	r16
 c62:	08 95       	ret

00000c64 <__ultoa_invert>:
 c64:	fa 01       	movw	r30, r20
 c66:	aa 27       	eor	r26, r26
 c68:	28 30       	cpi	r18, 0x08	; 8
 c6a:	51 f1       	breq	.+84     	; 0xcc0 <__ultoa_invert+0x5c>
 c6c:	20 31       	cpi	r18, 0x10	; 16
 c6e:	81 f1       	breq	.+96     	; 0xcd0 <__ultoa_invert+0x6c>
 c70:	e8 94       	clt
 c72:	6f 93       	push	r22
 c74:	6e 7f       	andi	r22, 0xFE	; 254
 c76:	6e 5f       	subi	r22, 0xFE	; 254
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	af 4f       	sbci	r26, 0xFF	; 255
 c80:	b1 e0       	ldi	r27, 0x01	; 1
 c82:	3e d0       	rcall	.+124    	; 0xd00 <__ultoa_invert+0x9c>
 c84:	b4 e0       	ldi	r27, 0x04	; 4
 c86:	3c d0       	rcall	.+120    	; 0xd00 <__ultoa_invert+0x9c>
 c88:	67 0f       	add	r22, r23
 c8a:	78 1f       	adc	r23, r24
 c8c:	89 1f       	adc	r24, r25
 c8e:	9a 1f       	adc	r25, r26
 c90:	a1 1d       	adc	r26, r1
 c92:	68 0f       	add	r22, r24
 c94:	79 1f       	adc	r23, r25
 c96:	8a 1f       	adc	r24, r26
 c98:	91 1d       	adc	r25, r1
 c9a:	a1 1d       	adc	r26, r1
 c9c:	6a 0f       	add	r22, r26
 c9e:	71 1d       	adc	r23, r1
 ca0:	81 1d       	adc	r24, r1
 ca2:	91 1d       	adc	r25, r1
 ca4:	a1 1d       	adc	r26, r1
 ca6:	20 d0       	rcall	.+64     	; 0xce8 <__ultoa_invert+0x84>
 ca8:	09 f4       	brne	.+2      	; 0xcac <__ultoa_invert+0x48>
 caa:	68 94       	set
 cac:	3f 91       	pop	r19
 cae:	2a e0       	ldi	r18, 0x0A	; 10
 cb0:	26 9f       	mul	r18, r22
 cb2:	11 24       	eor	r1, r1
 cb4:	30 19       	sub	r19, r0
 cb6:	30 5d       	subi	r19, 0xD0	; 208
 cb8:	31 93       	st	Z+, r19
 cba:	de f6       	brtc	.-74     	; 0xc72 <__ultoa_invert+0xe>
 cbc:	cf 01       	movw	r24, r30
 cbe:	08 95       	ret
 cc0:	46 2f       	mov	r20, r22
 cc2:	47 70       	andi	r20, 0x07	; 7
 cc4:	40 5d       	subi	r20, 0xD0	; 208
 cc6:	41 93       	st	Z+, r20
 cc8:	b3 e0       	ldi	r27, 0x03	; 3
 cca:	0f d0       	rcall	.+30     	; 0xcea <__ultoa_invert+0x86>
 ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__ultoa_invert+0x5c>
 cce:	f6 cf       	rjmp	.-20     	; 0xcbc <__ultoa_invert+0x58>
 cd0:	46 2f       	mov	r20, r22
 cd2:	4f 70       	andi	r20, 0x0F	; 15
 cd4:	40 5d       	subi	r20, 0xD0	; 208
 cd6:	4a 33       	cpi	r20, 0x3A	; 58
 cd8:	18 f0       	brcs	.+6      	; 0xce0 <__ultoa_invert+0x7c>
 cda:	49 5d       	subi	r20, 0xD9	; 217
 cdc:	31 fd       	sbrc	r19, 1
 cde:	40 52       	subi	r20, 0x20	; 32
 ce0:	41 93       	st	Z+, r20
 ce2:	02 d0       	rcall	.+4      	; 0xce8 <__ultoa_invert+0x84>
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__ultoa_invert+0x6c>
 ce6:	ea cf       	rjmp	.-44     	; 0xcbc <__ultoa_invert+0x58>
 ce8:	b4 e0       	ldi	r27, 0x04	; 4
 cea:	a6 95       	lsr	r26
 cec:	97 95       	ror	r25
 cee:	87 95       	ror	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	ba 95       	dec	r27
 cf6:	c9 f7       	brne	.-14     	; 0xcea <__ultoa_invert+0x86>
 cf8:	00 97       	sbiw	r24, 0x00	; 0
 cfa:	61 05       	cpc	r22, r1
 cfc:	71 05       	cpc	r23, r1
 cfe:	08 95       	ret
 d00:	9b 01       	movw	r18, r22
 d02:	ac 01       	movw	r20, r24
 d04:	0a 2e       	mov	r0, r26
 d06:	06 94       	lsr	r0
 d08:	57 95       	ror	r21
 d0a:	47 95       	ror	r20
 d0c:	37 95       	ror	r19
 d0e:	27 95       	ror	r18
 d10:	ba 95       	dec	r27
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__ultoa_invert+0xa2>
 d14:	62 0f       	add	r22, r18
 d16:	73 1f       	adc	r23, r19
 d18:	84 1f       	adc	r24, r20
 d1a:	95 1f       	adc	r25, r21
 d1c:	a0 1d       	adc	r26, r0
 d1e:	08 95       	ret

00000d20 <__prologue_saves__>:
 d20:	2f 92       	push	r2
 d22:	3f 92       	push	r3
 d24:	4f 92       	push	r4
 d26:	5f 92       	push	r5
 d28:	6f 92       	push	r6
 d2a:	7f 92       	push	r7
 d2c:	8f 92       	push	r8
 d2e:	9f 92       	push	r9
 d30:	af 92       	push	r10
 d32:	bf 92       	push	r11
 d34:	cf 92       	push	r12
 d36:	df 92       	push	r13
 d38:	ef 92       	push	r14
 d3a:	ff 92       	push	r15
 d3c:	0f 93       	push	r16
 d3e:	1f 93       	push	r17
 d40:	cf 93       	push	r28
 d42:	df 93       	push	r29
 d44:	cd b7       	in	r28, 0x3d	; 61
 d46:	de b7       	in	r29, 0x3e	; 62
 d48:	ca 1b       	sub	r28, r26
 d4a:	db 0b       	sbc	r29, r27
 d4c:	0f b6       	in	r0, 0x3f	; 63
 d4e:	f8 94       	cli
 d50:	de bf       	out	0x3e, r29	; 62
 d52:	0f be       	out	0x3f, r0	; 63
 d54:	cd bf       	out	0x3d, r28	; 61
 d56:	09 94       	ijmp

00000d58 <__epilogue_restores__>:
 d58:	2a 88       	ldd	r2, Y+18	; 0x12
 d5a:	39 88       	ldd	r3, Y+17	; 0x11
 d5c:	48 88       	ldd	r4, Y+16	; 0x10
 d5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 d60:	6e 84       	ldd	r6, Y+14	; 0x0e
 d62:	7d 84       	ldd	r7, Y+13	; 0x0d
 d64:	8c 84       	ldd	r8, Y+12	; 0x0c
 d66:	9b 84       	ldd	r9, Y+11	; 0x0b
 d68:	aa 84       	ldd	r10, Y+10	; 0x0a
 d6a:	b9 84       	ldd	r11, Y+9	; 0x09
 d6c:	c8 84       	ldd	r12, Y+8	; 0x08
 d6e:	df 80       	ldd	r13, Y+7	; 0x07
 d70:	ee 80       	ldd	r14, Y+6	; 0x06
 d72:	fd 80       	ldd	r15, Y+5	; 0x05
 d74:	0c 81       	ldd	r16, Y+4	; 0x04
 d76:	1b 81       	ldd	r17, Y+3	; 0x03
 d78:	aa 81       	ldd	r26, Y+2	; 0x02
 d7a:	b9 81       	ldd	r27, Y+1	; 0x01
 d7c:	ce 0f       	add	r28, r30
 d7e:	d1 1d       	adc	r29, r1
 d80:	0f b6       	in	r0, 0x3f	; 63
 d82:	f8 94       	cli
 d84:	de bf       	out	0x3e, r29	; 62
 d86:	0f be       	out	0x3f, r0	; 63
 d88:	cd bf       	out	0x3d, r28	; 61
 d8a:	ed 01       	movw	r28, r26
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
