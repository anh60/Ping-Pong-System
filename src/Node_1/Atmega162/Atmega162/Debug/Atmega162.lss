
Atmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  000012e8  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001d2  008001d2  0000144e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002342  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116c  00000000  00000000  00003aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d4  00000000  00000000  00004c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  000060ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001100  00000000  00000000  00006eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 ee       	ldi	r30, 0xE8	; 232
      84:	f2 e1       	ldi	r31, 0x12	; 18
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 3d       	cpi	r26, 0xD2	; 210
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 ed       	ldi	r26, 0xD2	; 210
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 3d       	cpi	r26, 0xDC	; 220
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 0c 02 	call	0x418	; 0x418 <main>
      a6:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include <util/delay.h>

#define BASE_ADDRESS_ADC 0x1400;

void adc_init (void){
	MCUCR |= (1 << SRE );  // enable XMEM
      ae:	85 b7       	in	r24, 0x35	; 53
      b0:	80 68       	ori	r24, 0x80	; 128
      b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)	
      b4:	80 b7       	in	r24, 0x30	; 48
      b6:	80 62       	ori	r24, 0x20	; 32
      b8:	80 bf       	out	0x30, r24	; 48
      ba:	08 95       	ret

000000bc <adc_read>:
}

uint8_t adc_read(uint8_t channel){
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	00 d0       	rcall	.+0      	; 0xc2 <adc_read+0x6>
      c2:	00 d0       	rcall	.+0      	; 0xc4 <adc_read+0x8>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
		if (channel > 3 && channel < 0) {
			printf("ERROR: Channel must be between 0 and 3");
			return 0;
		}
		volatile char *ext_mem_adc = (char *) BASE_ADDRESS_ADC;
		ext_mem_adc[0x0000]= 0x00;	//Write dummy data to trigger WR signal
      c8:	e0 e0       	ldi	r30, 0x00	; 0
      ca:	f4 e1       	ldi	r31, 0x14	; 20
      cc:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	95 e0       	ldi	r25, 0x05	; 5
      d0:	9a 95       	dec	r25
      d2:	f1 f7       	brne	.-4      	; 0xd0 <adc_read+0x14>
		_delay_us(15);				//Delay to match timing graph
		volatile uint8_t ret_val[4];
		ret_val[0] = ext_mem_adc[0x0000];
      d4:	90 81       	ld	r25, Z
      d6:	99 83       	std	Y+1, r25	; 0x01
		ret_val[1] = ext_mem_adc[0x0000];
      d8:	90 81       	ld	r25, Z
      da:	9a 83       	std	Y+2, r25	; 0x02
		ret_val[2] = ext_mem_adc[0x0000];
      dc:	90 81       	ld	r25, Z
      de:	9b 83       	std	Y+3, r25	; 0x03
		ret_val[3] = ext_mem_adc[0x0000];
      e0:	90 81       	ld	r25, Z
      e2:	9c 83       	std	Y+4, r25	; 0x04
		return ret_val[channel];
      e4:	e1 e0       	ldi	r30, 0x01	; 1
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ec 0f       	add	r30, r28
      ea:	fd 1f       	adc	r31, r29
      ec:	e8 0f       	add	r30, r24
      ee:	f1 1d       	adc	r31, r1
      f0:	80 81       	ld	r24, Z
}
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	0f 90       	pop	r0
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <can_init>:

#include "can.h"
#include "../MCP2515/mcp2515.h"

void can_init(void){
	mcp2515_init();
     100:	0e 94 bb 02 	call	0x576	; 0x576 <mcp2515_init>
     104:	08 95       	ret

00000106 <can_message_send>:
}

void can_message_send(can_message can_msg){
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	2b 97       	sbiw	r28, 0x0b	; 11
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	e9 82       	std	Y+1, r14	; 0x01
     124:	fa 82       	std	Y+2, r15	; 0x02
     126:	0b 83       	std	Y+3, r16	; 0x03
     128:	1c 83       	std	Y+4, r17	; 0x04
     12a:	2d 83       	std	Y+5, r18	; 0x05
     12c:	3e 83       	std	Y+6, r19	; 0x06
     12e:	4f 83       	std	Y+7, r20	; 0x07
     130:	58 87       	std	Y+8, r21	; 0x08
     132:	69 87       	std	Y+9, r22	; 0x09
     134:	7a 87       	std	Y+10, r23	; 0x0a
     136:	8b 87       	std	Y+11, r24	; 0x0b
	//Setup
	mcp2515_write(TXB0SIDH,can_msg.id >> 3); //ID High
     138:	09 81       	ldd	r16, Y+1	; 0x01
     13a:	1a 81       	ldd	r17, Y+2	; 0x02
     13c:	b8 01       	movw	r22, r16
     13e:	76 95       	lsr	r23
     140:	67 95       	ror	r22
     142:	76 95       	lsr	r23
     144:	67 95       	ror	r22
     146:	76 95       	lsr	r23
     148:	67 95       	ror	r22
     14a:	81 e3       	ldi	r24, 0x31	; 49
     14c:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	mcp2515_write(TXB0SIDL,(can_msg.id & 0b00000111) << 5); //Id Low
     150:	60 2f       	mov	r22, r16
     152:	62 95       	swap	r22
     154:	66 0f       	add	r22, r22
     156:	60 7e       	andi	r22, 0xE0	; 224
     158:	82 e3       	ldi	r24, 0x32	; 50
     15a:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	mcp2515_write(TXB0DLC,can_msg.data_length); //Data Length
     15e:	0b 81       	ldd	r16, Y+3	; 0x03
     160:	60 2f       	mov	r22, r16
     162:	85 e3       	ldi	r24, 0x35	; 53
     164:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	0c c0       	rjmp	.+24     	; 0x184 <can_message_send+0x7e>
			mcp2515_write(TXB0D0+reg,can_msg.data[reg]); //Data
     16c:	e4 e0       	ldi	r30, 0x04	; 4
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ec 0f       	add	r30, r28
     172:	fd 1f       	adc	r31, r29
     174:	e1 0f       	add	r30, r17
     176:	f1 1d       	adc	r31, r1
     178:	60 81       	ld	r22, Z
     17a:	86 e3       	ldi	r24, 0x36	; 54
     17c:	81 0f       	add	r24, r17
     17e:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
void can_message_send(can_message can_msg){
	//Setup
	mcp2515_write(TXB0SIDH,can_msg.id >> 3); //ID High
	mcp2515_write(TXB0SIDL,(can_msg.id & 0b00000111) << 5); //Id Low
	mcp2515_write(TXB0DLC,can_msg.data_length); //Data Length
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
     182:	1f 5f       	subi	r17, 0xFF	; 255
     184:	10 17       	cp	r17, r16
     186:	90 f3       	brcs	.-28     	; 0x16c <can_message_send+0x66>
			mcp2515_write(TXB0D0+reg,can_msg.data[reg]); //Data
	}
	//Request-to-send
	mcp2515_request_to_send(0); //Send buffer 	
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 83 02 	call	0x506	; 0x506 <mcp2515_request_to_send>
}
     18e:	2b 96       	adiw	r28, 0x0b	; 11
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	ef 90       	pop	r14
     1a6:	08 95       	ret

000001a8 <can_message_receive>:

can_message can_message_receive(void){
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	7c 01       	movw	r14, r24
	//Wait for interrupt
	can_message can_msg;
	//Read status register
	 uint8_t int_flags = mcp2515_read (MCP_CANINTF); //We need it to know if it is RX0 or 1
     1b6:	8c e2       	ldi	r24, 0x2C	; 44
     1b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
	 if((int_flags & 0b00000001) == 1){	//RX0 Interrupt
     1bc:	80 ff       	sbrs	r24, 0
     1be:	33 c0       	rjmp	.+102    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		//Read message
		uint8_t high = mcp2515_read(RXB0SIDH); //ID High
     1c0:	81 e6       	ldi	r24, 0x61	; 97
     1c2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
		can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
     1c6:	c8 2f       	mov	r28, r24
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	cc 0f       	add	r28, r28
     1cc:	dd 1f       	adc	r29, r29
     1ce:	cc 0f       	add	r28, r28
     1d0:	dd 1f       	adc	r29, r29
     1d2:	cc 0f       	add	r28, r28
     1d4:	dd 1f       	adc	r29, r29
     1d6:	82 e6       	ldi	r24, 0x62	; 98
     1d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
     1dc:	82 95       	swap	r24
     1de:	86 95       	lsr	r24
     1e0:	87 70       	andi	r24, 0x07	; 7
     1e2:	c8 2b       	or	r28, r24
     1e4:	f7 01       	movw	r30, r14
     1e6:	d1 83       	std	Z+1, r29	; 0x01
     1e8:	c0 83       	st	Z, r28
		can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
     1ea:	85 e6       	ldi	r24, 0x65	; 101
     1ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
     1f0:	d8 2f       	mov	r29, r24
     1f2:	f7 01       	movw	r30, r14
     1f4:	82 83       	std	Z+2, r24	; 0x02
		for(uint8_t reg=0; reg<can_msg.data_length; reg++){
     1f6:	c0 e0       	ldi	r28, 0x00	; 0
     1f8:	0b c0       	rjmp	.+22     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
			can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
     1fa:	0c 2f       	mov	r16, r28
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	8c 0f       	add	r24, r28
     202:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
     206:	f7 01       	movw	r30, r14
     208:	e0 0f       	add	r30, r16
     20a:	f1 1f       	adc	r31, r17
     20c:	83 83       	std	Z+3, r24	; 0x03
	 if((int_flags & 0b00000001) == 1){	//RX0 Interrupt
		//Read message
		uint8_t high = mcp2515_read(RXB0SIDH); //ID High
		can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
		can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
		for(uint8_t reg=0; reg<can_msg.data_length; reg++){
     20e:	cf 5f       	subi	r28, 0xFF	; 255
     210:	cd 17       	cp	r28, r29
     212:	98 f3       	brcs	.-26     	; 0x1fa <can_message_receive+0x52>
			can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
		}
		//Filter and masks
			
		//Reset interrupt
		mcp2515_bit_modify(MCP_CANINTF, 0, 0b00000001);
     214:	41 e0       	ldi	r20, 0x01	; 1
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	8c e2       	ldi	r24, 0x2C	; 44
     21a:	0e 94 9f 02 	call	0x53e	; 0x53e <mcp2515_bit_modify>
		int_flags = mcp2515_read (MCP_CANINTF);
     21e:	8c e2       	ldi	r24, 0x2C	; 44
     220:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
		return can_msg; 
     224:	00 c0       	rjmp	.+0      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
	 }
}
     226:	c7 01       	movw	r24, r14
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	08 95       	ret

00000236 <INT_init>:
#include "interrupts.h"
#include "../CAN/can.h"
#include <util/delay.h>

void INT_init(void){
	GICR |= 1<<INT0;		/* Enable INT0*/
     236:	8b b7       	in	r24, 0x3b	; 59
     238:	80 64       	ori	r24, 0x40	; 64
     23a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01 & ~(1<<ISC00);  /* Trigger INT0 on falling edge */	
     23c:	85 b7       	in	r24, 0x35	; 53
     23e:	82 60       	ori	r24, 0x02	; 2
     240:	85 bf       	out	0x35, r24	; 53
	sei();			/* Enable Global Interrupt */
     242:	78 94       	sei
     244:	08 95       	ret

00000246 <__vector_1>:
}

/*Interrupt Service Routine for INT0*/
ISR(INT0_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	4f 93       	push	r20
     256:	5f 93       	push	r21
     258:	6f 93       	push	r22
     25a:	7f 93       	push	r23
     25c:	8f 93       	push	r24
     25e:	9f 93       	push	r25
     260:	af 93       	push	r26
     262:	bf 93       	push	r27
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	2b 97       	sbiw	r28, 0x0b	; 11
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61
	printf("This is an INT0: CAN message:\n\r");
     276:	86 e0       	ldi	r24, 0x06	; 6
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	9f 93       	push	r25
     27c:	8f 93       	push	r24
     27e:	0e 94 20 05 	call	0xa40	; 0xa40 <printf>
	can_message can_message_rtr = can_message_receive();
     282:	ce 01       	movw	r24, r28
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <can_message_receive>
	printf("ID=%d, length=%d, data=%d, data2=%d\n\r",can_message_rtr.id, can_message_rtr.data_length, can_message_rtr.data[0],can_message_rtr.data[1]);
     28a:	2d 81       	ldd	r18, Y+5	; 0x05
     28c:	9c 81       	ldd	r25, Y+4	; 0x04
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	1f 92       	push	r1
     292:	2f 93       	push	r18
     294:	1f 92       	push	r1
     296:	9f 93       	push	r25
     298:	1f 92       	push	r1
     29a:	8f 93       	push	r24
     29c:	8a 81       	ldd	r24, Y+2	; 0x02
     29e:	8f 93       	push	r24
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	8f 93       	push	r24
     2a4:	86 e2       	ldi	r24, 0x26	; 38
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	9f 93       	push	r25
     2aa:	8f 93       	push	r24
     2ac:	0e 94 20 05 	call	0xa40	; 0xa40 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b0:	83 ed       	ldi	r24, 0xD3	; 211
     2b2:	90 e3       	ldi	r25, 0x30	; 48
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <__vector_1+0x6e>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <__vector_1+0x74>
     2ba:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	2b 96       	adiw	r28, 0x0b	; 11
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	bf 91       	pop	r27
     2dc:	af 91       	pop	r26
     2de:	9f 91       	pop	r25
     2e0:	8f 91       	pop	r24
     2e2:	7f 91       	pop	r23
     2e4:	6f 91       	pop	r22
     2e6:	5f 91       	pop	r21
     2e8:	4f 91       	pop	r20
     2ea:	3f 91       	pop	r19
     2ec:	2f 91       	pop	r18
     2ee:	0f 90       	pop	r0
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <get_X_pos>:
	return get_slider(1);
}

int16_t get_slider_l(void){
	return get_slider(0);
}
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	27 97       	sbiw	r28, 0x07	; 7
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	1b 82       	std	Y+3, r1	; 0x03
     312:	1a 82       	std	Y+2, r1	; 0x02
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	0b c0       	rjmp	.+22     	; 0x330 <get_X_pos+0x38>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_read>
     320:	2a 81       	ldd	r18, Y+2	; 0x02
     322:	3b 81       	ldd	r19, Y+3	; 0x03
     324:	28 0f       	add	r18, r24
     326:	31 1d       	adc	r19, r1
     328:	3b 83       	std	Y+3, r19	; 0x03
     32a:	2a 83       	std	Y+2, r18	; 0x02
     32c:	0f 5f       	subi	r16, 0xFF	; 255
     32e:	1f 4f       	sbci	r17, 0xFF	; 255
     330:	04 31       	cpi	r16, 0x14	; 20
     332:	11 05       	cpc	r17, r1
     334:	94 f3       	brlt	.-28     	; 0x31a <get_X_pos+0x22>
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	3b 81       	ldd	r19, Y+3	; 0x03
     33a:	ad ec       	ldi	r26, 0xCD	; 205
     33c:	bc ec       	ldi	r27, 0xCC	; 204
     33e:	0e 94 c6 04 	call	0x98c	; 0x98c <__umulhisi3>
     342:	92 95       	swap	r25
     344:	82 95       	swap	r24
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	89 27       	eor	r24, r25
     34a:	9f 70       	andi	r25, 0x0F	; 15
     34c:	89 27       	eor	r24, r25
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	69 81       	ldd	r22, Y+1	; 0x01
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	60 5a       	subi	r22, 0xA0	; 160
     356:	71 09       	sbc	r23, r1
     358:	07 2e       	mov	r0, r23
     35a:	00 0c       	add	r0, r0
     35c:	88 0b       	sbc	r24, r24
     35e:	99 0b       	sbc	r25, r25
     360:	0e 94 a4 03 	call	0x748	; 0x748 <__floatsisf>
     364:	6c 83       	std	Y+4, r22	; 0x04
     366:	7d 83       	std	Y+5, r23	; 0x05
     368:	8e 83       	std	Y+6, r24	; 0x06
     36a:	9f 83       	std	Y+7, r25	; 0x07
     36c:	6c 81       	ldd	r22, Y+4	; 0x04
     36e:	7d 81       	ldd	r23, Y+5	; 0x05
     370:	8e 81       	ldd	r24, Y+6	; 0x06
     372:	9f 81       	ldd	r25, Y+7	; 0x07
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 ea       	ldi	r20, 0xA0	; 160
     37a:	51 e4       	ldi	r21, 0x41	; 65
     37c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__cmpsf2>
     380:	88 23       	and	r24, r24
     382:	64 f4       	brge	.+24     	; 0x39c <get_X_pos+0xa4>
     384:	6c 81       	ldd	r22, Y+4	; 0x04
     386:	7d 81       	ldd	r23, Y+5	; 0x05
     388:	8e 81       	ldd	r24, Y+6	; 0x06
     38a:	9f 81       	ldd	r25, Y+7	; 0x07
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 ea       	ldi	r20, 0xA0	; 160
     392:	51 ec       	ldi	r21, 0xC1	; 193
     394:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
     398:	18 16       	cp	r1, r24
     39a:	3c f1       	brlt	.+78     	; 0x3ea <get_X_pos+0xf2>
     39c:	6c 81       	ldd	r22, Y+4	; 0x04
     39e:	7d 81       	ldd	r23, Y+5	; 0x05
     3a0:	8e 81       	ldd	r24, Y+6	; 0x06
     3a2:	9f 81       	ldd	r25, Y+7	; 0x07
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	a9 01       	movw	r20, r18
     3aa:	0e 94 2c 04 	call	0x858	; 0x858 <__gesf2>
     3ae:	88 23       	and	r24, r24
     3b0:	74 f0       	brlt	.+28     	; 0x3ce <get_X_pos+0xd6>
     3b2:	6c 81       	ldd	r22, Y+4	; 0x04
     3b4:	7d 81       	ldd	r23, Y+5	; 0x05
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	24 e1       	ldi	r18, 0x14	; 20
     3bc:	3e ea       	ldi	r19, 0xAE	; 174
     3be:	47 e8       	ldi	r20, 0x87	; 135
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3>
     3c6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fixsfsi>
     3ca:	cb 01       	movw	r24, r22
     3cc:	10 c0       	rjmp	.+32     	; 0x3ee <get_X_pos+0xf6>
     3ce:	6c 81       	ldd	r22, Y+4	; 0x04
     3d0:	7d 81       	ldd	r23, Y+5	; 0x05
     3d2:	8e 81       	ldd	r24, Y+6	; 0x06
     3d4:	9f 81       	ldd	r25, Y+7	; 0x07
     3d6:	2e ea       	ldi	r18, 0xAE	; 174
     3d8:	37 e4       	ldi	r19, 0x47	; 71
     3da:	41 e2       	ldi	r20, 0x21	; 33
     3dc:	5f e3       	ldi	r21, 0x3F	; 63
     3de:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3>
     3e2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__fixsfsi>
     3e6:	cb 01       	movw	r24, r22
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <get_X_pos+0xf6>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	27 96       	adiw	r28, 0x07	; 7
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	08 95       	ret

00000404 <init_buttons>:

void init_buttons(void){
	DDRB &= ~(1 << PINB1);
     404:	87 b3       	in	r24, 0x17	; 23
     406:	8d 7f       	andi	r24, 0xFD	; 253
     408:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB2);
     40a:	87 b3       	in	r24, 0x17	; 23
     40c:	8b 7f       	andi	r24, 0xFB	; 251
     40e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB3);
     410:	87 b3       	in	r24, 0x17	; 23
     412:	87 7f       	andi	r24, 0xF7	; 247
     414:	87 bb       	out	0x17, r24	; 23
     416:	08 95       	ret

00000418 <main>:
#include "CAN/can.h"

#define F_CPU 4915200UL

int main(void)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	2b 97       	sbiw	r28, 0x0b	; 11
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61

	USART_Init(MYUBRR); //Initializing UART
     42c:	8f e1       	ldi	r24, 0x1F	; 31
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 47 03 	call	0x68e	; 0x68e <USART_Init>
	printf("Initializing...\n\r");
     434:	8c e4       	ldi	r24, 0x4C	; 76
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	0e 94 20 05 	call	0xa40	; 0xa40 <printf>
	xmem_init();		//Initializing Memory
     440:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <xmem_init>
	adc_init();			//Initializing ADC
     444:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	init_buttons();		//Init PB buttons
     448:	0e 94 02 02 	call	0x404	; 0x404 <init_buttons>
	OLED_init();		//Init OLED
     44c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <OLED_init>
	can_init();
     450:	0e 94 80 00 	call	0x100	; 0x100 <can_init>
	INT_init();
     454:	0e 94 1b 01 	call	0x236	; 0x236 <INT_init>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
		//joystick_test();
		//menu_display_switch();

		
		can_message can_msg;
		can_msg.id = 100; //ID of Arduino
     45c:	84 e6       	ldi	r24, 0x64	; 100
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
		can_msg.data_length = 1; //Data Length
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	8b 83       	std	Y+3, r24	; 0x03
		can_msg.data[0] = get_X_pos();
     468:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <get_X_pos>
     46c:	8c 83       	std	Y+4, r24	; 0x04
		
		printf("DATA1 = %d;\n\r", can_msg.data[0]);
     46e:	1f 92       	push	r1
     470:	8f 93       	push	r24
     472:	8e e5       	ldi	r24, 0x5E	; 94
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 20 05 	call	0xa40	; 0xa40 <printf>
		can_message_send(can_msg);
     47e:	e9 80       	ldd	r14, Y+1	; 0x01
     480:	fa 80       	ldd	r15, Y+2	; 0x02
     482:	0b 81       	ldd	r16, Y+3	; 0x03
     484:	1c 81       	ldd	r17, Y+4	; 0x04
     486:	2d 81       	ldd	r18, Y+5	; 0x05
     488:	3e 81       	ldd	r19, Y+6	; 0x06
     48a:	4f 81       	ldd	r20, Y+7	; 0x07
     48c:	58 85       	ldd	r21, Y+8	; 0x08
     48e:	69 85       	ldd	r22, Y+9	; 0x09
     490:	7a 85       	ldd	r23, Y+10	; 0x0a
     492:	8b 85       	ldd	r24, Y+11	; 0x0b
     494:	0e 94 83 00 	call	0x106	; 0x106 <can_message_send>
     498:	8f e4       	ldi	r24, 0x4F	; 79
     49a:	93 ec       	ldi	r25, 0xC3	; 195
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <main+0x84>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x8a>
     4a2:	00 00       	nop
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	d7 cf       	rjmp	.-82     	; 0x45c <main+0x44>

000004ae <mcp2515_reset>:
	PORTB &= ~(1 << PB4); // Select CAN - controller
	SPI_send( MCP_READ_STATUS ); // Send read status instruction
	uint8_t value = SPI_read();
	PORTB |= (1 << PB4 ); // Deselect CAN - controller
	return value;
}
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4b4:	08 95       	ret

000004b6 <mcp2515_read>:
     4b6:	cf 93       	push	r28
     4b8:	c8 2f       	mov	r28, r24
     4ba:	88 b3       	in	r24, 0x18	; 24
     4bc:	8f 7e       	andi	r24, 0xEF	; 239
     4be:	88 bb       	out	0x18, r24	; 24
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4c6:	8c 2f       	mov	r24, r28
     4c8:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4cc:	0e 94 3a 03 	call	0x674	; 0x674 <SPI_read>
     4d0:	98 b3       	in	r25, 0x18	; 24
     4d2:	90 61       	ori	r25, 0x10	; 16
     4d4:	98 bb       	out	0x18, r25	; 24
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <mcp2515_write>:
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	d8 2f       	mov	r29, r24
     4e0:	c6 2f       	mov	r28, r22
     4e2:	88 b3       	in	r24, 0x18	; 24
     4e4:	8f 7e       	andi	r24, 0xEF	; 239
     4e6:	88 bb       	out	0x18, r24	; 24
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4ee:	8d 2f       	mov	r24, r29
     4f0:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4f4:	8c 2f       	mov	r24, r28
     4f6:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     4fa:	88 b3       	in	r24, 0x18	; 24
     4fc:	80 61       	ori	r24, 0x10	; 16
     4fe:	88 bb       	out	0x18, r24	; 24
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <mcp2515_request_to_send>:
     506:	98 b3       	in	r25, 0x18	; 24
     508:	9f 7e       	andi	r25, 0xEF	; 239
     50a:	98 bb       	out	0x18, r25	; 24
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	41 f0       	breq	.+16     	; 0x520 <mcp2515_request_to_send+0x1a>
     510:	18 f0       	brcs	.+6      	; 0x518 <mcp2515_request_to_send+0x12>
     512:	82 30       	cpi	r24, 0x02	; 2
     514:	49 f0       	breq	.+18     	; 0x528 <mcp2515_request_to_send+0x22>
     516:	0c c0       	rjmp	.+24     	; 0x530 <mcp2515_request_to_send+0x2a>
     518:	81 e8       	ldi	r24, 0x81	; 129
     51a:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     51e:	0b c0       	rjmp	.+22     	; 0x536 <mcp2515_request_to_send+0x30>
     520:	82 e8       	ldi	r24, 0x82	; 130
     522:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     526:	07 c0       	rjmp	.+14     	; 0x536 <mcp2515_request_to_send+0x30>
     528:	84 e8       	ldi	r24, 0x84	; 132
     52a:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     52e:	03 c0       	rjmp	.+6      	; 0x536 <mcp2515_request_to_send+0x30>
     530:	87 e8       	ldi	r24, 0x87	; 135
     532:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     536:	88 b3       	in	r24, 0x18	; 24
     538:	80 61       	ori	r24, 0x10	; 16
     53a:	88 bb       	out	0x18, r24	; 24
     53c:	08 95       	ret

0000053e <mcp2515_bit_modify>:
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	18 2f       	mov	r17, r24
     546:	c6 2f       	mov	r28, r22
     548:	d4 2f       	mov	r29, r20
     54a:	88 b3       	in	r24, 0x18	; 24
     54c:	8f 7e       	andi	r24, 0xEF	; 239
     54e:	88 bb       	out	0x18, r24	; 24
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     556:	81 2f       	mov	r24, r17
     558:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     55c:	8d 2f       	mov	r24, r29
     55e:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     562:	8c 2f       	mov	r24, r28
     564:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
     568:	88 b3       	in	r24, 0x18	; 24
     56a:	80 61       	ori	r24, 0x10	; 16
     56c:	88 bb       	out	0x18, r24	; 24
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <mcp2515_init>:


uint8_t mcp2515_init (void){
	uint8_t value, ctrlreg ;
	SPI_init() ; // Initialize SPI
     576:	0e 94 2f 03 	call	0x65e	; 0x65e <SPI_init>
	mcp2515_reset() ; // Send reset - command
     57a:	0e 94 57 02 	call	0x4ae	; 0x4ae <mcp2515_reset>
	// Self - test
	value = mcp2515_read (MCP_CANSTAT);
     57e:	8e e0       	ldi	r24, 0x0E	; 14
     580:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
     584:	80 7e       	andi	r24, 0xE0	; 224
     586:	80 38       	cpi	r24, 0x80	; 128
     588:	31 f0       	breq	.+12     	; 0x596 <mcp2515_init+0x20>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
     58a:	8c e6       	ldi	r24, 0x6C	; 108
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 36 05 	call	0xa6c	; 0xa6c <puts>
		return 1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	08 95       	ret
	}
	// More initialization
	//125Kbit/s at 16Mhz
	mcp2515_write(MCP_CNF1,0x03); //SJW=1 (0+1), BRP Baud Rate Prescaler = 4 (3+1)
     596:	63 e0       	ldi	r22, 0x03	; 3
     598:	8a e2       	ldi	r24, 0x2A	; 42
     59a:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	mcp2515_write(MCP_CNF2,0xAC); //BTLMODE=1, SAM=0, PS1=6 (5+1), PRSEG=5 (4+1)
     59e:	6c ea       	ldi	r22, 0xAC	; 172
     5a0:	89 e2       	ldi	r24, 0x29	; 41
     5a2:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	mcp2515_write(MCP_CNF3,0x03); //PS2=4 (3+1)
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	88 e2       	ldi	r24, 0x28	; 40
     5aa:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	
	//mcp2515_write(MCP_CANCTRL,0b01000000); //Set to Loopback mode
	mcp2515_write(MCP_CANCTRL,0b00000000); //Set to Normal mode
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	8f e0       	ldi	r24, 0x0F	; 15
     5b2:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	mcp2515_write(MCP_CANINTE,0b00000011); //Enable interrupts on RX buffers
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	8b e2       	ldi	r24, 0x2B	; 43
     5ba:	0e 94 6d 02 	call	0x4da	; 0x4da <mcp2515_write>
	return 0;
     5be:	80 e0       	ldi	r24, 0x00	; 0
}
     5c0:	08 95       	ret

000005c2 <OLED_write_cmd>:
	OLED_CMD[0x0000] = cmd;
}

void OLED_write_data(uint8_t msg){
	volatile char *data = (char *) BASE_ADDRESS_OLED_DATA;
	data[0x0000] = msg;
     5c2:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe24>
     5c6:	08 95       	ret

000005c8 <OLED_init>:
}

void OLED_init(void){
	 printf("Initializing OLED\n\r");
     5c8:	80 ea       	ldi	r24, 0xA0	; 160
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 20 05 	call	0xa40	; 0xa40 <printf>
	 OLED_write_cmd(0xae); //display off
     5d4:	8e ea       	ldi	r24, 0xAE	; 174
     5d6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xa1); //segment remap
     5da:	81 ea       	ldi	r24, 0xA1	; 161
     5dc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xda); //common pads hardware: alternative
     5e0:	8a ed       	ldi	r24, 0xDA	; 218
     5e2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x12);
     5e6:	82 e1       	ldi	r24, 0x12	; 18
     5e8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xc8); //common output scan direction:com63~com0
     5ec:	88 ec       	ldi	r24, 0xC8	; 200
     5ee:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xa8); //multiplex ration mode:63
     5f2:	88 ea       	ldi	r24, 0xA8	; 168
     5f4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x3f);
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
     5fa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xd5); //display divide ratio/osc. freq. mode
     5fe:	85 ed       	ldi	r24, 0xD5	; 213
     600:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x80);
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x81); //contrast control
     60a:	81 e8       	ldi	r24, 0x81	; 129
     60c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x50);
     610:	80 e5       	ldi	r24, 0x50	; 80
     612:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xd9); //set pre-charge period
     616:	89 ed       	ldi	r24, 0xD9	; 217
     618:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x21); //Set Column Address
     61c:	81 e2       	ldi	r24, 0x21	; 33
     61e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x20); //Set Memory Addressing Mode
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x02);
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xdb); //VCOM deselect level mode
     62e:	8b ed       	ldi	r24, 0xDB	; 219
     630:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x30);
     634:	80 e3       	ldi	r24, 0x30	; 48
     636:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xad); //master configuration
     63a:	8d ea       	ldi	r24, 0xAD	; 173
     63c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0x00);
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xa4); //out follows RAM content
     646:	84 ea       	ldi	r24, 0xA4	; 164
     648:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xa6); //set normal display
     64c:	86 ea       	ldi	r24, 0xA6	; 166
     64e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
	 OLED_write_cmd(0xaf); //display on
     652:	8f ea       	ldi	r24, 0xAF	; 175
     654:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <OLED_write_cmd>
}
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	08 95       	ret

0000065e <SPI_init>:
#include "spi.h"

/* Init procedure. Partially taken from datasheet */
void SPI_init(void){
	/* Set SSn, MOSI and SCK as output, all others input */
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
     65e:	80 eb       	ldi	r24, 0xB0	; 176
     660:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     662:	81 e5       	ldi	r24, 0x51	; 81
     664:	8d b9       	out	0x0d, r24	; 13
	/* Set SPI Mode = 0 (CPOL=0, CPHA=0) */
	SPCR &= ~(1<<CPOL)| ~(1<<CPHA);
     666:	8d b1       	in	r24, 0x0d	; 13
     668:	8d b9       	out	0x0d, r24	; 13
     66a:	08 95       	ret

0000066c <SPI_send>:
}

void SPI_send(uint8_t data){
	/* Transmission starts when writing to SPDR register */
	SPDR = data;
     66c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     66e:	77 9b       	sbis	0x0e, 7	; 14
     670:	fe cf       	rjmp	.-4      	; 0x66e <SPI_send+0x2>
	;
}
     672:	08 95       	ret

00000674 <SPI_read>:

uint8_t SPI_read(void){
	SPI_send(0xAA); //Send dummy data
     674:	8a ea       	ldi	r24, 0xAA	; 170
     676:	0e 94 36 03 	call	0x66c	; 0x66c <SPI_send>
	//Read data left in the SPI data register
	return SPDR;
     67a:	8f b1       	in	r24, 0x0f	; 15
}
     67c:	08 95       	ret

0000067e <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
    /* Wait for empty transmit buffer */
    while (!(UCSR0A & (1 << UDRE0)))
     67e:	5d 9b       	sbis	0x0b, 5	; 11
     680:	fe cf       	rjmp	.-4      	; 0x67e <USART_Transmit>
        ;
    /* Put data into buffer, sends the data */
    UDR0 = data;
     682:	8c b9       	out	0x0c, r24	; 12
     684:	08 95       	ret

00000686 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)))
     686:	5f 9b       	sbis	0x0b, 7	; 11
     688:	fe cf       	rjmp	.-4      	; 0x686 <USART_Receive>
        ;
    /* Get and return received data from buffer */
    return UDR0;
     68a:	8c b1       	in	r24, 0x0c	; 12
}
     68c:	08 95       	ret

0000068e <USART_Init>:
#include "uart.h"

void USART_Init(unsigned int ubrr)
{
    /* Set baud rate */
    UBRR0H |= (unsigned char)(ubrr >> 8);
     68e:	20 b5       	in	r18, 0x20	; 32
     690:	92 2b       	or	r25, r18
     692:	90 bd       	out	0x20, r25	; 32
    UBRR0L |= (unsigned char)ubrr;
     694:	99 b1       	in	r25, 0x09	; 9
     696:	89 2b       	or	r24, r25
     698:	89 b9       	out	0x09, r24	; 9
    /* Enable receiver and transmitter */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     69a:	8a b1       	in	r24, 0x0a	; 10
     69c:	88 61       	ori	r24, 0x18	; 24
     69e:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */
    UCSR0C |= (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     6a0:	80 b5       	in	r24, 0x20	; 32
     6a2:	8e 68       	ori	r24, 0x8E	; 142
     6a4:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_Transmit, USART_Receive);
     6a6:	63 e4       	ldi	r22, 0x43	; 67
     6a8:	73 e0       	ldi	r23, 0x03	; 3
     6aa:	8f e3       	ldi	r24, 0x3F	; 63
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 d5 04 	call	0x9aa	; 0x9aa <fdevopen>
     6b2:	08 95       	ret

000006b4 <xmem_init>:

/*Initializing external memory driver
Basic code taken from slides
*/
void xmem_init(void){
	MCUCR |= (1 << SRE );  // enable XMEM
     6b4:	85 b7       	in	r24, 0x35	; 53
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)
     6ba:	80 b7       	in	r24, 0x30	; 48
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM1 );
     6c0:	80 b7       	in	r24, 0x30	; 48
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 );
     6c6:	80 b7       	in	r24, 0x30	; 48
     6c8:	87 7f       	andi	r24, 0xF7	; 247
     6ca:	80 bf       	out	0x30, r24	; 48
     6cc:	08 95       	ret

000006ce <__cmpsf2>:
     6ce:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <__cmpsf2+0x8>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	08 95       	ret

000006d8 <__fixsfsi>:
     6d8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixunssfsi>
     6dc:	68 94       	set
     6de:	b1 11       	cpse	r27, r1
     6e0:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>
     6e4:	08 95       	ret

000006e6 <__fixunssfsi>:
     6e6:	0e 94 0b 04 	call	0x816	; 0x816 <__fp_splitA>
     6ea:	88 f0       	brcs	.+34     	; 0x70e <__fixunssfsi+0x28>
     6ec:	9f 57       	subi	r25, 0x7F	; 127
     6ee:	98 f0       	brcs	.+38     	; 0x716 <__fixunssfsi+0x30>
     6f0:	b9 2f       	mov	r27, r25
     6f2:	99 27       	eor	r25, r25
     6f4:	b7 51       	subi	r27, 0x17	; 23
     6f6:	b0 f0       	brcs	.+44     	; 0x724 <__fixunssfsi+0x3e>
     6f8:	e1 f0       	breq	.+56     	; 0x732 <__fixunssfsi+0x4c>
     6fa:	66 0f       	add	r22, r22
     6fc:	77 1f       	adc	r23, r23
     6fe:	88 1f       	adc	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	1a f0       	brmi	.+6      	; 0x70a <__fixunssfsi+0x24>
     704:	ba 95       	dec	r27
     706:	c9 f7       	brne	.-14     	; 0x6fa <__fixunssfsi+0x14>
     708:	14 c0       	rjmp	.+40     	; 0x732 <__fixunssfsi+0x4c>
     70a:	b1 30       	cpi	r27, 0x01	; 1
     70c:	91 f0       	breq	.+36     	; 0x732 <__fixunssfsi+0x4c>
     70e:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_zero>
     712:	b1 e0       	ldi	r27, 0x01	; 1
     714:	08 95       	ret
     716:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_zero>
     71a:	67 2f       	mov	r22, r23
     71c:	78 2f       	mov	r23, r24
     71e:	88 27       	eor	r24, r24
     720:	b8 5f       	subi	r27, 0xF8	; 248
     722:	39 f0       	breq	.+14     	; 0x732 <__fixunssfsi+0x4c>
     724:	b9 3f       	cpi	r27, 0xF9	; 249
     726:	cc f3       	brlt	.-14     	; 0x71a <__fixunssfsi+0x34>
     728:	86 95       	lsr	r24
     72a:	77 95       	ror	r23
     72c:	67 95       	ror	r22
     72e:	b3 95       	inc	r27
     730:	d9 f7       	brne	.-10     	; 0x728 <__fixunssfsi+0x42>
     732:	3e f4       	brtc	.+14     	; 0x742 <__fixunssfsi+0x5c>
     734:	90 95       	com	r25
     736:	80 95       	com	r24
     738:	70 95       	com	r23
     73a:	61 95       	neg	r22
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	8f 4f       	sbci	r24, 0xFF	; 255
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	08 95       	ret

00000744 <__floatunsisf>:
     744:	e8 94       	clt
     746:	09 c0       	rjmp	.+18     	; 0x75a <__floatsisf+0x12>

00000748 <__floatsisf>:
     748:	97 fb       	bst	r25, 7
     74a:	3e f4       	brtc	.+14     	; 0x75a <__floatsisf+0x12>
     74c:	90 95       	com	r25
     74e:	80 95       	com	r24
     750:	70 95       	com	r23
     752:	61 95       	neg	r22
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	8f 4f       	sbci	r24, 0xFF	; 255
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	99 23       	and	r25, r25
     75c:	a9 f0       	breq	.+42     	; 0x788 <__floatsisf+0x40>
     75e:	f9 2f       	mov	r31, r25
     760:	96 e9       	ldi	r25, 0x96	; 150
     762:	bb 27       	eor	r27, r27
     764:	93 95       	inc	r25
     766:	f6 95       	lsr	r31
     768:	87 95       	ror	r24
     76a:	77 95       	ror	r23
     76c:	67 95       	ror	r22
     76e:	b7 95       	ror	r27
     770:	f1 11       	cpse	r31, r1
     772:	f8 cf       	rjmp	.-16     	; 0x764 <__floatsisf+0x1c>
     774:	fa f4       	brpl	.+62     	; 0x7b4 <__floatsisf+0x6c>
     776:	bb 0f       	add	r27, r27
     778:	11 f4       	brne	.+4      	; 0x77e <__floatsisf+0x36>
     77a:	60 ff       	sbrs	r22, 0
     77c:	1b c0       	rjmp	.+54     	; 0x7b4 <__floatsisf+0x6c>
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	8f 4f       	sbci	r24, 0xFF	; 255
     784:	9f 4f       	sbci	r25, 0xFF	; 255
     786:	16 c0       	rjmp	.+44     	; 0x7b4 <__floatsisf+0x6c>
     788:	88 23       	and	r24, r24
     78a:	11 f0       	breq	.+4      	; 0x790 <__floatsisf+0x48>
     78c:	96 e9       	ldi	r25, 0x96	; 150
     78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__floatsisf+0x6a>
     790:	77 23       	and	r23, r23
     792:	21 f0       	breq	.+8      	; 0x79c <__floatsisf+0x54>
     794:	9e e8       	ldi	r25, 0x8E	; 142
     796:	87 2f       	mov	r24, r23
     798:	76 2f       	mov	r23, r22
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <__floatsisf+0x5e>
     79c:	66 23       	and	r22, r22
     79e:	71 f0       	breq	.+28     	; 0x7bc <__floatsisf+0x74>
     7a0:	96 e8       	ldi	r25, 0x86	; 134
     7a2:	86 2f       	mov	r24, r22
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	2a f0       	brmi	.+10     	; 0x7b4 <__floatsisf+0x6c>
     7aa:	9a 95       	dec	r25
     7ac:	66 0f       	add	r22, r22
     7ae:	77 1f       	adc	r23, r23
     7b0:	88 1f       	adc	r24, r24
     7b2:	da f7       	brpl	.-10     	; 0x7aa <__floatsisf+0x62>
     7b4:	88 0f       	add	r24, r24
     7b6:	96 95       	lsr	r25
     7b8:	87 95       	ror	r24
     7ba:	97 f9       	bld	r25, 7
     7bc:	08 95       	ret

000007be <__fp_cmp>:
     7be:	99 0f       	add	r25, r25
     7c0:	00 08       	sbc	r0, r0
     7c2:	55 0f       	add	r21, r21
     7c4:	aa 0b       	sbc	r26, r26
     7c6:	e0 e8       	ldi	r30, 0x80	; 128
     7c8:	fe ef       	ldi	r31, 0xFE	; 254
     7ca:	16 16       	cp	r1, r22
     7cc:	17 06       	cpc	r1, r23
     7ce:	e8 07       	cpc	r30, r24
     7d0:	f9 07       	cpc	r31, r25
     7d2:	c0 f0       	brcs	.+48     	; 0x804 <__fp_cmp+0x46>
     7d4:	12 16       	cp	r1, r18
     7d6:	13 06       	cpc	r1, r19
     7d8:	e4 07       	cpc	r30, r20
     7da:	f5 07       	cpc	r31, r21
     7dc:	98 f0       	brcs	.+38     	; 0x804 <__fp_cmp+0x46>
     7de:	62 1b       	sub	r22, r18
     7e0:	73 0b       	sbc	r23, r19
     7e2:	84 0b       	sbc	r24, r20
     7e4:	95 0b       	sbc	r25, r21
     7e6:	39 f4       	brne	.+14     	; 0x7f6 <__fp_cmp+0x38>
     7e8:	0a 26       	eor	r0, r26
     7ea:	61 f0       	breq	.+24     	; 0x804 <__fp_cmp+0x46>
     7ec:	23 2b       	or	r18, r19
     7ee:	24 2b       	or	r18, r20
     7f0:	25 2b       	or	r18, r21
     7f2:	21 f4       	brne	.+8      	; 0x7fc <__fp_cmp+0x3e>
     7f4:	08 95       	ret
     7f6:	0a 26       	eor	r0, r26
     7f8:	09 f4       	brne	.+2      	; 0x7fc <__fp_cmp+0x3e>
     7fa:	a1 40       	sbci	r26, 0x01	; 1
     7fc:	a6 95       	lsr	r26
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	81 1d       	adc	r24, r1
     802:	81 1d       	adc	r24, r1
     804:	08 95       	ret

00000806 <__fp_split3>:
     806:	57 fd       	sbrc	r21, 7
     808:	90 58       	subi	r25, 0x80	; 128
     80a:	44 0f       	add	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	59 f0       	breq	.+22     	; 0x826 <__fp_splitA+0x10>
     810:	5f 3f       	cpi	r21, 0xFF	; 255
     812:	71 f0       	breq	.+28     	; 0x830 <__fp_splitA+0x1a>
     814:	47 95       	ror	r20

00000816 <__fp_splitA>:
     816:	88 0f       	add	r24, r24
     818:	97 fb       	bst	r25, 7
     81a:	99 1f       	adc	r25, r25
     81c:	61 f0       	breq	.+24     	; 0x836 <__fp_splitA+0x20>
     81e:	9f 3f       	cpi	r25, 0xFF	; 255
     820:	79 f0       	breq	.+30     	; 0x840 <__fp_splitA+0x2a>
     822:	87 95       	ror	r24
     824:	08 95       	ret
     826:	12 16       	cp	r1, r18
     828:	13 06       	cpc	r1, r19
     82a:	14 06       	cpc	r1, r20
     82c:	55 1f       	adc	r21, r21
     82e:	f2 cf       	rjmp	.-28     	; 0x814 <__fp_split3+0xe>
     830:	46 95       	lsr	r20
     832:	f1 df       	rcall	.-30     	; 0x816 <__fp_splitA>
     834:	08 c0       	rjmp	.+16     	; 0x846 <__fp_splitA+0x30>
     836:	16 16       	cp	r1, r22
     838:	17 06       	cpc	r1, r23
     83a:	18 06       	cpc	r1, r24
     83c:	99 1f       	adc	r25, r25
     83e:	f1 cf       	rjmp	.-30     	; 0x822 <__fp_splitA+0xc>
     840:	86 95       	lsr	r24
     842:	71 05       	cpc	r23, r1
     844:	61 05       	cpc	r22, r1
     846:	08 94       	sec
     848:	08 95       	ret

0000084a <__fp_zero>:
     84a:	e8 94       	clt

0000084c <__fp_szero>:
     84c:	bb 27       	eor	r27, r27
     84e:	66 27       	eor	r22, r22
     850:	77 27       	eor	r23, r23
     852:	cb 01       	movw	r24, r22
     854:	97 f9       	bld	r25, 7
     856:	08 95       	ret

00000858 <__gesf2>:
     858:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
     85c:	08 f4       	brcc	.+2      	; 0x860 <__gesf2+0x8>
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	08 95       	ret

00000862 <__mulsf3>:
     862:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3x>
     866:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_round>
     86a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_pscA>
     86e:	38 f0       	brcs	.+14     	; 0x87e <__mulsf3+0x1c>
     870:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscB>
     874:	20 f0       	brcs	.+8      	; 0x87e <__mulsf3+0x1c>
     876:	95 23       	and	r25, r21
     878:	11 f0       	breq	.+4      	; 0x87e <__mulsf3+0x1c>
     87a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_inf>
     87e:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_nan>
     882:	11 24       	eor	r1, r1
     884:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>

00000888 <__mulsf3x>:
     888:	0e 94 03 04 	call	0x806	; 0x806 <__fp_split3>
     88c:	70 f3       	brcs	.-36     	; 0x86a <__mulsf3+0x8>

0000088e <__mulsf3_pse>:
     88e:	95 9f       	mul	r25, r21
     890:	c1 f3       	breq	.-16     	; 0x882 <__mulsf3+0x20>
     892:	95 0f       	add	r25, r21
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	55 1f       	adc	r21, r21
     898:	62 9f       	mul	r22, r18
     89a:	f0 01       	movw	r30, r0
     89c:	72 9f       	mul	r23, r18
     89e:	bb 27       	eor	r27, r27
     8a0:	f0 0d       	add	r31, r0
     8a2:	b1 1d       	adc	r27, r1
     8a4:	63 9f       	mul	r22, r19
     8a6:	aa 27       	eor	r26, r26
     8a8:	f0 0d       	add	r31, r0
     8aa:	b1 1d       	adc	r27, r1
     8ac:	aa 1f       	adc	r26, r26
     8ae:	64 9f       	mul	r22, r20
     8b0:	66 27       	eor	r22, r22
     8b2:	b0 0d       	add	r27, r0
     8b4:	a1 1d       	adc	r26, r1
     8b6:	66 1f       	adc	r22, r22
     8b8:	82 9f       	mul	r24, r18
     8ba:	22 27       	eor	r18, r18
     8bc:	b0 0d       	add	r27, r0
     8be:	a1 1d       	adc	r26, r1
     8c0:	62 1f       	adc	r22, r18
     8c2:	73 9f       	mul	r23, r19
     8c4:	b0 0d       	add	r27, r0
     8c6:	a1 1d       	adc	r26, r1
     8c8:	62 1f       	adc	r22, r18
     8ca:	83 9f       	mul	r24, r19
     8cc:	a0 0d       	add	r26, r0
     8ce:	61 1d       	adc	r22, r1
     8d0:	22 1f       	adc	r18, r18
     8d2:	74 9f       	mul	r23, r20
     8d4:	33 27       	eor	r19, r19
     8d6:	a0 0d       	add	r26, r0
     8d8:	61 1d       	adc	r22, r1
     8da:	23 1f       	adc	r18, r19
     8dc:	84 9f       	mul	r24, r20
     8de:	60 0d       	add	r22, r0
     8e0:	21 1d       	adc	r18, r1
     8e2:	82 2f       	mov	r24, r18
     8e4:	76 2f       	mov	r23, r22
     8e6:	6a 2f       	mov	r22, r26
     8e8:	11 24       	eor	r1, r1
     8ea:	9f 57       	subi	r25, 0x7F	; 127
     8ec:	50 40       	sbci	r21, 0x00	; 0
     8ee:	9a f0       	brmi	.+38     	; 0x916 <__mulsf3_pse+0x88>
     8f0:	f1 f0       	breq	.+60     	; 0x92e <__mulsf3_pse+0xa0>
     8f2:	88 23       	and	r24, r24
     8f4:	4a f0       	brmi	.+18     	; 0x908 <__mulsf3_pse+0x7a>
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	bb 1f       	adc	r27, r27
     8fc:	66 1f       	adc	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	88 1f       	adc	r24, r24
     902:	91 50       	subi	r25, 0x01	; 1
     904:	50 40       	sbci	r21, 0x00	; 0
     906:	a9 f7       	brne	.-22     	; 0x8f2 <__mulsf3_pse+0x64>
     908:	9e 3f       	cpi	r25, 0xFE	; 254
     90a:	51 05       	cpc	r21, r1
     90c:	80 f0       	brcs	.+32     	; 0x92e <__mulsf3_pse+0xa0>
     90e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_inf>
     912:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_szero>
     916:	5f 3f       	cpi	r21, 0xFF	; 255
     918:	e4 f3       	brlt	.-8      	; 0x912 <__mulsf3_pse+0x84>
     91a:	98 3e       	cpi	r25, 0xE8	; 232
     91c:	d4 f3       	brlt	.-12     	; 0x912 <__mulsf3_pse+0x84>
     91e:	86 95       	lsr	r24
     920:	77 95       	ror	r23
     922:	67 95       	ror	r22
     924:	b7 95       	ror	r27
     926:	f7 95       	ror	r31
     928:	e7 95       	ror	r30
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	c1 f7       	brne	.-16     	; 0x91e <__mulsf3_pse+0x90>
     92e:	fe 2b       	or	r31, r30
     930:	88 0f       	add	r24, r24
     932:	91 1d       	adc	r25, r1
     934:	96 95       	lsr	r25
     936:	87 95       	ror	r24
     938:	97 f9       	bld	r25, 7
     93a:	08 95       	ret

0000093c <__fp_inf>:
     93c:	97 f9       	bld	r25, 7
     93e:	9f 67       	ori	r25, 0x7F	; 127
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	08 95       	ret

00000948 <__fp_nan>:
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	80 ec       	ldi	r24, 0xC0	; 192
     94c:	08 95       	ret

0000094e <__fp_pscA>:
     94e:	00 24       	eor	r0, r0
     950:	0a 94       	dec	r0
     952:	16 16       	cp	r1, r22
     954:	17 06       	cpc	r1, r23
     956:	18 06       	cpc	r1, r24
     958:	09 06       	cpc	r0, r25
     95a:	08 95       	ret

0000095c <__fp_pscB>:
     95c:	00 24       	eor	r0, r0
     95e:	0a 94       	dec	r0
     960:	12 16       	cp	r1, r18
     962:	13 06       	cpc	r1, r19
     964:	14 06       	cpc	r1, r20
     966:	05 06       	cpc	r0, r21
     968:	08 95       	ret

0000096a <__fp_round>:
     96a:	09 2e       	mov	r0, r25
     96c:	03 94       	inc	r0
     96e:	00 0c       	add	r0, r0
     970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0xc>
     972:	88 23       	and	r24, r24
     974:	52 f0       	brmi	.+20     	; 0x98a <__fp_round+0x20>
     976:	bb 0f       	add	r27, r27
     978:	40 f4       	brcc	.+16     	; 0x98a <__fp_round+0x20>
     97a:	bf 2b       	or	r27, r31
     97c:	11 f4       	brne	.+4      	; 0x982 <__fp_round+0x18>
     97e:	60 ff       	sbrs	r22, 0
     980:	04 c0       	rjmp	.+8      	; 0x98a <__fp_round+0x20>
     982:	6f 5f       	subi	r22, 0xFF	; 255
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	8f 4f       	sbci	r24, 0xFF	; 255
     988:	9f 4f       	sbci	r25, 0xFF	; 255
     98a:	08 95       	ret

0000098c <__umulhisi3>:
     98c:	a2 9f       	mul	r26, r18
     98e:	b0 01       	movw	r22, r0
     990:	b3 9f       	mul	r27, r19
     992:	c0 01       	movw	r24, r0
     994:	a3 9f       	mul	r26, r19
     996:	70 0d       	add	r23, r0
     998:	81 1d       	adc	r24, r1
     99a:	11 24       	eor	r1, r1
     99c:	91 1d       	adc	r25, r1
     99e:	b2 9f       	mul	r27, r18
     9a0:	70 0d       	add	r23, r0
     9a2:	81 1d       	adc	r24, r1
     9a4:	11 24       	eor	r1, r1
     9a6:	91 1d       	adc	r25, r1
     9a8:	08 95       	ret

000009aa <fdevopen>:
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <fdevopen+0x18>
     9b6:	61 15       	cp	r22, r1
     9b8:	71 05       	cpc	r23, r1
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <fdevopen+0x18>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	3a c0       	rjmp	.+116    	; 0xa36 <fdevopen+0x8c>
     9c2:	8b 01       	movw	r16, r22
     9c4:	ec 01       	movw	r28, r24
     9c6:	6e e0       	ldi	r22, 0x0E	; 14
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 47 07 	call	0xe8e	; 0xe8e <calloc>
     9d2:	fc 01       	movw	r30, r24
     9d4:	89 2b       	or	r24, r25
     9d6:	91 f3       	breq	.-28     	; 0x9bc <fdevopen+0x12>
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	83 83       	std	Z+3, r24	; 0x03
     9dc:	01 15       	cp	r16, r1
     9de:	11 05       	cpc	r17, r1
     9e0:	71 f0       	breq	.+28     	; 0x9fe <fdevopen+0x54>
     9e2:	13 87       	std	Z+11, r17	; 0x0b
     9e4:	02 87       	std	Z+10, r16	; 0x0a
     9e6:	81 e8       	ldi	r24, 0x81	; 129
     9e8:	83 83       	std	Z+3, r24	; 0x03
     9ea:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     9ee:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__data_end+0x1>
     9f2:	89 2b       	or	r24, r25
     9f4:	21 f4       	brne	.+8      	; 0x9fe <fdevopen+0x54>
     9f6:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__data_end+0x1>
     9fa:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__data_end>
     9fe:	20 97       	sbiw	r28, 0x00	; 0
     a00:	c9 f0       	breq	.+50     	; 0xa34 <fdevopen+0x8a>
     a02:	d1 87       	std	Z+9, r29	; 0x09
     a04:	c0 87       	std	Z+8, r28	; 0x08
     a06:	83 81       	ldd	r24, Z+3	; 0x03
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	83 83       	std	Z+3, r24	; 0x03
     a0c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end+0x2>
     a10:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x3>
     a14:	89 2b       	or	r24, r25
     a16:	71 f4       	brne	.+28     	; 0xa34 <fdevopen+0x8a>
     a18:	f0 93 d5 01 	sts	0x01D5, r31	; 0x8001d5 <__data_end+0x3>
     a1c:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <__data_end+0x2>
     a20:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end+0x4>
     a24:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x5>
     a28:	89 2b       	or	r24, r25
     a2a:	21 f4       	brne	.+8      	; 0xa34 <fdevopen+0x8a>
     a2c:	f0 93 d7 01 	sts	0x01D7, r31	; 0x8001d7 <__data_end+0x5>
     a30:	e0 93 d6 01 	sts	0x01D6, r30	; 0x8001d6 <__data_end+0x4>
     a34:	cf 01       	movw	r24, r30
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <printf>:
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f5 e0       	ldi	r31, 0x05	; 5
     a48:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__prologue_saves__+0x20>
     a4c:	ae 01       	movw	r20, r28
     a4e:	4b 5f       	subi	r20, 0xFB	; 251
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	fa 01       	movw	r30, r20
     a54:	61 91       	ld	r22, Z+
     a56:	71 91       	ld	r23, Z+
     a58:	af 01       	movw	r20, r30
     a5a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end+0x2>
     a5e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x3>
     a62:	0e 94 66 05 	call	0xacc	; 0xacc <vfprintf>
     a66:	e2 e0       	ldi	r30, 0x02	; 2
     a68:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__epilogue_restores__+0x20>

00000a6c <puts>:
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <__data_end+0x2>
     a78:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <__data_end+0x3>
     a7c:	23 81       	ldd	r18, Z+3	; 0x03
     a7e:	21 ff       	sbrs	r18, 1
     a80:	1b c0       	rjmp	.+54     	; 0xab8 <puts+0x4c>
     a82:	8c 01       	movw	r16, r24
     a84:	d0 e0       	ldi	r29, 0x00	; 0
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	f8 01       	movw	r30, r16
     a8a:	81 91       	ld	r24, Z+
     a8c:	8f 01       	movw	r16, r30
     a8e:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <__data_end+0x2>
     a92:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <__data_end+0x3>
     a96:	db 01       	movw	r26, r22
     a98:	18 96       	adiw	r26, 0x08	; 8
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	19 97       	sbiw	r26, 0x09	; 9
     aa0:	88 23       	and	r24, r24
     aa2:	31 f0       	breq	.+12     	; 0xab0 <puts+0x44>
     aa4:	09 95       	icall
     aa6:	89 2b       	or	r24, r25
     aa8:	79 f3       	breq	.-34     	; 0xa88 <puts+0x1c>
     aaa:	df ef       	ldi	r29, 0xFF	; 255
     aac:	cf ef       	ldi	r28, 0xFF	; 255
     aae:	ec cf       	rjmp	.-40     	; 0xa88 <puts+0x1c>
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	09 95       	icall
     ab4:	89 2b       	or	r24, r25
     ab6:	19 f0       	breq	.+6      	; 0xabe <puts+0x52>
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <puts+0x56>
     abe:	8d 2f       	mov	r24, r29
     ac0:	9c 2f       	mov	r25, r28
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <vfprintf>:
     acc:	ab e0       	ldi	r26, 0x0B	; 11
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ec e6       	ldi	r30, 0x6C	; 108
     ad2:	f5 e0       	ldi	r31, 0x05	; 5
     ad4:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__prologue_saves__>
     ad8:	6c 01       	movw	r12, r24
     ada:	7b 01       	movw	r14, r22
     adc:	8a 01       	movw	r16, r20
     ade:	fc 01       	movw	r30, r24
     ae0:	17 82       	std	Z+7, r1	; 0x07
     ae2:	16 82       	std	Z+6, r1	; 0x06
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	81 ff       	sbrs	r24, 1
     ae8:	cc c1       	rjmp	.+920    	; 0xe82 <vfprintf+0x3b6>
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	3c 01       	movw	r6, r24
     af0:	f6 01       	movw	r30, r12
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	f7 01       	movw	r30, r14
     af6:	93 fd       	sbrc	r25, 3
     af8:	85 91       	lpm	r24, Z+
     afa:	93 ff       	sbrs	r25, 3
     afc:	81 91       	ld	r24, Z+
     afe:	7f 01       	movw	r14, r30
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <vfprintf+0x3a>
     b04:	ba c1       	rjmp	.+884    	; 0xe7a <vfprintf+0x3ae>
     b06:	85 32       	cpi	r24, 0x25	; 37
     b08:	39 f4       	brne	.+14     	; 0xb18 <vfprintf+0x4c>
     b0a:	93 fd       	sbrc	r25, 3
     b0c:	85 91       	lpm	r24, Z+
     b0e:	93 ff       	sbrs	r25, 3
     b10:	81 91       	ld	r24, Z+
     b12:	7f 01       	movw	r14, r30
     b14:	85 32       	cpi	r24, 0x25	; 37
     b16:	29 f4       	brne	.+10     	; 0xb22 <vfprintf+0x56>
     b18:	b6 01       	movw	r22, r12
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     b20:	e7 cf       	rjmp	.-50     	; 0xaf0 <vfprintf+0x24>
     b22:	91 2c       	mov	r9, r1
     b24:	21 2c       	mov	r2, r1
     b26:	31 2c       	mov	r3, r1
     b28:	ff e1       	ldi	r31, 0x1F	; 31
     b2a:	f3 15       	cp	r31, r3
     b2c:	d8 f0       	brcs	.+54     	; 0xb64 <vfprintf+0x98>
     b2e:	8b 32       	cpi	r24, 0x2B	; 43
     b30:	79 f0       	breq	.+30     	; 0xb50 <vfprintf+0x84>
     b32:	38 f4       	brcc	.+14     	; 0xb42 <vfprintf+0x76>
     b34:	80 32       	cpi	r24, 0x20	; 32
     b36:	79 f0       	breq	.+30     	; 0xb56 <vfprintf+0x8a>
     b38:	83 32       	cpi	r24, 0x23	; 35
     b3a:	a1 f4       	brne	.+40     	; 0xb64 <vfprintf+0x98>
     b3c:	23 2d       	mov	r18, r3
     b3e:	20 61       	ori	r18, 0x10	; 16
     b40:	1d c0       	rjmp	.+58     	; 0xb7c <vfprintf+0xb0>
     b42:	8d 32       	cpi	r24, 0x2D	; 45
     b44:	61 f0       	breq	.+24     	; 0xb5e <vfprintf+0x92>
     b46:	80 33       	cpi	r24, 0x30	; 48
     b48:	69 f4       	brne	.+26     	; 0xb64 <vfprintf+0x98>
     b4a:	23 2d       	mov	r18, r3
     b4c:	21 60       	ori	r18, 0x01	; 1
     b4e:	16 c0       	rjmp	.+44     	; 0xb7c <vfprintf+0xb0>
     b50:	83 2d       	mov	r24, r3
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	38 2e       	mov	r3, r24
     b56:	e3 2d       	mov	r30, r3
     b58:	e4 60       	ori	r30, 0x04	; 4
     b5a:	3e 2e       	mov	r3, r30
     b5c:	2a c0       	rjmp	.+84     	; 0xbb2 <vfprintf+0xe6>
     b5e:	f3 2d       	mov	r31, r3
     b60:	f8 60       	ori	r31, 0x08	; 8
     b62:	1d c0       	rjmp	.+58     	; 0xb9e <vfprintf+0xd2>
     b64:	37 fc       	sbrc	r3, 7
     b66:	2d c0       	rjmp	.+90     	; 0xbc2 <vfprintf+0xf6>
     b68:	20 ed       	ldi	r18, 0xD0	; 208
     b6a:	28 0f       	add	r18, r24
     b6c:	2a 30       	cpi	r18, 0x0A	; 10
     b6e:	40 f0       	brcs	.+16     	; 0xb80 <vfprintf+0xb4>
     b70:	8e 32       	cpi	r24, 0x2E	; 46
     b72:	b9 f4       	brne	.+46     	; 0xba2 <vfprintf+0xd6>
     b74:	36 fc       	sbrc	r3, 6
     b76:	81 c1       	rjmp	.+770    	; 0xe7a <vfprintf+0x3ae>
     b78:	23 2d       	mov	r18, r3
     b7a:	20 64       	ori	r18, 0x40	; 64
     b7c:	32 2e       	mov	r3, r18
     b7e:	19 c0       	rjmp	.+50     	; 0xbb2 <vfprintf+0xe6>
     b80:	36 fe       	sbrs	r3, 6
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <vfprintf+0xc4>
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	98 9e       	mul	r9, r24
     b88:	20 0d       	add	r18, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	92 2e       	mov	r9, r18
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <vfprintf+0xe6>
     b90:	ea e0       	ldi	r30, 0x0A	; 10
     b92:	2e 9e       	mul	r2, r30
     b94:	20 0d       	add	r18, r0
     b96:	11 24       	eor	r1, r1
     b98:	22 2e       	mov	r2, r18
     b9a:	f3 2d       	mov	r31, r3
     b9c:	f0 62       	ori	r31, 0x20	; 32
     b9e:	3f 2e       	mov	r3, r31
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <vfprintf+0xe6>
     ba2:	8c 36       	cpi	r24, 0x6C	; 108
     ba4:	21 f4       	brne	.+8      	; 0xbae <vfprintf+0xe2>
     ba6:	83 2d       	mov	r24, r3
     ba8:	80 68       	ori	r24, 0x80	; 128
     baa:	38 2e       	mov	r3, r24
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0xe6>
     bae:	88 36       	cpi	r24, 0x68	; 104
     bb0:	41 f4       	brne	.+16     	; 0xbc2 <vfprintf+0xf6>
     bb2:	f7 01       	movw	r30, r14
     bb4:	93 fd       	sbrc	r25, 3
     bb6:	85 91       	lpm	r24, Z+
     bb8:	93 ff       	sbrs	r25, 3
     bba:	81 91       	ld	r24, Z+
     bbc:	7f 01       	movw	r14, r30
     bbe:	81 11       	cpse	r24, r1
     bc0:	b3 cf       	rjmp	.-154    	; 0xb28 <vfprintf+0x5c>
     bc2:	98 2f       	mov	r25, r24
     bc4:	9f 7d       	andi	r25, 0xDF	; 223
     bc6:	95 54       	subi	r25, 0x45	; 69
     bc8:	93 30       	cpi	r25, 0x03	; 3
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <vfprintf+0x10a>
     bcc:	0c 5f       	subi	r16, 0xFC	; 252
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	9f e3       	ldi	r25, 0x3F	; 63
     bd2:	99 83       	std	Y+1, r25	; 0x01
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <vfprintf+0x124>
     bd6:	83 36       	cpi	r24, 0x63	; 99
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <vfprintf+0x11a>
     bda:	83 37       	cpi	r24, 0x73	; 115
     bdc:	71 f0       	breq	.+28     	; 0xbfa <vfprintf+0x12e>
     bde:	83 35       	cpi	r24, 0x53	; 83
     be0:	09 f0       	breq	.+2      	; 0xbe4 <vfprintf+0x118>
     be2:	59 c0       	rjmp	.+178    	; 0xc96 <vfprintf+0x1ca>
     be4:	21 c0       	rjmp	.+66     	; 0xc28 <vfprintf+0x15c>
     be6:	f8 01       	movw	r30, r16
     be8:	80 81       	ld	r24, Z
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	0e 5f       	subi	r16, 0xFE	; 254
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	88 24       	eor	r8, r8
     bf2:	83 94       	inc	r8
     bf4:	91 2c       	mov	r9, r1
     bf6:	53 01       	movw	r10, r6
     bf8:	13 c0       	rjmp	.+38     	; 0xc20 <vfprintf+0x154>
     bfa:	28 01       	movw	r4, r16
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	4f 0e       	add	r4, r31
     c00:	51 1c       	adc	r5, r1
     c02:	f8 01       	movw	r30, r16
     c04:	a0 80       	ld	r10, Z
     c06:	b1 80       	ldd	r11, Z+1	; 0x01
     c08:	36 fe       	sbrs	r3, 6
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <vfprintf+0x146>
     c0c:	69 2d       	mov	r22, r9
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0x14a>
     c12:	6f ef       	ldi	r22, 0xFF	; 255
     c14:	7f ef       	ldi	r23, 0xFF	; 255
     c16:	c5 01       	movw	r24, r10
     c18:	0e 94 96 08 	call	0x112c	; 0x112c <strnlen>
     c1c:	4c 01       	movw	r8, r24
     c1e:	82 01       	movw	r16, r4
     c20:	f3 2d       	mov	r31, r3
     c22:	ff 77       	andi	r31, 0x7F	; 127
     c24:	3f 2e       	mov	r3, r31
     c26:	16 c0       	rjmp	.+44     	; 0xc54 <vfprintf+0x188>
     c28:	28 01       	movw	r4, r16
     c2a:	22 e0       	ldi	r18, 0x02	; 2
     c2c:	42 0e       	add	r4, r18
     c2e:	51 1c       	adc	r5, r1
     c30:	f8 01       	movw	r30, r16
     c32:	a0 80       	ld	r10, Z
     c34:	b1 80       	ldd	r11, Z+1	; 0x01
     c36:	36 fe       	sbrs	r3, 6
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <vfprintf+0x174>
     c3a:	69 2d       	mov	r22, r9
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <vfprintf+0x178>
     c40:	6f ef       	ldi	r22, 0xFF	; 255
     c42:	7f ef       	ldi	r23, 0xFF	; 255
     c44:	c5 01       	movw	r24, r10
     c46:	0e 94 84 08 	call	0x1108	; 0x1108 <strnlen_P>
     c4a:	4c 01       	movw	r8, r24
     c4c:	f3 2d       	mov	r31, r3
     c4e:	f0 68       	ori	r31, 0x80	; 128
     c50:	3f 2e       	mov	r3, r31
     c52:	82 01       	movw	r16, r4
     c54:	33 fc       	sbrc	r3, 3
     c56:	1b c0       	rjmp	.+54     	; 0xc8e <vfprintf+0x1c2>
     c58:	82 2d       	mov	r24, r2
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 16       	cp	r8, r24
     c5e:	99 06       	cpc	r9, r25
     c60:	b0 f4       	brcc	.+44     	; 0xc8e <vfprintf+0x1c2>
     c62:	b6 01       	movw	r22, r12
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     c6c:	2a 94       	dec	r2
     c6e:	f4 cf       	rjmp	.-24     	; 0xc58 <vfprintf+0x18c>
     c70:	f5 01       	movw	r30, r10
     c72:	37 fc       	sbrc	r3, 7
     c74:	85 91       	lpm	r24, Z+
     c76:	37 fe       	sbrs	r3, 7
     c78:	81 91       	ld	r24, Z+
     c7a:	5f 01       	movw	r10, r30
     c7c:	b6 01       	movw	r22, r12
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     c84:	21 10       	cpse	r2, r1
     c86:	2a 94       	dec	r2
     c88:	21 e0       	ldi	r18, 0x01	; 1
     c8a:	82 1a       	sub	r8, r18
     c8c:	91 08       	sbc	r9, r1
     c8e:	81 14       	cp	r8, r1
     c90:	91 04       	cpc	r9, r1
     c92:	71 f7       	brne	.-36     	; 0xc70 <vfprintf+0x1a4>
     c94:	e8 c0       	rjmp	.+464    	; 0xe66 <vfprintf+0x39a>
     c96:	84 36       	cpi	r24, 0x64	; 100
     c98:	11 f0       	breq	.+4      	; 0xc9e <vfprintf+0x1d2>
     c9a:	89 36       	cpi	r24, 0x69	; 105
     c9c:	41 f5       	brne	.+80     	; 0xcee <vfprintf+0x222>
     c9e:	f8 01       	movw	r30, r16
     ca0:	37 fe       	sbrs	r3, 7
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <vfprintf+0x1e6>
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	0c 5f       	subi	r16, 0xFC	; 252
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	08 c0       	rjmp	.+16     	; 0xcc2 <vfprintf+0x1f6>
     cb2:	60 81       	ld	r22, Z
     cb4:	71 81       	ldd	r23, Z+1	; 0x01
     cb6:	07 2e       	mov	r0, r23
     cb8:	00 0c       	add	r0, r0
     cba:	88 0b       	sbc	r24, r24
     cbc:	99 0b       	sbc	r25, r25
     cbe:	0e 5f       	subi	r16, 0xFE	; 254
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	f3 2d       	mov	r31, r3
     cc4:	ff 76       	andi	r31, 0x6F	; 111
     cc6:	3f 2e       	mov	r3, r31
     cc8:	97 ff       	sbrs	r25, 7
     cca:	09 c0       	rjmp	.+18     	; 0xcde <vfprintf+0x212>
     ccc:	90 95       	com	r25
     cce:	80 95       	com	r24
     cd0:	70 95       	com	r23
     cd2:	61 95       	neg	r22
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	8f 4f       	sbci	r24, 0xFF	; 255
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	f0 68       	ori	r31, 0x80	; 128
     cdc:	3f 2e       	mov	r3, r31
     cde:	2a e0       	ldi	r18, 0x0A	; 10
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	a3 01       	movw	r20, r6
     ce4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__ultoa_invert>
     ce8:	88 2e       	mov	r8, r24
     cea:	86 18       	sub	r8, r6
     cec:	45 c0       	rjmp	.+138    	; 0xd78 <vfprintf+0x2ac>
     cee:	85 37       	cpi	r24, 0x75	; 117
     cf0:	31 f4       	brne	.+12     	; 0xcfe <vfprintf+0x232>
     cf2:	23 2d       	mov	r18, r3
     cf4:	2f 7e       	andi	r18, 0xEF	; 239
     cf6:	b2 2e       	mov	r11, r18
     cf8:	2a e0       	ldi	r18, 0x0A	; 10
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	25 c0       	rjmp	.+74     	; 0xd48 <vfprintf+0x27c>
     cfe:	93 2d       	mov	r25, r3
     d00:	99 7f       	andi	r25, 0xF9	; 249
     d02:	b9 2e       	mov	r11, r25
     d04:	8f 36       	cpi	r24, 0x6F	; 111
     d06:	c1 f0       	breq	.+48     	; 0xd38 <vfprintf+0x26c>
     d08:	18 f4       	brcc	.+6      	; 0xd10 <vfprintf+0x244>
     d0a:	88 35       	cpi	r24, 0x58	; 88
     d0c:	79 f0       	breq	.+30     	; 0xd2c <vfprintf+0x260>
     d0e:	b5 c0       	rjmp	.+362    	; 0xe7a <vfprintf+0x3ae>
     d10:	80 37       	cpi	r24, 0x70	; 112
     d12:	19 f0       	breq	.+6      	; 0xd1a <vfprintf+0x24e>
     d14:	88 37       	cpi	r24, 0x78	; 120
     d16:	21 f0       	breq	.+8      	; 0xd20 <vfprintf+0x254>
     d18:	b0 c0       	rjmp	.+352    	; 0xe7a <vfprintf+0x3ae>
     d1a:	e9 2f       	mov	r30, r25
     d1c:	e0 61       	ori	r30, 0x10	; 16
     d1e:	be 2e       	mov	r11, r30
     d20:	b4 fe       	sbrs	r11, 4
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <vfprintf+0x272>
     d24:	fb 2d       	mov	r31, r11
     d26:	f4 60       	ori	r31, 0x04	; 4
     d28:	bf 2e       	mov	r11, r31
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <vfprintf+0x272>
     d2c:	34 fe       	sbrs	r3, 4
     d2e:	0a c0       	rjmp	.+20     	; 0xd44 <vfprintf+0x278>
     d30:	29 2f       	mov	r18, r25
     d32:	26 60       	ori	r18, 0x06	; 6
     d34:	b2 2e       	mov	r11, r18
     d36:	06 c0       	rjmp	.+12     	; 0xd44 <vfprintf+0x278>
     d38:	28 e0       	ldi	r18, 0x08	; 8
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <vfprintf+0x27c>
     d3e:	20 e1       	ldi	r18, 0x10	; 16
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <vfprintf+0x27c>
     d44:	20 e1       	ldi	r18, 0x10	; 16
     d46:	32 e0       	ldi	r19, 0x02	; 2
     d48:	f8 01       	movw	r30, r16
     d4a:	b7 fe       	sbrs	r11, 7
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <vfprintf+0x290>
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	0c 5f       	subi	r16, 0xFC	; 252
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <vfprintf+0x29c>
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 5f       	subi	r16, 0xFE	; 254
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	a3 01       	movw	r20, r6
     d6a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__ultoa_invert>
     d6e:	88 2e       	mov	r8, r24
     d70:	86 18       	sub	r8, r6
     d72:	fb 2d       	mov	r31, r11
     d74:	ff 77       	andi	r31, 0x7F	; 127
     d76:	3f 2e       	mov	r3, r31
     d78:	36 fe       	sbrs	r3, 6
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <vfprintf+0x2ca>
     d7c:	23 2d       	mov	r18, r3
     d7e:	2e 7f       	andi	r18, 0xFE	; 254
     d80:	a2 2e       	mov	r10, r18
     d82:	89 14       	cp	r8, r9
     d84:	58 f4       	brcc	.+22     	; 0xd9c <vfprintf+0x2d0>
     d86:	34 fe       	sbrs	r3, 4
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <vfprintf+0x2d4>
     d8a:	32 fc       	sbrc	r3, 2
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <vfprintf+0x2d4>
     d8e:	83 2d       	mov	r24, r3
     d90:	8e 7e       	andi	r24, 0xEE	; 238
     d92:	a8 2e       	mov	r10, r24
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <vfprintf+0x2d4>
     d96:	b8 2c       	mov	r11, r8
     d98:	a3 2c       	mov	r10, r3
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <vfprintf+0x2d6>
     d9c:	b8 2c       	mov	r11, r8
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <vfprintf+0x2d6>
     da0:	b9 2c       	mov	r11, r9
     da2:	a4 fe       	sbrs	r10, 4
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <vfprintf+0x2f8>
     da6:	fe 01       	movw	r30, r28
     da8:	e8 0d       	add	r30, r8
     daa:	f1 1d       	adc	r31, r1
     dac:	80 81       	ld	r24, Z
     dae:	80 33       	cpi	r24, 0x30	; 48
     db0:	21 f4       	brne	.+8      	; 0xdba <vfprintf+0x2ee>
     db2:	9a 2d       	mov	r25, r10
     db4:	99 7e       	andi	r25, 0xE9	; 233
     db6:	a9 2e       	mov	r10, r25
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <vfprintf+0x300>
     dba:	a2 fe       	sbrs	r10, 2
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x2fe>
     dbe:	b3 94       	inc	r11
     dc0:	b3 94       	inc	r11
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <vfprintf+0x300>
     dc4:	8a 2d       	mov	r24, r10
     dc6:	86 78       	andi	r24, 0x86	; 134
     dc8:	09 f0       	breq	.+2      	; 0xdcc <vfprintf+0x300>
     dca:	b3 94       	inc	r11
     dcc:	a3 fc       	sbrc	r10, 3
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <vfprintf+0x326>
     dd0:	a0 fe       	sbrs	r10, 0
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <vfprintf+0x314>
     dd4:	b2 14       	cp	r11, r2
     dd6:	88 f4       	brcc	.+34     	; 0xdfa <vfprintf+0x32e>
     dd8:	28 0c       	add	r2, r8
     dda:	92 2c       	mov	r9, r2
     ddc:	9b 18       	sub	r9, r11
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <vfprintf+0x330>
     de0:	b2 14       	cp	r11, r2
     de2:	60 f4       	brcc	.+24     	; 0xdfc <vfprintf+0x330>
     de4:	b6 01       	movw	r22, r12
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     dee:	b3 94       	inc	r11
     df0:	f7 cf       	rjmp	.-18     	; 0xde0 <vfprintf+0x314>
     df2:	b2 14       	cp	r11, r2
     df4:	18 f4       	brcc	.+6      	; 0xdfc <vfprintf+0x330>
     df6:	2b 18       	sub	r2, r11
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x332>
     dfa:	98 2c       	mov	r9, r8
     dfc:	21 2c       	mov	r2, r1
     dfe:	a4 fe       	sbrs	r10, 4
     e00:	10 c0       	rjmp	.+32     	; 0xe22 <vfprintf+0x356>
     e02:	b6 01       	movw	r22, r12
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     e0c:	a2 fe       	sbrs	r10, 2
     e0e:	17 c0       	rjmp	.+46     	; 0xe3e <vfprintf+0x372>
     e10:	a1 fc       	sbrc	r10, 1
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <vfprintf+0x34e>
     e14:	88 e7       	ldi	r24, 0x78	; 120
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x352>
     e1a:	88 e5       	ldi	r24, 0x58	; 88
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	b6 01       	movw	r22, r12
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <vfprintf+0x36e>
     e22:	8a 2d       	mov	r24, r10
     e24:	86 78       	andi	r24, 0x86	; 134
     e26:	59 f0       	breq	.+22     	; 0xe3e <vfprintf+0x372>
     e28:	a1 fe       	sbrs	r10, 1
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <vfprintf+0x364>
     e2c:	8b e2       	ldi	r24, 0x2B	; 43
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <vfprintf+0x366>
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	a7 fc       	sbrc	r10, 7
     e34:	8d e2       	ldi	r24, 0x2D	; 45
     e36:	b6 01       	movw	r22, r12
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     e3e:	89 14       	cp	r8, r9
     e40:	38 f4       	brcc	.+14     	; 0xe50 <vfprintf+0x384>
     e42:	b6 01       	movw	r22, r12
     e44:	80 e3       	ldi	r24, 0x30	; 48
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     e4c:	9a 94       	dec	r9
     e4e:	f7 cf       	rjmp	.-18     	; 0xe3e <vfprintf+0x372>
     e50:	8a 94       	dec	r8
     e52:	f3 01       	movw	r30, r6
     e54:	e8 0d       	add	r30, r8
     e56:	f1 1d       	adc	r31, r1
     e58:	80 81       	ld	r24, Z
     e5a:	b6 01       	movw	r22, r12
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     e62:	81 10       	cpse	r8, r1
     e64:	f5 cf       	rjmp	.-22     	; 0xe50 <vfprintf+0x384>
     e66:	22 20       	and	r2, r2
     e68:	09 f4       	brne	.+2      	; 0xe6c <vfprintf+0x3a0>
     e6a:	42 ce       	rjmp	.-892    	; 0xaf0 <vfprintf+0x24>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 a1 08 	call	0x1142	; 0x1142 <fputc>
     e76:	2a 94       	dec	r2
     e78:	f6 cf       	rjmp	.-20     	; 0xe66 <vfprintf+0x39a>
     e7a:	f6 01       	movw	r30, r12
     e7c:	86 81       	ldd	r24, Z+6	; 0x06
     e7e:	97 81       	ldd	r25, Z+7	; 0x07
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0x3ba>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	9f ef       	ldi	r25, 0xFF	; 255
     e86:	2b 96       	adiw	r28, 0x0b	; 11
     e88:	e2 e1       	ldi	r30, 0x12	; 18
     e8a:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__epilogue_restores__>

00000e8e <calloc>:
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	86 9f       	mul	r24, r22
     e98:	80 01       	movw	r16, r0
     e9a:	87 9f       	mul	r24, r23
     e9c:	10 0d       	add	r17, r0
     e9e:	96 9f       	mul	r25, r22
     ea0:	10 0d       	add	r17, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 63 07 	call	0xec6	; 0xec6 <malloc>
     eaa:	ec 01       	movw	r28, r24
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	29 f0       	breq	.+10     	; 0xeba <calloc+0x2c>
     eb0:	a8 01       	movw	r20, r16
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 8f 08 	call	0x111e	; 0x111e <memset>
     eba:	ce 01       	movw	r24, r28
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret

00000ec6 <malloc>:
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	91 05       	cpc	r25, r1
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <malloc+0x12>
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <__flp>
     edc:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <__flp+0x1>
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	30 97       	sbiw	r30, 0x00	; 0
     eea:	19 f1       	breq	.+70     	; 0xf32 <malloc+0x6c>
     eec:	40 81       	ld	r20, Z
     eee:	51 81       	ldd	r21, Z+1	; 0x01
     ef0:	02 81       	ldd	r16, Z+2	; 0x02
     ef2:	13 81       	ldd	r17, Z+3	; 0x03
     ef4:	48 17       	cp	r20, r24
     ef6:	59 07       	cpc	r21, r25
     ef8:	c8 f0       	brcs	.+50     	; 0xf2c <malloc+0x66>
     efa:	84 17       	cp	r24, r20
     efc:	95 07       	cpc	r25, r21
     efe:	69 f4       	brne	.+26     	; 0xf1a <malloc+0x54>
     f00:	10 97       	sbiw	r26, 0x00	; 0
     f02:	31 f0       	breq	.+12     	; 0xf10 <malloc+0x4a>
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	0c 93       	st	X, r16
     f08:	12 97       	sbiw	r26, 0x02	; 2
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	1c 93       	st	X, r17
     f0e:	27 c0       	rjmp	.+78     	; 0xf5e <malloc+0x98>
     f10:	00 93 da 01 	sts	0x01DA, r16	; 0x8001da <__flp>
     f14:	10 93 db 01 	sts	0x01DB, r17	; 0x8001db <__flp+0x1>
     f18:	22 c0       	rjmp	.+68     	; 0xf5e <malloc+0x98>
     f1a:	21 15       	cp	r18, r1
     f1c:	31 05       	cpc	r19, r1
     f1e:	19 f0       	breq	.+6      	; 0xf26 <malloc+0x60>
     f20:	42 17       	cp	r20, r18
     f22:	53 07       	cpc	r21, r19
     f24:	18 f4       	brcc	.+6      	; 0xf2c <malloc+0x66>
     f26:	9a 01       	movw	r18, r20
     f28:	bd 01       	movw	r22, r26
     f2a:	ef 01       	movw	r28, r30
     f2c:	df 01       	movw	r26, r30
     f2e:	f8 01       	movw	r30, r16
     f30:	db cf       	rjmp	.-74     	; 0xee8 <malloc+0x22>
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	f9 f0       	breq	.+62     	; 0xf76 <malloc+0xb0>
     f38:	28 1b       	sub	r18, r24
     f3a:	39 0b       	sbc	r19, r25
     f3c:	24 30       	cpi	r18, 0x04	; 4
     f3e:	31 05       	cpc	r19, r1
     f40:	80 f4       	brcc	.+32     	; 0xf62 <malloc+0x9c>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	61 15       	cp	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	21 f0       	breq	.+8      	; 0xf54 <malloc+0x8e>
     f4c:	fb 01       	movw	r30, r22
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	82 83       	std	Z+2, r24	; 0x02
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <malloc+0x96>
     f54:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__flp+0x1>
     f58:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__flp>
     f5c:	fe 01       	movw	r30, r28
     f5e:	32 96       	adiw	r30, 0x02	; 2
     f60:	44 c0       	rjmp	.+136    	; 0xfea <malloc+0x124>
     f62:	fe 01       	movw	r30, r28
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	81 93       	st	Z+, r24
     f6a:	91 93       	st	Z+, r25
     f6c:	22 50       	subi	r18, 0x02	; 2
     f6e:	31 09       	sbc	r19, r1
     f70:	39 83       	std	Y+1, r19	; 0x01
     f72:	28 83       	st	Y, r18
     f74:	3a c0       	rjmp	.+116    	; 0xfea <malloc+0x124>
     f76:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__brkval>
     f7a:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__brkval+0x1>
     f7e:	23 2b       	or	r18, r19
     f80:	41 f4       	brne	.+16     	; 0xf92 <malloc+0xcc>
     f82:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f86:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f8a:	30 93 d9 01 	sts	0x01D9, r19	; 0x8001d9 <__brkval+0x1>
     f8e:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <__brkval>
     f92:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f96:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f9a:	21 15       	cp	r18, r1
     f9c:	31 05       	cpc	r19, r1
     f9e:	41 f4       	brne	.+16     	; 0xfb0 <malloc+0xea>
     fa0:	2d b7       	in	r18, 0x3d	; 61
     fa2:	3e b7       	in	r19, 0x3e	; 62
     fa4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     fa8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     fac:	24 1b       	sub	r18, r20
     fae:	35 0b       	sbc	r19, r21
     fb0:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <__brkval>
     fb4:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <__brkval+0x1>
     fb8:	e2 17       	cp	r30, r18
     fba:	f3 07       	cpc	r31, r19
     fbc:	a0 f4       	brcc	.+40     	; 0xfe6 <malloc+0x120>
     fbe:	2e 1b       	sub	r18, r30
     fc0:	3f 0b       	sbc	r19, r31
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	78 f0       	brcs	.+30     	; 0xfe6 <malloc+0x120>
     fc8:	ac 01       	movw	r20, r24
     fca:	4e 5f       	subi	r20, 0xFE	; 254
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	24 17       	cp	r18, r20
     fd0:	35 07       	cpc	r19, r21
     fd2:	48 f0       	brcs	.+18     	; 0xfe6 <malloc+0x120>
     fd4:	4e 0f       	add	r20, r30
     fd6:	5f 1f       	adc	r21, r31
     fd8:	50 93 d9 01 	sts	0x01D9, r21	; 0x8001d9 <__brkval+0x1>
     fdc:	40 93 d8 01 	sts	0x01D8, r20	; 0x8001d8 <__brkval>
     fe0:	81 93       	st	Z+, r24
     fe2:	91 93       	st	Z+, r25
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <malloc+0x124>
     fe6:	e0 e0       	ldi	r30, 0x00	; 0
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	cf 01       	movw	r24, r30
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	08 95       	ret

00000ff6 <free>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	09 f4       	brne	.+2      	; 0x1000 <free+0xa>
     ffe:	81 c0       	rjmp	.+258    	; 0x1102 <free+0x10c>
    1000:	fc 01       	movw	r30, r24
    1002:	32 97       	sbiw	r30, 0x02	; 2
    1004:	13 82       	std	Z+3, r1	; 0x03
    1006:	12 82       	std	Z+2, r1	; 0x02
    1008:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <__flp>
    100c:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <__flp+0x1>
    1010:	10 97       	sbiw	r26, 0x00	; 0
    1012:	81 f4       	brne	.+32     	; 0x1034 <free+0x3e>
    1014:	20 81       	ld	r18, Z
    1016:	31 81       	ldd	r19, Z+1	; 0x01
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__brkval>
    1020:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__brkval+0x1>
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	51 f5       	brne	.+84     	; 0x107e <free+0x88>
    102a:	f0 93 d9 01 	sts	0x01D9, r31	; 0x8001d9 <__brkval+0x1>
    102e:	e0 93 d8 01 	sts	0x01D8, r30	; 0x8001d8 <__brkval>
    1032:	67 c0       	rjmp	.+206    	; 0x1102 <free+0x10c>
    1034:	ed 01       	movw	r28, r26
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	ce 17       	cp	r28, r30
    103c:	df 07       	cpc	r29, r31
    103e:	40 f4       	brcc	.+16     	; 0x1050 <free+0x5a>
    1040:	4a 81       	ldd	r20, Y+2	; 0x02
    1042:	5b 81       	ldd	r21, Y+3	; 0x03
    1044:	9e 01       	movw	r18, r28
    1046:	41 15       	cp	r20, r1
    1048:	51 05       	cpc	r21, r1
    104a:	f1 f0       	breq	.+60     	; 0x1088 <free+0x92>
    104c:	ea 01       	movw	r28, r20
    104e:	f5 cf       	rjmp	.-22     	; 0x103a <free+0x44>
    1050:	d3 83       	std	Z+3, r29	; 0x03
    1052:	c2 83       	std	Z+2, r28	; 0x02
    1054:	40 81       	ld	r20, Z
    1056:	51 81       	ldd	r21, Z+1	; 0x01
    1058:	84 0f       	add	r24, r20
    105a:	95 1f       	adc	r25, r21
    105c:	c8 17       	cp	r28, r24
    105e:	d9 07       	cpc	r29, r25
    1060:	59 f4       	brne	.+22     	; 0x1078 <free+0x82>
    1062:	88 81       	ld	r24, Y
    1064:	99 81       	ldd	r25, Y+1	; 0x01
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	82 83       	std	Z+2, r24	; 0x02
    1078:	21 15       	cp	r18, r1
    107a:	31 05       	cpc	r19, r1
    107c:	29 f4       	brne	.+10     	; 0x1088 <free+0x92>
    107e:	f0 93 db 01 	sts	0x01DB, r31	; 0x8001db <__flp+0x1>
    1082:	e0 93 da 01 	sts	0x01DA, r30	; 0x8001da <__flp>
    1086:	3d c0       	rjmp	.+122    	; 0x1102 <free+0x10c>
    1088:	e9 01       	movw	r28, r18
    108a:	fb 83       	std	Y+3, r31	; 0x03
    108c:	ea 83       	std	Y+2, r30	; 0x02
    108e:	49 91       	ld	r20, Y+
    1090:	59 91       	ld	r21, Y+
    1092:	c4 0f       	add	r28, r20
    1094:	d5 1f       	adc	r29, r21
    1096:	ec 17       	cp	r30, r28
    1098:	fd 07       	cpc	r31, r29
    109a:	61 f4       	brne	.+24     	; 0x10b4 <free+0xbe>
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	84 0f       	add	r24, r20
    10a2:	95 1f       	adc	r25, r21
    10a4:	02 96       	adiw	r24, 0x02	; 2
    10a6:	e9 01       	movw	r28, r18
    10a8:	99 83       	std	Y+1, r25	; 0x01
    10aa:	88 83       	st	Y, r24
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	e0 e0       	ldi	r30, 0x00	; 0
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	13 97       	sbiw	r26, 0x03	; 3
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	19 f0       	breq	.+6      	; 0x10ca <free+0xd4>
    10c4:	fd 01       	movw	r30, r26
    10c6:	dc 01       	movw	r26, r24
    10c8:	f7 cf       	rjmp	.-18     	; 0x10b8 <free+0xc2>
    10ca:	8d 91       	ld	r24, X+
    10cc:	9c 91       	ld	r25, X
    10ce:	11 97       	sbiw	r26, 0x01	; 1
    10d0:	9d 01       	movw	r18, r26
    10d2:	2e 5f       	subi	r18, 0xFE	; 254
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	82 0f       	add	r24, r18
    10d8:	93 1f       	adc	r25, r19
    10da:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__brkval>
    10de:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__brkval+0x1>
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	69 f4       	brne	.+26     	; 0x1102 <free+0x10c>
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <free+0x100>
    10ec:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <__flp+0x1>
    10f0:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__flp>
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <free+0x104>
    10f6:	13 82       	std	Z+3, r1	; 0x03
    10f8:	12 82       	std	Z+2, r1	; 0x02
    10fa:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <__brkval+0x1>
    10fe:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <__brkval>
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <strnlen_P>:
    1108:	fc 01       	movw	r30, r24
    110a:	05 90       	lpm	r0, Z+
    110c:	61 50       	subi	r22, 0x01	; 1
    110e:	70 40       	sbci	r23, 0x00	; 0
    1110:	01 10       	cpse	r0, r1
    1112:	d8 f7       	brcc	.-10     	; 0x110a <strnlen_P+0x2>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	8e 0f       	add	r24, r30
    111a:	9f 1f       	adc	r25, r31
    111c:	08 95       	ret

0000111e <memset>:
    111e:	dc 01       	movw	r26, r24
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <memset+0x6>
    1122:	6d 93       	st	X+, r22
    1124:	41 50       	subi	r20, 0x01	; 1
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	e0 f7       	brcc	.-8      	; 0x1122 <memset+0x4>
    112a:	08 95       	ret

0000112c <strnlen>:
    112c:	fc 01       	movw	r30, r24
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	70 40       	sbci	r23, 0x00	; 0
    1132:	01 90       	ld	r0, Z+
    1134:	01 10       	cpse	r0, r1
    1136:	d8 f7       	brcc	.-10     	; 0x112e <strnlen+0x2>
    1138:	80 95       	com	r24
    113a:	90 95       	com	r25
    113c:	8e 0f       	add	r24, r30
    113e:	9f 1f       	adc	r25, r31
    1140:	08 95       	ret

00001142 <fputc>:
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	fb 01       	movw	r30, r22
    114c:	23 81       	ldd	r18, Z+3	; 0x03
    114e:	21 fd       	sbrc	r18, 1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <fputc+0x16>
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	2c c0       	rjmp	.+88     	; 0x11b0 <fputc+0x6e>
    1158:	22 ff       	sbrs	r18, 2
    115a:	16 c0       	rjmp	.+44     	; 0x1188 <fputc+0x46>
    115c:	46 81       	ldd	r20, Z+6	; 0x06
    115e:	57 81       	ldd	r21, Z+7	; 0x07
    1160:	24 81       	ldd	r18, Z+4	; 0x04
    1162:	35 81       	ldd	r19, Z+5	; 0x05
    1164:	42 17       	cp	r20, r18
    1166:	53 07       	cpc	r21, r19
    1168:	44 f4       	brge	.+16     	; 0x117a <fputc+0x38>
    116a:	a0 81       	ld	r26, Z
    116c:	b1 81       	ldd	r27, Z+1	; 0x01
    116e:	9d 01       	movw	r18, r26
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	31 83       	std	Z+1, r19	; 0x01
    1176:	20 83       	st	Z, r18
    1178:	8c 93       	st	X, r24
    117a:	26 81       	ldd	r18, Z+6	; 0x06
    117c:	37 81       	ldd	r19, Z+7	; 0x07
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	37 83       	std	Z+7, r19	; 0x07
    1184:	26 83       	std	Z+6, r18	; 0x06
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <fputc+0x6e>
    1188:	8b 01       	movw	r16, r22
    118a:	ec 01       	movw	r28, r24
    118c:	fb 01       	movw	r30, r22
    118e:	00 84       	ldd	r0, Z+8	; 0x08
    1190:	f1 85       	ldd	r31, Z+9	; 0x09
    1192:	e0 2d       	mov	r30, r0
    1194:	09 95       	icall
    1196:	89 2b       	or	r24, r25
    1198:	e1 f6       	brne	.-72     	; 0x1152 <fputc+0x10>
    119a:	d8 01       	movw	r26, r16
    119c:	16 96       	adiw	r26, 0x06	; 6
    119e:	8d 91       	ld	r24, X+
    11a0:	9c 91       	ld	r25, X
    11a2:	17 97       	sbiw	r26, 0x07	; 7
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	17 96       	adiw	r26, 0x07	; 7
    11a8:	9c 93       	st	X, r25
    11aa:	8e 93       	st	-X, r24
    11ac:	16 97       	sbiw	r26, 0x06	; 6
    11ae:	ce 01       	movw	r24, r28
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <__ultoa_invert>:
    11ba:	fa 01       	movw	r30, r20
    11bc:	aa 27       	eor	r26, r26
    11be:	28 30       	cpi	r18, 0x08	; 8
    11c0:	51 f1       	breq	.+84     	; 0x1216 <__ultoa_invert+0x5c>
    11c2:	20 31       	cpi	r18, 0x10	; 16
    11c4:	81 f1       	breq	.+96     	; 0x1226 <__ultoa_invert+0x6c>
    11c6:	e8 94       	clt
    11c8:	6f 93       	push	r22
    11ca:	6e 7f       	andi	r22, 0xFE	; 254
    11cc:	6e 5f       	subi	r22, 0xFE	; 254
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	af 4f       	sbci	r26, 0xFF	; 255
    11d6:	b1 e0       	ldi	r27, 0x01	; 1
    11d8:	3e d0       	rcall	.+124    	; 0x1256 <__ultoa_invert+0x9c>
    11da:	b4 e0       	ldi	r27, 0x04	; 4
    11dc:	3c d0       	rcall	.+120    	; 0x1256 <__ultoa_invert+0x9c>
    11de:	67 0f       	add	r22, r23
    11e0:	78 1f       	adc	r23, r24
    11e2:	89 1f       	adc	r24, r25
    11e4:	9a 1f       	adc	r25, r26
    11e6:	a1 1d       	adc	r26, r1
    11e8:	68 0f       	add	r22, r24
    11ea:	79 1f       	adc	r23, r25
    11ec:	8a 1f       	adc	r24, r26
    11ee:	91 1d       	adc	r25, r1
    11f0:	a1 1d       	adc	r26, r1
    11f2:	6a 0f       	add	r22, r26
    11f4:	71 1d       	adc	r23, r1
    11f6:	81 1d       	adc	r24, r1
    11f8:	91 1d       	adc	r25, r1
    11fa:	a1 1d       	adc	r26, r1
    11fc:	20 d0       	rcall	.+64     	; 0x123e <__ultoa_invert+0x84>
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__ultoa_invert+0x48>
    1200:	68 94       	set
    1202:	3f 91       	pop	r19
    1204:	2a e0       	ldi	r18, 0x0A	; 10
    1206:	26 9f       	mul	r18, r22
    1208:	11 24       	eor	r1, r1
    120a:	30 19       	sub	r19, r0
    120c:	30 5d       	subi	r19, 0xD0	; 208
    120e:	31 93       	st	Z+, r19
    1210:	de f6       	brtc	.-74     	; 0x11c8 <__ultoa_invert+0xe>
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret
    1216:	46 2f       	mov	r20, r22
    1218:	47 70       	andi	r20, 0x07	; 7
    121a:	40 5d       	subi	r20, 0xD0	; 208
    121c:	41 93       	st	Z+, r20
    121e:	b3 e0       	ldi	r27, 0x03	; 3
    1220:	0f d0       	rcall	.+30     	; 0x1240 <__ultoa_invert+0x86>
    1222:	c9 f7       	brne	.-14     	; 0x1216 <__ultoa_invert+0x5c>
    1224:	f6 cf       	rjmp	.-20     	; 0x1212 <__ultoa_invert+0x58>
    1226:	46 2f       	mov	r20, r22
    1228:	4f 70       	andi	r20, 0x0F	; 15
    122a:	40 5d       	subi	r20, 0xD0	; 208
    122c:	4a 33       	cpi	r20, 0x3A	; 58
    122e:	18 f0       	brcs	.+6      	; 0x1236 <__ultoa_invert+0x7c>
    1230:	49 5d       	subi	r20, 0xD9	; 217
    1232:	31 fd       	sbrc	r19, 1
    1234:	40 52       	subi	r20, 0x20	; 32
    1236:	41 93       	st	Z+, r20
    1238:	02 d0       	rcall	.+4      	; 0x123e <__ultoa_invert+0x84>
    123a:	a9 f7       	brne	.-22     	; 0x1226 <__ultoa_invert+0x6c>
    123c:	ea cf       	rjmp	.-44     	; 0x1212 <__ultoa_invert+0x58>
    123e:	b4 e0       	ldi	r27, 0x04	; 4
    1240:	a6 95       	lsr	r26
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	ba 95       	dec	r27
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__ultoa_invert+0x86>
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 05       	cpc	r22, r1
    1252:	71 05       	cpc	r23, r1
    1254:	08 95       	ret
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	0a 2e       	mov	r0, r26
    125c:	06 94       	lsr	r0
    125e:	57 95       	ror	r21
    1260:	47 95       	ror	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
    1266:	ba 95       	dec	r27
    1268:	c9 f7       	brne	.-14     	; 0x125c <__ultoa_invert+0xa2>
    126a:	62 0f       	add	r22, r18
    126c:	73 1f       	adc	r23, r19
    126e:	84 1f       	adc	r24, r20
    1270:	95 1f       	adc	r25, r21
    1272:	a0 1d       	adc	r26, r0
    1274:	08 95       	ret

00001276 <__prologue_saves__>:
    1276:	2f 92       	push	r2
    1278:	3f 92       	push	r3
    127a:	4f 92       	push	r4
    127c:	5f 92       	push	r5
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	ca 1b       	sub	r28, r26
    12a0:	db 0b       	sbc	r29, r27
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	09 94       	ijmp

000012ae <__epilogue_restores__>:
    12ae:	2a 88       	ldd	r2, Y+18	; 0x12
    12b0:	39 88       	ldd	r3, Y+17	; 0x11
    12b2:	48 88       	ldd	r4, Y+16	; 0x10
    12b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    12bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12be:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c0:	b9 84       	ldd	r11, Y+9	; 0x09
    12c2:	c8 84       	ldd	r12, Y+8	; 0x08
    12c4:	df 80       	ldd	r13, Y+7	; 0x07
    12c6:	ee 80       	ldd	r14, Y+6	; 0x06
    12c8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ca:	0c 81       	ldd	r16, Y+4	; 0x04
    12cc:	1b 81       	ldd	r17, Y+3	; 0x03
    12ce:	aa 81       	ldd	r26, Y+2	; 0x02
    12d0:	b9 81       	ldd	r27, Y+1	; 0x01
    12d2:	ce 0f       	add	r28, r30
    12d4:	d1 1d       	adc	r29, r1
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	ed 01       	movw	r28, r26
    12e2:	08 95       	ret

000012e4 <_exit>:
    12e4:	f8 94       	cli

000012e6 <__stop_program>:
    12e6:	ff cf       	rjmp	.-2      	; 0x12e6 <__stop_program>
