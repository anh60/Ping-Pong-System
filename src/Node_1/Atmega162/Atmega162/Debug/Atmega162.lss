
Atmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a4  008001a4  00000f0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000209a  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe9  00000000  00000000  0000328e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131f  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00005598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000832  00000000  00000000  00005ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000faa  00000000  00000000  0000630a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000072b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ed       	ldi	r30, 0xD4	; 212
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 3a       	cpi	r26, 0xA4	; 164
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 ea       	ldi	r26, 0xA4	; 164
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ae 3a       	cpi	r26, 0xAE	; 174
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  a6:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include <util/delay.h>

#define BASE_ADDRESS_ADC 0x1400;

void adc_init (void){
	MCUCR |= (1 << SRE );  // enable XMEM
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)	
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <can_message_send>:
 *  Author: deaguiar
 */ 

#include "can.h"

void can_message_send(can_message can_msg){
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2b 97       	sbiw	r28, 0x0b	; 11
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	e9 82       	std	Y+1, r14	; 0x01
  da:	fa 82       	std	Y+2, r15	; 0x02
  dc:	0b 83       	std	Y+3, r16	; 0x03
  de:	1c 83       	std	Y+4, r17	; 0x04
  e0:	2d 83       	std	Y+5, r18	; 0x05
  e2:	3e 83       	std	Y+6, r19	; 0x06
  e4:	4f 83       	std	Y+7, r20	; 0x07
  e6:	58 87       	std	Y+8, r21	; 0x08
  e8:	69 87       	std	Y+9, r22	; 0x09
  ea:	7a 87       	std	Y+10, r23	; 0x0a
  ec:	8b 87       	std	Y+11, r24	; 0x0b
	mcp2515_write(TXB0SIDH,can_msg.id >> 3); //ID High
  ee:	09 81       	ldd	r16, Y+1	; 0x01
  f0:	1a 81       	ldd	r17, Y+2	; 0x02
  f2:	b8 01       	movw	r22, r16
  f4:	76 95       	lsr	r23
  f6:	67 95       	ror	r22
  f8:	76 95       	lsr	r23
  fa:	67 95       	ror	r22
  fc:	76 95       	lsr	r23
  fe:	67 95       	ror	r22
 100:	81 e3       	ldi	r24, 0x31	; 49
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
	//printf("HIGH %d ",can_msg.id >> 3);
	mcp2515_write(TXB0SIDL,(can_msg.id & 0b00000111) << 5); //Id Low
 108:	b8 01       	movw	r22, r16
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	62 95       	swap	r22
 110:	72 95       	swap	r23
 112:	70 7f       	andi	r23, 0xF0	; 240
 114:	76 27       	eor	r23, r22
 116:	60 7f       	andi	r22, 0xF0	; 240
 118:	76 27       	eor	r23, r22
 11a:	77 27       	eor	r23, r23
 11c:	82 e3       	ldi	r24, 0x32	; 50
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
	//printf("LOW %d ",(can_msg.id & 0b00000111) << 5);
	mcp2515_write(TXB0DLC,can_msg.data_length); //Data Length
 124:	0b 81       	ldd	r16, Y+3	; 0x03
 126:	60 2f       	mov	r22, r16
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	85 e3       	ldi	r24, 0x35	; 53
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	0e c0       	rjmp	.+28     	; 0x152 <can_message_send+0x96>
			mcp2515_write(TXB0D0+reg,can_msg.data[reg]); //Data
 136:	81 2f       	mov	r24, r17
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	e4 e0       	ldi	r30, 0x04	; 4
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	60 81       	ld	r22, Z
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	c6 96       	adiw	r24, 0x36	; 54
 14c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
	mcp2515_write(TXB0SIDH,can_msg.id >> 3); //ID High
	//printf("HIGH %d ",can_msg.id >> 3);
	mcp2515_write(TXB0SIDL,(can_msg.id & 0b00000111) << 5); //Id Low
	//printf("LOW %d ",(can_msg.id & 0b00000111) << 5);
	mcp2515_write(TXB0DLC,can_msg.data_length); //Data Length
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 150:	1f 5f       	subi	r17, 0xFF	; 255
 152:	10 17       	cp	r17, r16
 154:	80 f3       	brcs	.-32     	; 0x136 <can_message_send+0x7a>
			mcp2515_write(TXB0D0+reg,can_msg.data[reg]); //Data
	}
	mcp2515_request_to_send(0); //Send buffer 	
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 93 01 	call	0x326	; 0x326 <mcp2515_request_to_send>
}
 15e:	2b 96       	adiw	r28, 0x0b	; 11
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <can_message_receive>:

can_message can_message_receive(void){
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	7c 01       	movw	r14, r24
	can_message can_msg;

	uint8_t high = mcp2515_read(RXB0SIDH); //ID High
 186:	81 e6       	ldi	r24, 0x61	; 97
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <mcp2515_read>
	can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
 18e:	99 27       	eor	r25, r25
 190:	ec 01       	movw	r28, r24
 192:	cc 0f       	add	r28, r28
 194:	dd 1f       	adc	r29, r29
 196:	cc 0f       	add	r28, r28
 198:	dd 1f       	adc	r29, r29
 19a:	cc 0f       	add	r28, r28
 19c:	dd 1f       	adc	r29, r29
 19e:	82 e6       	ldi	r24, 0x62	; 98
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <mcp2515_read>
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	87 70       	andi	r24, 0x07	; 7
 1bc:	99 27       	eor	r25, r25
 1be:	8c 2b       	or	r24, r28
 1c0:	9d 2b       	or	r25, r29
 1c2:	f7 01       	movw	r30, r14
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
		
	can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
 1c8:	85 e6       	ldi	r24, 0x65	; 101
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <mcp2515_read>
 1d0:	08 2f       	mov	r16, r24
 1d2:	f7 01       	movw	r30, r14
 1d4:	82 83       	std	Z+2, r24	; 0x02
	
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <can_message_receive+0x78>
		can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
 1da:	c1 2f       	mov	r28, r17
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	ce 01       	movw	r24, r28
 1e0:	8a 59       	subi	r24, 0x9A	; 154
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <mcp2515_read>
 1e8:	ce 0d       	add	r28, r14
 1ea:	df 1d       	adc	r29, r15
 1ec:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t high = mcp2515_read(RXB0SIDH); //ID High
	can_msg.id = (high << 3) | ((mcp2515_read(RXB0SIDL) >> 5) & 0b00000111) ; //ID high + low
		
	can_msg.data_length = mcp2515_read(RXB0DLC); //Data Length
	
	for(uint8_t reg=0; reg<can_msg.data_length; reg++){
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	10 17       	cp	r17, r16
 1f2:	98 f3       	brcs	.-26     	; 0x1da <can_message_receive+0x62>
		can_msg.data[reg] = mcp2515_read(RXB0D0+reg); //Data
	}
	return can_msg;
}
 1f4:	c7 01       	movw	r24, r14
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	08 95       	ret

00000204 <init_buttons>:
int16_t get_slider_l(void){
	return get_slider(0);
}

void init_buttons(void){
	DDRB &= ~(1 << PINB1);
 204:	87 b3       	in	r24, 0x17	; 23
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB2);
 20a:	87 b3       	in	r24, 0x17	; 23
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PINB3);
 210:	87 b3       	in	r24, 0x17	; 23
 212:	87 7f       	andi	r24, 0xF7	; 247
 214:	87 bb       	out	0x17, r24	; 23
 216:	08 95       	ret

00000218 <main>:
#include "MCP2515/mcp2515.h"
#include "CAN/can.h"


int main(void)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	66 97       	sbiw	r28, 0x16	; 22
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61

	USART_Init(MYUBRR); //Initializing UART
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 2b 02 	call	0x456	; 0x456 <USART_Init>
	printf("Initializing...\n\r");
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	0e 94 96 02 	call	0x52c	; 0x52c <printf>
	xmem_init();		//Initializing Memory
 240:	0e 94 3e 02 	call	0x47c	; 0x47c <xmem_init>
	adc_init();			//Initializing ADC
 244:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	init_buttons();		//Init PB buttons
 248:	0e 94 02 01 	call	0x204	; 0x204 <init_buttons>
	OLED_init();		//Init OLED
 24c:	0e 94 c8 01 	call	0x390	; 0x390 <OLED_init>
	//SPI_init();			//Iinit SPI
	mcp2515_init();
 250:	0e 94 af 01 	call	0x35e	; 0x35e <mcp2515_init>
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
		//SRAM_test();	//Testing memory
		//joystick_test();
		//menu_display_switch();

		can_message can_msg;
		can_msg.id = 2;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	e8 2e       	mov	r14, r24
 25c:	8c 87       	std	Y+12, r24	; 0x0c
 25e:	1d 86       	std	Y+13, r1	; 0x0d
		can_msg.data_length = 2;
 260:	8e 87       	std	Y+14, r24	; 0x0e
		can_msg.data[0] = 6;
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	8f 87       	std	Y+15, r24	; 0x0f
		can_msg.data[1] = 7;
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	88 8b       	std	Y+16, r24	; 0x10
		can_message_send(can_msg);
 26a:	f1 2c       	mov	r15, r1
 26c:	02 e0       	ldi	r16, 0x02	; 2
 26e:	16 e0       	ldi	r17, 0x06	; 6
 270:	27 e0       	ldi	r18, 0x07	; 7
 272:	39 89       	ldd	r19, Y+17	; 0x11
 274:	4a 89       	ldd	r20, Y+18	; 0x12
 276:	5b 89       	ldd	r21, Y+19	; 0x13
 278:	6c 89       	ldd	r22, Y+20	; 0x14
 27a:	7d 89       	ldd	r23, Y+21	; 0x15
 27c:	8e 89       	ldd	r24, Y+22	; 0x16
 27e:	0e 94 5e 00 	call	0xbc	; 0xbc <can_message_send>
		can_message can_message_rtr = can_message_receive();
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 bc 00 	call	0x178	; 0x178 <can_message_receive>
		printf("ID=%d, length=%d, data=%d, data2=%d\n\r",can_message_rtr.id, can_message_rtr.data_length, can_message_rtr.data[0],can_message_rtr.data[1]);
 28a:	2d 81       	ldd	r18, Y+5	; 0x05
 28c:	9c 81       	ldd	r25, Y+4	; 0x04
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	1f 92       	push	r1
 292:	2f 93       	push	r18
 294:	1f 92       	push	r1
 296:	9f 93       	push	r25
 298:	1f 92       	push	r1
 29a:	8f 93       	push	r24
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	8f 93       	push	r24
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	8f 93       	push	r24
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	9f 93       	push	r25
 2aa:	8f 93       	push	r24
 2ac:	0e 94 96 02 	call	0x52c	; 0x52c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	2f e9       	ldi	r18, 0x9F	; 159
 2b2:	86 e8       	ldi	r24, 0x86	; 134
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x9e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0xa8>
 2c0:	00 00       	nop
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	c5 cf       	rjmp	.-118    	; 0x258 <main+0x40>

000002ce <mcp2515_reset>:
	PORTB &= ~(1 << PB4); // Select CAN - controller
	SPI_send( MCP_READ_STATUS ); // Send read status instruction
	uint8_t value = SPI_read();
	PORTB |= (1 << PB4 ); // Deselect CAN - controller
	return value;
}
 2ce:	80 ec       	ldi	r24, 0xC0	; 192
 2d0:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 2d4:	08 95       	ret

000002d6 <mcp2515_read>:
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
 2da:	88 b3       	in	r24, 0x18	; 24
 2dc:	8f 7e       	andi	r24, 0xEF	; 239
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 2e6:	8c 2f       	mov	r24, r28
 2e8:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 2ec:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_read>
 2f0:	98 b3       	in	r25, 0x18	; 24
 2f2:	90 61       	ori	r25, 0x10	; 16
 2f4:	98 bb       	out	0x18, r25	; 24
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <mcp2515_write>:
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	d8 2f       	mov	r29, r24
 300:	c6 2f       	mov	r28, r22
 302:	88 b3       	in	r24, 0x18	; 24
 304:	8f 7e       	andi	r24, 0xEF	; 239
 306:	88 bb       	out	0x18, r24	; 24
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 30e:	8d 2f       	mov	r24, r29
 310:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	88 bb       	out	0x18, r24	; 24
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <mcp2515_request_to_send>:
 326:	98 b3       	in	r25, 0x18	; 24
 328:	9f 7e       	andi	r25, 0xEF	; 239
 32a:	98 bb       	out	0x18, r25	; 24
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	41 f0       	breq	.+16     	; 0x340 <mcp2515_request_to_send+0x1a>
 330:	18 f0       	brcs	.+6      	; 0x338 <mcp2515_request_to_send+0x12>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	49 f0       	breq	.+18     	; 0x348 <mcp2515_request_to_send+0x22>
 336:	0c c0       	rjmp	.+24     	; 0x350 <mcp2515_request_to_send+0x2a>
 338:	81 e8       	ldi	r24, 0x81	; 129
 33a:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 33e:	0b c0       	rjmp	.+22     	; 0x356 <mcp2515_request_to_send+0x30>
 340:	82 e8       	ldi	r24, 0x82	; 130
 342:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 346:	07 c0       	rjmp	.+14     	; 0x356 <mcp2515_request_to_send+0x30>
 348:	84 e8       	ldi	r24, 0x84	; 132
 34a:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 34e:	03 c0       	rjmp	.+6      	; 0x356 <mcp2515_request_to_send+0x30>
 350:	87 e8       	ldi	r24, 0x87	; 135
 352:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
 356:	88 b3       	in	r24, 0x18	; 24
 358:	80 61       	ori	r24, 0x10	; 16
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	08 95       	ret

0000035e <mcp2515_init>:


uint8_t mcp2515_init (void){
	uint8_t value, ctrlreg ;
	SPI_init() ; // Initialize SPI
 35e:	0e 94 13 02 	call	0x426	; 0x426 <SPI_init>
	mcp2515_reset() ; // Send reset - command
 362:	0e 94 67 01 	call	0x2ce	; 0x2ce <mcp2515_reset>
	// Self - test
	value = mcp2515_read (MCP_CANSTAT);
 366:	8e e0       	ldi	r24, 0x0E	; 14
 368:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <mcp2515_read>
	if (( value & MODE_MASK ) != MODE_CONFIG ) {
 36c:	80 7e       	andi	r24, 0xE0	; 224
 36e:	80 38       	cpi	r24, 0x80	; 128
 370:	31 f0       	breq	.+12     	; 0x37e <mcp2515_init+0x20>
		printf (" MCP2515 is NOT in configuration mode after reset !\n");
 372:	8e e3       	ldi	r24, 0x3E	; 62
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 ac 02 	call	0x558	; 0x558 <puts>
		return 1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
	}
	// More initialization
	mcp2515_write(MCP_CANCTRL,0b01000000); //Set to loopback mode
 37e:	60 e4       	ldi	r22, 0x40	; 64
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	0e 94 7d 01 	call	0x2fa	; 0x2fa <mcp2515_write>
	
	return 0;
 386:	80 e0       	ldi	r24, 0x00	; 0
}
 388:	08 95       	ret

0000038a <OLED_write_cmd>:
	OLED_CMD[0x0000] = cmd;
}

void OLED_write_data(uint8_t msg){
	volatile char *data = (char *) BASE_ADDRESS_OLED_DATA;
	data[0x0000] = msg;
 38a:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe52>
 38e:	08 95       	ret

00000390 <OLED_init>:
}

void OLED_init(void){
	 printf("Initializing OLED\n\r");
 390:	82 e7       	ldi	r24, 0x72	; 114
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	9f 93       	push	r25
 396:	8f 93       	push	r24
 398:	0e 94 96 02 	call	0x52c	; 0x52c <printf>
	 OLED_write_cmd(0xae); //display off
 39c:	8e ea       	ldi	r24, 0xAE	; 174
 39e:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xa1); //segment remap
 3a2:	81 ea       	ldi	r24, 0xA1	; 161
 3a4:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xda); //common pads hardware: alternative
 3a8:	8a ed       	ldi	r24, 0xDA	; 218
 3aa:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x12);
 3ae:	82 e1       	ldi	r24, 0x12	; 18
 3b0:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xc8); //common output scan direction:com63~com0
 3b4:	88 ec       	ldi	r24, 0xC8	; 200
 3b6:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xa8); //multiplex ration mode:63
 3ba:	88 ea       	ldi	r24, 0xA8	; 168
 3bc:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x3f);
 3c0:	8f e3       	ldi	r24, 0x3F	; 63
 3c2:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xd5); //display divide ratio/osc. freq. mode
 3c6:	85 ed       	ldi	r24, 0xD5	; 213
 3c8:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x80);
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x81); //contrast control
 3d2:	81 e8       	ldi	r24, 0x81	; 129
 3d4:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x50);
 3d8:	80 e5       	ldi	r24, 0x50	; 80
 3da:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xd9); //set pre-charge period
 3de:	89 ed       	ldi	r24, 0xD9	; 217
 3e0:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x21); //Set Column Address
 3e4:	81 e2       	ldi	r24, 0x21	; 33
 3e6:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x20); //Set Memory Addressing Mode
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x02);
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xdb); //VCOM deselect level mode
 3f6:	8b ed       	ldi	r24, 0xDB	; 219
 3f8:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x30);
 3fc:	80 e3       	ldi	r24, 0x30	; 48
 3fe:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xad); //master configuration
 402:	8d ea       	ldi	r24, 0xAD	; 173
 404:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0x00);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xa4); //out follows RAM content
 40e:	84 ea       	ldi	r24, 0xA4	; 164
 410:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xa6); //set normal display
 414:	86 ea       	ldi	r24, 0xA6	; 166
 416:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
	 OLED_write_cmd(0xaf); //display on
 41a:	8f ea       	ldi	r24, 0xAF	; 175
 41c:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_write_cmd>
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	08 95       	ret

00000426 <SPI_init>:
#include "spi.h"

/* Init procedure. Partially taken from datasheet */
void SPI_init(void){
	/* Set SSn, MOSI and SCK as output, all others input */
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
 426:	80 eb       	ldi	r24, 0xB0	; 176
 428:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 42a:	81 e5       	ldi	r24, 0x51	; 81
 42c:	8d b9       	out	0x0d, r24	; 13
	/* Set SPI Mode = 0 (CPOL=0, CPHA=0) */
	SPCR &= ~(1<<CPOL)| ~(1<<CPHA);
 42e:	8d b1       	in	r24, 0x0d	; 13
 430:	8d b9       	out	0x0d, r24	; 13
 432:	08 95       	ret

00000434 <SPI_send>:
}

void SPI_send(uint8_t data){
	/* Transmission starts when writing to SPDR register */
	SPDR = data;
 434:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <SPI_send+0x2>
	;
}
 43a:	08 95       	ret

0000043c <SPI_read>:

uint8_t SPI_read(void){
	SPI_send(0xAA); //Send dummy data
 43c:	8a ea       	ldi	r24, 0xAA	; 170
 43e:	0e 94 1a 02 	call	0x434	; 0x434 <SPI_send>
	//Read data left in the SPI data register
	return SPDR;
 442:	8f b1       	in	r24, 0x0f	; 15
}
 444:	08 95       	ret

00000446 <USART_Transmit>:
 446:	5d 9b       	sbis	0x0b, 5	; 11
 448:	fe cf       	rjmp	.-4      	; 0x446 <USART_Transmit>
 44a:	8c b9       	out	0x0c, r24	; 12
 44c:	08 95       	ret

0000044e <USART_Receive>:
 44e:	5f 9b       	sbis	0x0b, 7	; 11
 450:	fe cf       	rjmp	.-4      	; 0x44e <USART_Receive>
 452:	8c b1       	in	r24, 0x0c	; 12
 454:	08 95       	ret

00000456 <USART_Init>:
 456:	20 b5       	in	r18, 0x20	; 32
 458:	92 2b       	or	r25, r18
 45a:	90 bd       	out	0x20, r25	; 32
 45c:	99 b1       	in	r25, 0x09	; 9
 45e:	89 2b       	or	r24, r25
 460:	89 b9       	out	0x09, r24	; 9
 462:	8a b1       	in	r24, 0x0a	; 10
 464:	88 61       	ori	r24, 0x18	; 24
 466:	8a b9       	out	0x0a, r24	; 10
 468:	80 b5       	in	r24, 0x20	; 32
 46a:	8e 68       	ori	r24, 0x8E	; 142
 46c:	80 bd       	out	0x20, r24	; 32
 46e:	67 e2       	ldi	r22, 0x27	; 39
 470:	72 e0       	ldi	r23, 0x02	; 2
 472:	83 e2       	ldi	r24, 0x23	; 35
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	0e 94 4b 02 	call	0x496	; 0x496 <fdevopen>
 47a:	08 95       	ret

0000047c <xmem_init>:

/*Initializing external memory driver
Basic code taken from slides
*/
void xmem_init(void){
	MCUCR |= (1 << SRE );  // enable XMEM
 47c:	85 b7       	in	r24, 0x35	; 53
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2 ); // mask unused bits (PC7-PC4 used for JTAG)
 482:	80 b7       	in	r24, 0x30	; 48
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM1 );
 488:	80 b7       	in	r24, 0x30	; 48
 48a:	8f 7e       	andi	r24, 0xEF	; 239
 48c:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1 << XMM0 );
 48e:	80 b7       	in	r24, 0x30	; 48
 490:	87 7f       	andi	r24, 0xF7	; 247
 492:	80 bf       	out	0x30, r24	; 48
 494:	08 95       	ret

00000496 <fdevopen>:
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	31 f4       	brne	.+12     	; 0x4ae <fdevopen+0x18>
 4a2:	61 15       	cp	r22, r1
 4a4:	71 05       	cpc	r23, r1
 4a6:	19 f4       	brne	.+6      	; 0x4ae <fdevopen+0x18>
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	3a c0       	rjmp	.+116    	; 0x522 <__stack+0x23>
 4ae:	8b 01       	movw	r16, r22
 4b0:	ec 01       	movw	r28, r24
 4b2:	6e e0       	ldi	r22, 0x0E	; 14
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 bd 04 	call	0x97a	; 0x97a <calloc>
 4be:	fc 01       	movw	r30, r24
 4c0:	89 2b       	or	r24, r25
 4c2:	91 f3       	breq	.-28     	; 0x4a8 <fdevopen+0x12>
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	83 83       	std	Z+3, r24	; 0x03
 4c8:	01 15       	cp	r16, r1
 4ca:	11 05       	cpc	r17, r1
 4cc:	71 f0       	breq	.+28     	; 0x4ea <fdevopen+0x54>
 4ce:	13 87       	std	Z+11, r17	; 0x0b
 4d0:	02 87       	std	Z+10, r16	; 0x0a
 4d2:	81 e8       	ldi	r24, 0x81	; 129
 4d4:	83 83       	std	Z+3, r24	; 0x03
 4d6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
 4da:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
 4de:	89 2b       	or	r24, r25
 4e0:	21 f4       	brne	.+8      	; 0x4ea <fdevopen+0x54>
 4e2:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__data_end+0x1>
 4e6:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__data_end>
 4ea:	20 97       	sbiw	r28, 0x00	; 0
 4ec:	c9 f0       	breq	.+50     	; 0x520 <__stack+0x21>
 4ee:	d1 87       	std	Z+9, r29	; 0x09
 4f0:	c0 87       	std	Z+8, r28	; 0x08
 4f2:	83 81       	ldd	r24, Z+3	; 0x03
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	83 83       	std	Z+3, r24	; 0x03
 4f8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end+0x2>
 4fc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x3>
 500:	89 2b       	or	r24, r25
 502:	71 f4       	brne	.+28     	; 0x520 <__stack+0x21>
 504:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <__data_end+0x3>
 508:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <__data_end+0x2>
 50c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end+0x4>
 510:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x5>
 514:	89 2b       	or	r24, r25
 516:	21 f4       	brne	.+8      	; 0x520 <__stack+0x21>
 518:	f0 93 a9 01 	sts	0x01A9, r31	; 0x8001a9 <__data_end+0x5>
 51c:	e0 93 a8 01 	sts	0x01A8, r30	; 0x8001a8 <__data_end+0x4>
 520:	cf 01       	movw	r24, r30
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	08 95       	ret

0000052c <printf>:
 52c:	a0 e0       	ldi	r26, 0x00	; 0
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	ec e9       	ldi	r30, 0x9C	; 156
 532:	f2 e0       	ldi	r31, 0x02	; 2
 534:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__prologue_saves__+0x20>
 538:	ae 01       	movw	r20, r28
 53a:	4b 5f       	subi	r20, 0xFB	; 251
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	fa 01       	movw	r30, r20
 540:	61 91       	ld	r22, Z+
 542:	71 91       	ld	r23, Z+
 544:	af 01       	movw	r20, r30
 546:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end+0x2>
 54a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x3>
 54e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <vfprintf>
 552:	e2 e0       	ldi	r30, 0x02	; 2
 554:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__epilogue_restores__+0x20>

00000558 <puts>:
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <__data_end+0x2>
 564:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <__data_end+0x3>
 568:	23 81       	ldd	r18, Z+3	; 0x03
 56a:	21 ff       	sbrs	r18, 1
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <puts+0x4c>
 56e:	8c 01       	movw	r16, r24
 570:	d0 e0       	ldi	r29, 0x00	; 0
 572:	c0 e0       	ldi	r28, 0x00	; 0
 574:	f8 01       	movw	r30, r16
 576:	81 91       	ld	r24, Z+
 578:	8f 01       	movw	r16, r30
 57a:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end+0x2>
 57e:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <__data_end+0x3>
 582:	db 01       	movw	r26, r22
 584:	18 96       	adiw	r26, 0x08	; 8
 586:	ed 91       	ld	r30, X+
 588:	fc 91       	ld	r31, X
 58a:	19 97       	sbiw	r26, 0x09	; 9
 58c:	88 23       	and	r24, r24
 58e:	31 f0       	breq	.+12     	; 0x59c <puts+0x44>
 590:	09 95       	icall
 592:	89 2b       	or	r24, r25
 594:	79 f3       	breq	.-34     	; 0x574 <puts+0x1c>
 596:	df ef       	ldi	r29, 0xFF	; 255
 598:	cf ef       	ldi	r28, 0xFF	; 255
 59a:	ec cf       	rjmp	.-40     	; 0x574 <puts+0x1c>
 59c:	8a e0       	ldi	r24, 0x0A	; 10
 59e:	09 95       	icall
 5a0:	89 2b       	or	r24, r25
 5a2:	19 f0       	breq	.+6      	; 0x5aa <puts+0x52>
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <puts+0x56>
 5aa:	8d 2f       	mov	r24, r29
 5ac:	9c 2f       	mov	r25, r28
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <vfprintf>:
 5b8:	ab e0       	ldi	r26, 0x0B	; 11
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__prologue_saves__>
 5c4:	6c 01       	movw	r12, r24
 5c6:	7b 01       	movw	r14, r22
 5c8:	8a 01       	movw	r16, r20
 5ca:	fc 01       	movw	r30, r24
 5cc:	17 82       	std	Z+7, r1	; 0x07
 5ce:	16 82       	std	Z+6, r1	; 0x06
 5d0:	83 81       	ldd	r24, Z+3	; 0x03
 5d2:	81 ff       	sbrs	r24, 1
 5d4:	cc c1       	rjmp	.+920    	; 0x96e <vfprintf+0x3b6>
 5d6:	ce 01       	movw	r24, r28
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	3c 01       	movw	r6, r24
 5dc:	f6 01       	movw	r30, r12
 5de:	93 81       	ldd	r25, Z+3	; 0x03
 5e0:	f7 01       	movw	r30, r14
 5e2:	93 fd       	sbrc	r25, 3
 5e4:	85 91       	lpm	r24, Z+
 5e6:	93 ff       	sbrs	r25, 3
 5e8:	81 91       	ld	r24, Z+
 5ea:	7f 01       	movw	r14, r30
 5ec:	88 23       	and	r24, r24
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <vfprintf+0x3a>
 5f0:	ba c1       	rjmp	.+884    	; 0x966 <vfprintf+0x3ae>
 5f2:	85 32       	cpi	r24, 0x25	; 37
 5f4:	39 f4       	brne	.+14     	; 0x604 <vfprintf+0x4c>
 5f6:	93 fd       	sbrc	r25, 3
 5f8:	85 91       	lpm	r24, Z+
 5fa:	93 ff       	sbrs	r25, 3
 5fc:	81 91       	ld	r24, Z+
 5fe:	7f 01       	movw	r14, r30
 600:	85 32       	cpi	r24, 0x25	; 37
 602:	29 f4       	brne	.+10     	; 0x60e <vfprintf+0x56>
 604:	b6 01       	movw	r22, r12
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 60c:	e7 cf       	rjmp	.-50     	; 0x5dc <vfprintf+0x24>
 60e:	91 2c       	mov	r9, r1
 610:	21 2c       	mov	r2, r1
 612:	31 2c       	mov	r3, r1
 614:	ff e1       	ldi	r31, 0x1F	; 31
 616:	f3 15       	cp	r31, r3
 618:	d8 f0       	brcs	.+54     	; 0x650 <vfprintf+0x98>
 61a:	8b 32       	cpi	r24, 0x2B	; 43
 61c:	79 f0       	breq	.+30     	; 0x63c <vfprintf+0x84>
 61e:	38 f4       	brcc	.+14     	; 0x62e <vfprintf+0x76>
 620:	80 32       	cpi	r24, 0x20	; 32
 622:	79 f0       	breq	.+30     	; 0x642 <vfprintf+0x8a>
 624:	83 32       	cpi	r24, 0x23	; 35
 626:	a1 f4       	brne	.+40     	; 0x650 <vfprintf+0x98>
 628:	23 2d       	mov	r18, r3
 62a:	20 61       	ori	r18, 0x10	; 16
 62c:	1d c0       	rjmp	.+58     	; 0x668 <vfprintf+0xb0>
 62e:	8d 32       	cpi	r24, 0x2D	; 45
 630:	61 f0       	breq	.+24     	; 0x64a <vfprintf+0x92>
 632:	80 33       	cpi	r24, 0x30	; 48
 634:	69 f4       	brne	.+26     	; 0x650 <vfprintf+0x98>
 636:	23 2d       	mov	r18, r3
 638:	21 60       	ori	r18, 0x01	; 1
 63a:	16 c0       	rjmp	.+44     	; 0x668 <vfprintf+0xb0>
 63c:	83 2d       	mov	r24, r3
 63e:	82 60       	ori	r24, 0x02	; 2
 640:	38 2e       	mov	r3, r24
 642:	e3 2d       	mov	r30, r3
 644:	e4 60       	ori	r30, 0x04	; 4
 646:	3e 2e       	mov	r3, r30
 648:	2a c0       	rjmp	.+84     	; 0x69e <vfprintf+0xe6>
 64a:	f3 2d       	mov	r31, r3
 64c:	f8 60       	ori	r31, 0x08	; 8
 64e:	1d c0       	rjmp	.+58     	; 0x68a <vfprintf+0xd2>
 650:	37 fc       	sbrc	r3, 7
 652:	2d c0       	rjmp	.+90     	; 0x6ae <vfprintf+0xf6>
 654:	20 ed       	ldi	r18, 0xD0	; 208
 656:	28 0f       	add	r18, r24
 658:	2a 30       	cpi	r18, 0x0A	; 10
 65a:	40 f0       	brcs	.+16     	; 0x66c <vfprintf+0xb4>
 65c:	8e 32       	cpi	r24, 0x2E	; 46
 65e:	b9 f4       	brne	.+46     	; 0x68e <vfprintf+0xd6>
 660:	36 fc       	sbrc	r3, 6
 662:	81 c1       	rjmp	.+770    	; 0x966 <vfprintf+0x3ae>
 664:	23 2d       	mov	r18, r3
 666:	20 64       	ori	r18, 0x40	; 64
 668:	32 2e       	mov	r3, r18
 66a:	19 c0       	rjmp	.+50     	; 0x69e <vfprintf+0xe6>
 66c:	36 fe       	sbrs	r3, 6
 66e:	06 c0       	rjmp	.+12     	; 0x67c <vfprintf+0xc4>
 670:	8a e0       	ldi	r24, 0x0A	; 10
 672:	98 9e       	mul	r9, r24
 674:	20 0d       	add	r18, r0
 676:	11 24       	eor	r1, r1
 678:	92 2e       	mov	r9, r18
 67a:	11 c0       	rjmp	.+34     	; 0x69e <vfprintf+0xe6>
 67c:	ea e0       	ldi	r30, 0x0A	; 10
 67e:	2e 9e       	mul	r2, r30
 680:	20 0d       	add	r18, r0
 682:	11 24       	eor	r1, r1
 684:	22 2e       	mov	r2, r18
 686:	f3 2d       	mov	r31, r3
 688:	f0 62       	ori	r31, 0x20	; 32
 68a:	3f 2e       	mov	r3, r31
 68c:	08 c0       	rjmp	.+16     	; 0x69e <vfprintf+0xe6>
 68e:	8c 36       	cpi	r24, 0x6C	; 108
 690:	21 f4       	brne	.+8      	; 0x69a <vfprintf+0xe2>
 692:	83 2d       	mov	r24, r3
 694:	80 68       	ori	r24, 0x80	; 128
 696:	38 2e       	mov	r3, r24
 698:	02 c0       	rjmp	.+4      	; 0x69e <vfprintf+0xe6>
 69a:	88 36       	cpi	r24, 0x68	; 104
 69c:	41 f4       	brne	.+16     	; 0x6ae <vfprintf+0xf6>
 69e:	f7 01       	movw	r30, r14
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	7f 01       	movw	r14, r30
 6aa:	81 11       	cpse	r24, r1
 6ac:	b3 cf       	rjmp	.-154    	; 0x614 <vfprintf+0x5c>
 6ae:	98 2f       	mov	r25, r24
 6b0:	9f 7d       	andi	r25, 0xDF	; 223
 6b2:	95 54       	subi	r25, 0x45	; 69
 6b4:	93 30       	cpi	r25, 0x03	; 3
 6b6:	28 f4       	brcc	.+10     	; 0x6c2 <vfprintf+0x10a>
 6b8:	0c 5f       	subi	r16, 0xFC	; 252
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	9f e3       	ldi	r25, 0x3F	; 63
 6be:	99 83       	std	Y+1, r25	; 0x01
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <vfprintf+0x124>
 6c2:	83 36       	cpi	r24, 0x63	; 99
 6c4:	31 f0       	breq	.+12     	; 0x6d2 <vfprintf+0x11a>
 6c6:	83 37       	cpi	r24, 0x73	; 115
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <vfprintf+0x12e>
 6ca:	83 35       	cpi	r24, 0x53	; 83
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <vfprintf+0x118>
 6ce:	59 c0       	rjmp	.+178    	; 0x782 <vfprintf+0x1ca>
 6d0:	21 c0       	rjmp	.+66     	; 0x714 <vfprintf+0x15c>
 6d2:	f8 01       	movw	r30, r16
 6d4:	80 81       	ld	r24, Z
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	0e 5f       	subi	r16, 0xFE	; 254
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	88 24       	eor	r8, r8
 6de:	83 94       	inc	r8
 6e0:	91 2c       	mov	r9, r1
 6e2:	53 01       	movw	r10, r6
 6e4:	13 c0       	rjmp	.+38     	; 0x70c <vfprintf+0x154>
 6e6:	28 01       	movw	r4, r16
 6e8:	f2 e0       	ldi	r31, 0x02	; 2
 6ea:	4f 0e       	add	r4, r31
 6ec:	51 1c       	adc	r5, r1
 6ee:	f8 01       	movw	r30, r16
 6f0:	a0 80       	ld	r10, Z
 6f2:	b1 80       	ldd	r11, Z+1	; 0x01
 6f4:	36 fe       	sbrs	r3, 6
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <vfprintf+0x146>
 6f8:	69 2d       	mov	r22, r9
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <vfprintf+0x14a>
 6fe:	6f ef       	ldi	r22, 0xFF	; 255
 700:	7f ef       	ldi	r23, 0xFF	; 255
 702:	c5 01       	movw	r24, r10
 704:	0e 94 0c 06 	call	0xc18	; 0xc18 <strnlen>
 708:	4c 01       	movw	r8, r24
 70a:	82 01       	movw	r16, r4
 70c:	f3 2d       	mov	r31, r3
 70e:	ff 77       	andi	r31, 0x7F	; 127
 710:	3f 2e       	mov	r3, r31
 712:	16 c0       	rjmp	.+44     	; 0x740 <vfprintf+0x188>
 714:	28 01       	movw	r4, r16
 716:	22 e0       	ldi	r18, 0x02	; 2
 718:	42 0e       	add	r4, r18
 71a:	51 1c       	adc	r5, r1
 71c:	f8 01       	movw	r30, r16
 71e:	a0 80       	ld	r10, Z
 720:	b1 80       	ldd	r11, Z+1	; 0x01
 722:	36 fe       	sbrs	r3, 6
 724:	03 c0       	rjmp	.+6      	; 0x72c <vfprintf+0x174>
 726:	69 2d       	mov	r22, r9
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0x178>
 72c:	6f ef       	ldi	r22, 0xFF	; 255
 72e:	7f ef       	ldi	r23, 0xFF	; 255
 730:	c5 01       	movw	r24, r10
 732:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <strnlen_P>
 736:	4c 01       	movw	r8, r24
 738:	f3 2d       	mov	r31, r3
 73a:	f0 68       	ori	r31, 0x80	; 128
 73c:	3f 2e       	mov	r3, r31
 73e:	82 01       	movw	r16, r4
 740:	33 fc       	sbrc	r3, 3
 742:	1b c0       	rjmp	.+54     	; 0x77a <vfprintf+0x1c2>
 744:	82 2d       	mov	r24, r2
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	88 16       	cp	r8, r24
 74a:	99 06       	cpc	r9, r25
 74c:	b0 f4       	brcc	.+44     	; 0x77a <vfprintf+0x1c2>
 74e:	b6 01       	movw	r22, r12
 750:	80 e2       	ldi	r24, 0x20	; 32
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 758:	2a 94       	dec	r2
 75a:	f4 cf       	rjmp	.-24     	; 0x744 <vfprintf+0x18c>
 75c:	f5 01       	movw	r30, r10
 75e:	37 fc       	sbrc	r3, 7
 760:	85 91       	lpm	r24, Z+
 762:	37 fe       	sbrs	r3, 7
 764:	81 91       	ld	r24, Z+
 766:	5f 01       	movw	r10, r30
 768:	b6 01       	movw	r22, r12
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 770:	21 10       	cpse	r2, r1
 772:	2a 94       	dec	r2
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	82 1a       	sub	r8, r18
 778:	91 08       	sbc	r9, r1
 77a:	81 14       	cp	r8, r1
 77c:	91 04       	cpc	r9, r1
 77e:	71 f7       	brne	.-36     	; 0x75c <vfprintf+0x1a4>
 780:	e8 c0       	rjmp	.+464    	; 0x952 <vfprintf+0x39a>
 782:	84 36       	cpi	r24, 0x64	; 100
 784:	11 f0       	breq	.+4      	; 0x78a <vfprintf+0x1d2>
 786:	89 36       	cpi	r24, 0x69	; 105
 788:	41 f5       	brne	.+80     	; 0x7da <vfprintf+0x222>
 78a:	f8 01       	movw	r30, r16
 78c:	37 fe       	sbrs	r3, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x1e6>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <vfprintf+0x1f6>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	07 2e       	mov	r0, r23
 7a4:	00 0c       	add	r0, r0
 7a6:	88 0b       	sbc	r24, r24
 7a8:	99 0b       	sbc	r25, r25
 7aa:	0e 5f       	subi	r16, 0xFE	; 254
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 76       	andi	r31, 0x6F	; 111
 7b2:	3f 2e       	mov	r3, r31
 7b4:	97 ff       	sbrs	r25, 7
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x212>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	f0 68       	ori	r31, 0x80	; 128
 7c8:	3f 2e       	mov	r3, r31
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	a3 01       	movw	r20, r6
 7d0:	0e 94 53 06 	call	0xca6	; 0xca6 <__ultoa_invert>
 7d4:	88 2e       	mov	r8, r24
 7d6:	86 18       	sub	r8, r6
 7d8:	45 c0       	rjmp	.+138    	; 0x864 <vfprintf+0x2ac>
 7da:	85 37       	cpi	r24, 0x75	; 117
 7dc:	31 f4       	brne	.+12     	; 0x7ea <vfprintf+0x232>
 7de:	23 2d       	mov	r18, r3
 7e0:	2f 7e       	andi	r18, 0xEF	; 239
 7e2:	b2 2e       	mov	r11, r18
 7e4:	2a e0       	ldi	r18, 0x0A	; 10
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	25 c0       	rjmp	.+74     	; 0x834 <vfprintf+0x27c>
 7ea:	93 2d       	mov	r25, r3
 7ec:	99 7f       	andi	r25, 0xF9	; 249
 7ee:	b9 2e       	mov	r11, r25
 7f0:	8f 36       	cpi	r24, 0x6F	; 111
 7f2:	c1 f0       	breq	.+48     	; 0x824 <vfprintf+0x26c>
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <vfprintf+0x244>
 7f6:	88 35       	cpi	r24, 0x58	; 88
 7f8:	79 f0       	breq	.+30     	; 0x818 <vfprintf+0x260>
 7fa:	b5 c0       	rjmp	.+362    	; 0x966 <vfprintf+0x3ae>
 7fc:	80 37       	cpi	r24, 0x70	; 112
 7fe:	19 f0       	breq	.+6      	; 0x806 <vfprintf+0x24e>
 800:	88 37       	cpi	r24, 0x78	; 120
 802:	21 f0       	breq	.+8      	; 0x80c <vfprintf+0x254>
 804:	b0 c0       	rjmp	.+352    	; 0x966 <vfprintf+0x3ae>
 806:	e9 2f       	mov	r30, r25
 808:	e0 61       	ori	r30, 0x10	; 16
 80a:	be 2e       	mov	r11, r30
 80c:	b4 fe       	sbrs	r11, 4
 80e:	0d c0       	rjmp	.+26     	; 0x82a <vfprintf+0x272>
 810:	fb 2d       	mov	r31, r11
 812:	f4 60       	ori	r31, 0x04	; 4
 814:	bf 2e       	mov	r11, r31
 816:	09 c0       	rjmp	.+18     	; 0x82a <vfprintf+0x272>
 818:	34 fe       	sbrs	r3, 4
 81a:	0a c0       	rjmp	.+20     	; 0x830 <vfprintf+0x278>
 81c:	29 2f       	mov	r18, r25
 81e:	26 60       	ori	r18, 0x06	; 6
 820:	b2 2e       	mov	r11, r18
 822:	06 c0       	rjmp	.+12     	; 0x830 <vfprintf+0x278>
 824:	28 e0       	ldi	r18, 0x08	; 8
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	05 c0       	rjmp	.+10     	; 0x834 <vfprintf+0x27c>
 82a:	20 e1       	ldi	r18, 0x10	; 16
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x27c>
 830:	20 e1       	ldi	r18, 0x10	; 16
 832:	32 e0       	ldi	r19, 0x02	; 2
 834:	f8 01       	movw	r30, r16
 836:	b7 fe       	sbrs	r11, 7
 838:	07 c0       	rjmp	.+14     	; 0x848 <vfprintf+0x290>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	82 81       	ldd	r24, Z+2	; 0x02
 840:	93 81       	ldd	r25, Z+3	; 0x03
 842:	0c 5f       	subi	r16, 0xFC	; 252
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x29c>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	a3 01       	movw	r20, r6
 856:	0e 94 53 06 	call	0xca6	; 0xca6 <__ultoa_invert>
 85a:	88 2e       	mov	r8, r24
 85c:	86 18       	sub	r8, r6
 85e:	fb 2d       	mov	r31, r11
 860:	ff 77       	andi	r31, 0x7F	; 127
 862:	3f 2e       	mov	r3, r31
 864:	36 fe       	sbrs	r3, 6
 866:	0d c0       	rjmp	.+26     	; 0x882 <vfprintf+0x2ca>
 868:	23 2d       	mov	r18, r3
 86a:	2e 7f       	andi	r18, 0xFE	; 254
 86c:	a2 2e       	mov	r10, r18
 86e:	89 14       	cp	r8, r9
 870:	58 f4       	brcc	.+22     	; 0x888 <vfprintf+0x2d0>
 872:	34 fe       	sbrs	r3, 4
 874:	0b c0       	rjmp	.+22     	; 0x88c <vfprintf+0x2d4>
 876:	32 fc       	sbrc	r3, 2
 878:	09 c0       	rjmp	.+18     	; 0x88c <vfprintf+0x2d4>
 87a:	83 2d       	mov	r24, r3
 87c:	8e 7e       	andi	r24, 0xEE	; 238
 87e:	a8 2e       	mov	r10, r24
 880:	05 c0       	rjmp	.+10     	; 0x88c <vfprintf+0x2d4>
 882:	b8 2c       	mov	r11, r8
 884:	a3 2c       	mov	r10, r3
 886:	03 c0       	rjmp	.+6      	; 0x88e <vfprintf+0x2d6>
 888:	b8 2c       	mov	r11, r8
 88a:	01 c0       	rjmp	.+2      	; 0x88e <vfprintf+0x2d6>
 88c:	b9 2c       	mov	r11, r9
 88e:	a4 fe       	sbrs	r10, 4
 890:	0f c0       	rjmp	.+30     	; 0x8b0 <vfprintf+0x2f8>
 892:	fe 01       	movw	r30, r28
 894:	e8 0d       	add	r30, r8
 896:	f1 1d       	adc	r31, r1
 898:	80 81       	ld	r24, Z
 89a:	80 33       	cpi	r24, 0x30	; 48
 89c:	21 f4       	brne	.+8      	; 0x8a6 <vfprintf+0x2ee>
 89e:	9a 2d       	mov	r25, r10
 8a0:	99 7e       	andi	r25, 0xE9	; 233
 8a2:	a9 2e       	mov	r10, r25
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <vfprintf+0x300>
 8a6:	a2 fe       	sbrs	r10, 2
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x2fe>
 8aa:	b3 94       	inc	r11
 8ac:	b3 94       	inc	r11
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <vfprintf+0x300>
 8b0:	8a 2d       	mov	r24, r10
 8b2:	86 78       	andi	r24, 0x86	; 134
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <vfprintf+0x300>
 8b6:	b3 94       	inc	r11
 8b8:	a3 fc       	sbrc	r10, 3
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <vfprintf+0x326>
 8bc:	a0 fe       	sbrs	r10, 0
 8be:	06 c0       	rjmp	.+12     	; 0x8cc <vfprintf+0x314>
 8c0:	b2 14       	cp	r11, r2
 8c2:	88 f4       	brcc	.+34     	; 0x8e6 <vfprintf+0x32e>
 8c4:	28 0c       	add	r2, r8
 8c6:	92 2c       	mov	r9, r2
 8c8:	9b 18       	sub	r9, r11
 8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <vfprintf+0x330>
 8cc:	b2 14       	cp	r11, r2
 8ce:	60 f4       	brcc	.+24     	; 0x8e8 <vfprintf+0x330>
 8d0:	b6 01       	movw	r22, r12
 8d2:	80 e2       	ldi	r24, 0x20	; 32
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 8da:	b3 94       	inc	r11
 8dc:	f7 cf       	rjmp	.-18     	; 0x8cc <vfprintf+0x314>
 8de:	b2 14       	cp	r11, r2
 8e0:	18 f4       	brcc	.+6      	; 0x8e8 <vfprintf+0x330>
 8e2:	2b 18       	sub	r2, r11
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x332>
 8e6:	98 2c       	mov	r9, r8
 8e8:	21 2c       	mov	r2, r1
 8ea:	a4 fe       	sbrs	r10, 4
 8ec:	10 c0       	rjmp	.+32     	; 0x90e <vfprintf+0x356>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e3       	ldi	r24, 0x30	; 48
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 8f8:	a2 fe       	sbrs	r10, 2
 8fa:	17 c0       	rjmp	.+46     	; 0x92a <vfprintf+0x372>
 8fc:	a1 fc       	sbrc	r10, 1
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <vfprintf+0x34e>
 900:	88 e7       	ldi	r24, 0x78	; 120
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x352>
 906:	88 e5       	ldi	r24, 0x58	; 88
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	b6 01       	movw	r22, r12
 90c:	0c c0       	rjmp	.+24     	; 0x926 <vfprintf+0x36e>
 90e:	8a 2d       	mov	r24, r10
 910:	86 78       	andi	r24, 0x86	; 134
 912:	59 f0       	breq	.+22     	; 0x92a <vfprintf+0x372>
 914:	a1 fe       	sbrs	r10, 1
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x364>
 918:	8b e2       	ldi	r24, 0x2B	; 43
 91a:	01 c0       	rjmp	.+2      	; 0x91e <vfprintf+0x366>
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	a7 fc       	sbrc	r10, 7
 920:	8d e2       	ldi	r24, 0x2D	; 45
 922:	b6 01       	movw	r22, r12
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 92a:	89 14       	cp	r8, r9
 92c:	38 f4       	brcc	.+14     	; 0x93c <vfprintf+0x384>
 92e:	b6 01       	movw	r22, r12
 930:	80 e3       	ldi	r24, 0x30	; 48
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 938:	9a 94       	dec	r9
 93a:	f7 cf       	rjmp	.-18     	; 0x92a <vfprintf+0x372>
 93c:	8a 94       	dec	r8
 93e:	f3 01       	movw	r30, r6
 940:	e8 0d       	add	r30, r8
 942:	f1 1d       	adc	r31, r1
 944:	80 81       	ld	r24, Z
 946:	b6 01       	movw	r22, r12
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 94e:	81 10       	cpse	r8, r1
 950:	f5 cf       	rjmp	.-22     	; 0x93c <vfprintf+0x384>
 952:	22 20       	and	r2, r2
 954:	09 f4       	brne	.+2      	; 0x958 <vfprintf+0x3a0>
 956:	42 ce       	rjmp	.-892    	; 0x5dc <vfprintf+0x24>
 958:	b6 01       	movw	r22, r12
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 17 06 	call	0xc2e	; 0xc2e <fputc>
 962:	2a 94       	dec	r2
 964:	f6 cf       	rjmp	.-20     	; 0x952 <vfprintf+0x39a>
 966:	f6 01       	movw	r30, r12
 968:	86 81       	ldd	r24, Z+6	; 0x06
 96a:	97 81       	ldd	r25, Z+7	; 0x07
 96c:	02 c0       	rjmp	.+4      	; 0x972 <vfprintf+0x3ba>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	2b 96       	adiw	r28, 0x0b	; 11
 974:	e2 e1       	ldi	r30, 0x12	; 18
 976:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__epilogue_restores__>

0000097a <calloc>:
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	86 9f       	mul	r24, r22
 984:	80 01       	movw	r16, r0
 986:	87 9f       	mul	r24, r23
 988:	10 0d       	add	r17, r0
 98a:	96 9f       	mul	r25, r22
 98c:	10 0d       	add	r17, r0
 98e:	11 24       	eor	r1, r1
 990:	c8 01       	movw	r24, r16
 992:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <malloc>
 996:	ec 01       	movw	r28, r24
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	29 f0       	breq	.+10     	; 0x9a6 <calloc+0x2c>
 99c:	a8 01       	movw	r20, r16
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	0e 94 05 06 	call	0xc0a	; 0xc0a <memset>
 9a6:	ce 01       	movw	r24, r28
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	08 95       	ret

000009b2 <malloc>:
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	91 05       	cpc	r25, r1
 9be:	10 f4       	brcc	.+4      	; 0x9c4 <malloc+0x12>
 9c0:	82 e0       	ldi	r24, 0x02	; 2
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__flp>
 9c8:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <__flp+0x1>
 9cc:	20 e0       	ldi	r18, 0x00	; 0
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	a0 e0       	ldi	r26, 0x00	; 0
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	30 97       	sbiw	r30, 0x00	; 0
 9d6:	19 f1       	breq	.+70     	; 0xa1e <malloc+0x6c>
 9d8:	40 81       	ld	r20, Z
 9da:	51 81       	ldd	r21, Z+1	; 0x01
 9dc:	02 81       	ldd	r16, Z+2	; 0x02
 9de:	13 81       	ldd	r17, Z+3	; 0x03
 9e0:	48 17       	cp	r20, r24
 9e2:	59 07       	cpc	r21, r25
 9e4:	c8 f0       	brcs	.+50     	; 0xa18 <malloc+0x66>
 9e6:	84 17       	cp	r24, r20
 9e8:	95 07       	cpc	r25, r21
 9ea:	69 f4       	brne	.+26     	; 0xa06 <malloc+0x54>
 9ec:	10 97       	sbiw	r26, 0x00	; 0
 9ee:	31 f0       	breq	.+12     	; 0x9fc <malloc+0x4a>
 9f0:	12 96       	adiw	r26, 0x02	; 2
 9f2:	0c 93       	st	X, r16
 9f4:	12 97       	sbiw	r26, 0x02	; 2
 9f6:	13 96       	adiw	r26, 0x03	; 3
 9f8:	1c 93       	st	X, r17
 9fa:	27 c0       	rjmp	.+78     	; 0xa4a <malloc+0x98>
 9fc:	00 93 ac 01 	sts	0x01AC, r16	; 0x8001ac <__flp>
 a00:	10 93 ad 01 	sts	0x01AD, r17	; 0x8001ad <__flp+0x1>
 a04:	22 c0       	rjmp	.+68     	; 0xa4a <malloc+0x98>
 a06:	21 15       	cp	r18, r1
 a08:	31 05       	cpc	r19, r1
 a0a:	19 f0       	breq	.+6      	; 0xa12 <malloc+0x60>
 a0c:	42 17       	cp	r20, r18
 a0e:	53 07       	cpc	r21, r19
 a10:	18 f4       	brcc	.+6      	; 0xa18 <malloc+0x66>
 a12:	9a 01       	movw	r18, r20
 a14:	bd 01       	movw	r22, r26
 a16:	ef 01       	movw	r28, r30
 a18:	df 01       	movw	r26, r30
 a1a:	f8 01       	movw	r30, r16
 a1c:	db cf       	rjmp	.-74     	; 0x9d4 <malloc+0x22>
 a1e:	21 15       	cp	r18, r1
 a20:	31 05       	cpc	r19, r1
 a22:	f9 f0       	breq	.+62     	; 0xa62 <malloc+0xb0>
 a24:	28 1b       	sub	r18, r24
 a26:	39 0b       	sbc	r19, r25
 a28:	24 30       	cpi	r18, 0x04	; 4
 a2a:	31 05       	cpc	r19, r1
 a2c:	80 f4       	brcc	.+32     	; 0xa4e <malloc+0x9c>
 a2e:	8a 81       	ldd	r24, Y+2	; 0x02
 a30:	9b 81       	ldd	r25, Y+3	; 0x03
 a32:	61 15       	cp	r22, r1
 a34:	71 05       	cpc	r23, r1
 a36:	21 f0       	breq	.+8      	; 0xa40 <malloc+0x8e>
 a38:	fb 01       	movw	r30, r22
 a3a:	93 83       	std	Z+3, r25	; 0x03
 a3c:	82 83       	std	Z+2, r24	; 0x02
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <malloc+0x96>
 a40:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__flp+0x1>
 a44:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__flp>
 a48:	fe 01       	movw	r30, r28
 a4a:	32 96       	adiw	r30, 0x02	; 2
 a4c:	44 c0       	rjmp	.+136    	; 0xad6 <malloc+0x124>
 a4e:	fe 01       	movw	r30, r28
 a50:	e2 0f       	add	r30, r18
 a52:	f3 1f       	adc	r31, r19
 a54:	81 93       	st	Z+, r24
 a56:	91 93       	st	Z+, r25
 a58:	22 50       	subi	r18, 0x02	; 2
 a5a:	31 09       	sbc	r19, r1
 a5c:	39 83       	std	Y+1, r19	; 0x01
 a5e:	28 83       	st	Y, r18
 a60:	3a c0       	rjmp	.+116    	; 0xad6 <malloc+0x124>
 a62:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
 a66:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
 a6a:	23 2b       	or	r18, r19
 a6c:	41 f4       	brne	.+16     	; 0xa7e <malloc+0xcc>
 a6e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a72:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a76:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <__brkval+0x1>
 a7a:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__brkval>
 a7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 a82:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a86:	21 15       	cp	r18, r1
 a88:	31 05       	cpc	r19, r1
 a8a:	41 f4       	brne	.+16     	; 0xa9c <malloc+0xea>
 a8c:	2d b7       	in	r18, 0x3d	; 61
 a8e:	3e b7       	in	r19, 0x3e	; 62
 a90:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a94:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a98:	24 1b       	sub	r18, r20
 a9a:	35 0b       	sbc	r19, r21
 a9c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <__brkval>
 aa0:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <__brkval+0x1>
 aa4:	e2 17       	cp	r30, r18
 aa6:	f3 07       	cpc	r31, r19
 aa8:	a0 f4       	brcc	.+40     	; 0xad2 <malloc+0x120>
 aaa:	2e 1b       	sub	r18, r30
 aac:	3f 0b       	sbc	r19, r31
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	78 f0       	brcs	.+30     	; 0xad2 <malloc+0x120>
 ab4:	ac 01       	movw	r20, r24
 ab6:	4e 5f       	subi	r20, 0xFE	; 254
 ab8:	5f 4f       	sbci	r21, 0xFF	; 255
 aba:	24 17       	cp	r18, r20
 abc:	35 07       	cpc	r19, r21
 abe:	48 f0       	brcs	.+18     	; 0xad2 <malloc+0x120>
 ac0:	4e 0f       	add	r20, r30
 ac2:	5f 1f       	adc	r21, r31
 ac4:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <__brkval+0x1>
 ac8:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <__brkval>
 acc:	81 93       	st	Z+, r24
 ace:	91 93       	st	Z+, r25
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <malloc+0x124>
 ad2:	e0 e0       	ldi	r30, 0x00	; 0
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	cf 01       	movw	r24, r30
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	08 95       	ret

00000ae2 <free>:
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	09 f4       	brne	.+2      	; 0xaec <free+0xa>
 aea:	81 c0       	rjmp	.+258    	; 0xbee <free+0x10c>
 aec:	fc 01       	movw	r30, r24
 aee:	32 97       	sbiw	r30, 0x02	; 2
 af0:	13 82       	std	Z+3, r1	; 0x03
 af2:	12 82       	std	Z+2, r1	; 0x02
 af4:	a0 91 ac 01 	lds	r26, 0x01AC	; 0x8001ac <__flp>
 af8:	b0 91 ad 01 	lds	r27, 0x01AD	; 0x8001ad <__flp+0x1>
 afc:	10 97       	sbiw	r26, 0x00	; 0
 afe:	81 f4       	brne	.+32     	; 0xb20 <free+0x3e>
 b00:	20 81       	ld	r18, Z
 b02:	31 81       	ldd	r19, Z+1	; 0x01
 b04:	82 0f       	add	r24, r18
 b06:	93 1f       	adc	r25, r19
 b08:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
 b0c:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	51 f5       	brne	.+84     	; 0xb6a <free+0x88>
 b16:	f0 93 ab 01 	sts	0x01AB, r31	; 0x8001ab <__brkval+0x1>
 b1a:	e0 93 aa 01 	sts	0x01AA, r30	; 0x8001aa <__brkval>
 b1e:	67 c0       	rjmp	.+206    	; 0xbee <free+0x10c>
 b20:	ed 01       	movw	r28, r26
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	ce 17       	cp	r28, r30
 b28:	df 07       	cpc	r29, r31
 b2a:	40 f4       	brcc	.+16     	; 0xb3c <free+0x5a>
 b2c:	4a 81       	ldd	r20, Y+2	; 0x02
 b2e:	5b 81       	ldd	r21, Y+3	; 0x03
 b30:	9e 01       	movw	r18, r28
 b32:	41 15       	cp	r20, r1
 b34:	51 05       	cpc	r21, r1
 b36:	f1 f0       	breq	.+60     	; 0xb74 <free+0x92>
 b38:	ea 01       	movw	r28, r20
 b3a:	f5 cf       	rjmp	.-22     	; 0xb26 <free+0x44>
 b3c:	d3 83       	std	Z+3, r29	; 0x03
 b3e:	c2 83       	std	Z+2, r28	; 0x02
 b40:	40 81       	ld	r20, Z
 b42:	51 81       	ldd	r21, Z+1	; 0x01
 b44:	84 0f       	add	r24, r20
 b46:	95 1f       	adc	r25, r21
 b48:	c8 17       	cp	r28, r24
 b4a:	d9 07       	cpc	r29, r25
 b4c:	59 f4       	brne	.+22     	; 0xb64 <free+0x82>
 b4e:	88 81       	ld	r24, Y
 b50:	99 81       	ldd	r25, Y+1	; 0x01
 b52:	84 0f       	add	r24, r20
 b54:	95 1f       	adc	r25, r21
 b56:	02 96       	adiw	r24, 0x02	; 2
 b58:	91 83       	std	Z+1, r25	; 0x01
 b5a:	80 83       	st	Z, r24
 b5c:	8a 81       	ldd	r24, Y+2	; 0x02
 b5e:	9b 81       	ldd	r25, Y+3	; 0x03
 b60:	93 83       	std	Z+3, r25	; 0x03
 b62:	82 83       	std	Z+2, r24	; 0x02
 b64:	21 15       	cp	r18, r1
 b66:	31 05       	cpc	r19, r1
 b68:	29 f4       	brne	.+10     	; 0xb74 <free+0x92>
 b6a:	f0 93 ad 01 	sts	0x01AD, r31	; 0x8001ad <__flp+0x1>
 b6e:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <__flp>
 b72:	3d c0       	rjmp	.+122    	; 0xbee <free+0x10c>
 b74:	e9 01       	movw	r28, r18
 b76:	fb 83       	std	Y+3, r31	; 0x03
 b78:	ea 83       	std	Y+2, r30	; 0x02
 b7a:	49 91       	ld	r20, Y+
 b7c:	59 91       	ld	r21, Y+
 b7e:	c4 0f       	add	r28, r20
 b80:	d5 1f       	adc	r29, r21
 b82:	ec 17       	cp	r30, r28
 b84:	fd 07       	cpc	r31, r29
 b86:	61 f4       	brne	.+24     	; 0xba0 <free+0xbe>
 b88:	80 81       	ld	r24, Z
 b8a:	91 81       	ldd	r25, Z+1	; 0x01
 b8c:	84 0f       	add	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	02 96       	adiw	r24, 0x02	; 2
 b92:	e9 01       	movw	r28, r18
 b94:	99 83       	std	Y+1, r25	; 0x01
 b96:	88 83       	st	Y, r24
 b98:	82 81       	ldd	r24, Z+2	; 0x02
 b9a:	93 81       	ldd	r25, Z+3	; 0x03
 b9c:	9b 83       	std	Y+3, r25	; 0x03
 b9e:	8a 83       	std	Y+2, r24	; 0x02
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	12 96       	adiw	r26, 0x02	; 2
 ba6:	8d 91       	ld	r24, X+
 ba8:	9c 91       	ld	r25, X
 baa:	13 97       	sbiw	r26, 0x03	; 3
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	19 f0       	breq	.+6      	; 0xbb6 <free+0xd4>
 bb0:	fd 01       	movw	r30, r26
 bb2:	dc 01       	movw	r26, r24
 bb4:	f7 cf       	rjmp	.-18     	; 0xba4 <free+0xc2>
 bb6:	8d 91       	ld	r24, X+
 bb8:	9c 91       	ld	r25, X
 bba:	11 97       	sbiw	r26, 0x01	; 1
 bbc:	9d 01       	movw	r18, r26
 bbe:	2e 5f       	subi	r18, 0xFE	; 254
 bc0:	3f 4f       	sbci	r19, 0xFF	; 255
 bc2:	82 0f       	add	r24, r18
 bc4:	93 1f       	adc	r25, r19
 bc6:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
 bca:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
 bce:	28 17       	cp	r18, r24
 bd0:	39 07       	cpc	r19, r25
 bd2:	69 f4       	brne	.+26     	; 0xbee <free+0x10c>
 bd4:	30 97       	sbiw	r30, 0x00	; 0
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0x100>
 bd8:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__flp+0x1>
 bdc:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__flp>
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <free+0x104>
 be2:	13 82       	std	Z+3, r1	; 0x03
 be4:	12 82       	std	Z+2, r1	; 0x02
 be6:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <__brkval+0x1>
 bea:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <__brkval>
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	08 95       	ret

00000bf4 <strnlen_P>:
 bf4:	fc 01       	movw	r30, r24
 bf6:	05 90       	lpm	r0, Z+
 bf8:	61 50       	subi	r22, 0x01	; 1
 bfa:	70 40       	sbci	r23, 0x00	; 0
 bfc:	01 10       	cpse	r0, r1
 bfe:	d8 f7       	brcc	.-10     	; 0xbf6 <strnlen_P+0x2>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	08 95       	ret

00000c0a <memset>:
 c0a:	dc 01       	movw	r26, r24
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <memset+0x6>
 c0e:	6d 93       	st	X+, r22
 c10:	41 50       	subi	r20, 0x01	; 1
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	e0 f7       	brcc	.-8      	; 0xc0e <memset+0x4>
 c16:	08 95       	ret

00000c18 <strnlen>:
 c18:	fc 01       	movw	r30, r24
 c1a:	61 50       	subi	r22, 0x01	; 1
 c1c:	70 40       	sbci	r23, 0x00	; 0
 c1e:	01 90       	ld	r0, Z+
 c20:	01 10       	cpse	r0, r1
 c22:	d8 f7       	brcc	.-10     	; 0xc1a <strnlen+0x2>
 c24:	80 95       	com	r24
 c26:	90 95       	com	r25
 c28:	8e 0f       	add	r24, r30
 c2a:	9f 1f       	adc	r25, r31
 c2c:	08 95       	ret

00000c2e <fputc>:
 c2e:	0f 93       	push	r16
 c30:	1f 93       	push	r17
 c32:	cf 93       	push	r28
 c34:	df 93       	push	r29
 c36:	fb 01       	movw	r30, r22
 c38:	23 81       	ldd	r18, Z+3	; 0x03
 c3a:	21 fd       	sbrc	r18, 1
 c3c:	03 c0       	rjmp	.+6      	; 0xc44 <fputc+0x16>
 c3e:	8f ef       	ldi	r24, 0xFF	; 255
 c40:	9f ef       	ldi	r25, 0xFF	; 255
 c42:	2c c0       	rjmp	.+88     	; 0xc9c <fputc+0x6e>
 c44:	22 ff       	sbrs	r18, 2
 c46:	16 c0       	rjmp	.+44     	; 0xc74 <fputc+0x46>
 c48:	46 81       	ldd	r20, Z+6	; 0x06
 c4a:	57 81       	ldd	r21, Z+7	; 0x07
 c4c:	24 81       	ldd	r18, Z+4	; 0x04
 c4e:	35 81       	ldd	r19, Z+5	; 0x05
 c50:	42 17       	cp	r20, r18
 c52:	53 07       	cpc	r21, r19
 c54:	44 f4       	brge	.+16     	; 0xc66 <fputc+0x38>
 c56:	a0 81       	ld	r26, Z
 c58:	b1 81       	ldd	r27, Z+1	; 0x01
 c5a:	9d 01       	movw	r18, r26
 c5c:	2f 5f       	subi	r18, 0xFF	; 255
 c5e:	3f 4f       	sbci	r19, 0xFF	; 255
 c60:	31 83       	std	Z+1, r19	; 0x01
 c62:	20 83       	st	Z, r18
 c64:	8c 93       	st	X, r24
 c66:	26 81       	ldd	r18, Z+6	; 0x06
 c68:	37 81       	ldd	r19, Z+7	; 0x07
 c6a:	2f 5f       	subi	r18, 0xFF	; 255
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	37 83       	std	Z+7, r19	; 0x07
 c70:	26 83       	std	Z+6, r18	; 0x06
 c72:	14 c0       	rjmp	.+40     	; 0xc9c <fputc+0x6e>
 c74:	8b 01       	movw	r16, r22
 c76:	ec 01       	movw	r28, r24
 c78:	fb 01       	movw	r30, r22
 c7a:	00 84       	ldd	r0, Z+8	; 0x08
 c7c:	f1 85       	ldd	r31, Z+9	; 0x09
 c7e:	e0 2d       	mov	r30, r0
 c80:	09 95       	icall
 c82:	89 2b       	or	r24, r25
 c84:	e1 f6       	brne	.-72     	; 0xc3e <fputc+0x10>
 c86:	d8 01       	movw	r26, r16
 c88:	16 96       	adiw	r26, 0x06	; 6
 c8a:	8d 91       	ld	r24, X+
 c8c:	9c 91       	ld	r25, X
 c8e:	17 97       	sbiw	r26, 0x07	; 7
 c90:	01 96       	adiw	r24, 0x01	; 1
 c92:	17 96       	adiw	r26, 0x07	; 7
 c94:	9c 93       	st	X, r25
 c96:	8e 93       	st	-X, r24
 c98:	16 97       	sbiw	r26, 0x06	; 6
 c9a:	ce 01       	movw	r24, r28
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	1f 91       	pop	r17
 ca2:	0f 91       	pop	r16
 ca4:	08 95       	ret

00000ca6 <__ultoa_invert>:
 ca6:	fa 01       	movw	r30, r20
 ca8:	aa 27       	eor	r26, r26
 caa:	28 30       	cpi	r18, 0x08	; 8
 cac:	51 f1       	breq	.+84     	; 0xd02 <__ultoa_invert+0x5c>
 cae:	20 31       	cpi	r18, 0x10	; 16
 cb0:	81 f1       	breq	.+96     	; 0xd12 <__ultoa_invert+0x6c>
 cb2:	e8 94       	clt
 cb4:	6f 93       	push	r22
 cb6:	6e 7f       	andi	r22, 0xFE	; 254
 cb8:	6e 5f       	subi	r22, 0xFE	; 254
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	8f 4f       	sbci	r24, 0xFF	; 255
 cbe:	9f 4f       	sbci	r25, 0xFF	; 255
 cc0:	af 4f       	sbci	r26, 0xFF	; 255
 cc2:	b1 e0       	ldi	r27, 0x01	; 1
 cc4:	3e d0       	rcall	.+124    	; 0xd42 <__ultoa_invert+0x9c>
 cc6:	b4 e0       	ldi	r27, 0x04	; 4
 cc8:	3c d0       	rcall	.+120    	; 0xd42 <__ultoa_invert+0x9c>
 cca:	67 0f       	add	r22, r23
 ccc:	78 1f       	adc	r23, r24
 cce:	89 1f       	adc	r24, r25
 cd0:	9a 1f       	adc	r25, r26
 cd2:	a1 1d       	adc	r26, r1
 cd4:	68 0f       	add	r22, r24
 cd6:	79 1f       	adc	r23, r25
 cd8:	8a 1f       	adc	r24, r26
 cda:	91 1d       	adc	r25, r1
 cdc:	a1 1d       	adc	r26, r1
 cde:	6a 0f       	add	r22, r26
 ce0:	71 1d       	adc	r23, r1
 ce2:	81 1d       	adc	r24, r1
 ce4:	91 1d       	adc	r25, r1
 ce6:	a1 1d       	adc	r26, r1
 ce8:	20 d0       	rcall	.+64     	; 0xd2a <__ultoa_invert+0x84>
 cea:	09 f4       	brne	.+2      	; 0xcee <__ultoa_invert+0x48>
 cec:	68 94       	set
 cee:	3f 91       	pop	r19
 cf0:	2a e0       	ldi	r18, 0x0A	; 10
 cf2:	26 9f       	mul	r18, r22
 cf4:	11 24       	eor	r1, r1
 cf6:	30 19       	sub	r19, r0
 cf8:	30 5d       	subi	r19, 0xD0	; 208
 cfa:	31 93       	st	Z+, r19
 cfc:	de f6       	brtc	.-74     	; 0xcb4 <__ultoa_invert+0xe>
 cfe:	cf 01       	movw	r24, r30
 d00:	08 95       	ret
 d02:	46 2f       	mov	r20, r22
 d04:	47 70       	andi	r20, 0x07	; 7
 d06:	40 5d       	subi	r20, 0xD0	; 208
 d08:	41 93       	st	Z+, r20
 d0a:	b3 e0       	ldi	r27, 0x03	; 3
 d0c:	0f d0       	rcall	.+30     	; 0xd2c <__ultoa_invert+0x86>
 d0e:	c9 f7       	brne	.-14     	; 0xd02 <__ultoa_invert+0x5c>
 d10:	f6 cf       	rjmp	.-20     	; 0xcfe <__ultoa_invert+0x58>
 d12:	46 2f       	mov	r20, r22
 d14:	4f 70       	andi	r20, 0x0F	; 15
 d16:	40 5d       	subi	r20, 0xD0	; 208
 d18:	4a 33       	cpi	r20, 0x3A	; 58
 d1a:	18 f0       	brcs	.+6      	; 0xd22 <__ultoa_invert+0x7c>
 d1c:	49 5d       	subi	r20, 0xD9	; 217
 d1e:	31 fd       	sbrc	r19, 1
 d20:	40 52       	subi	r20, 0x20	; 32
 d22:	41 93       	st	Z+, r20
 d24:	02 d0       	rcall	.+4      	; 0xd2a <__ultoa_invert+0x84>
 d26:	a9 f7       	brne	.-22     	; 0xd12 <__ultoa_invert+0x6c>
 d28:	ea cf       	rjmp	.-44     	; 0xcfe <__ultoa_invert+0x58>
 d2a:	b4 e0       	ldi	r27, 0x04	; 4
 d2c:	a6 95       	lsr	r26
 d2e:	97 95       	ror	r25
 d30:	87 95       	ror	r24
 d32:	77 95       	ror	r23
 d34:	67 95       	ror	r22
 d36:	ba 95       	dec	r27
 d38:	c9 f7       	brne	.-14     	; 0xd2c <__ultoa_invert+0x86>
 d3a:	00 97       	sbiw	r24, 0x00	; 0
 d3c:	61 05       	cpc	r22, r1
 d3e:	71 05       	cpc	r23, r1
 d40:	08 95       	ret
 d42:	9b 01       	movw	r18, r22
 d44:	ac 01       	movw	r20, r24
 d46:	0a 2e       	mov	r0, r26
 d48:	06 94       	lsr	r0
 d4a:	57 95       	ror	r21
 d4c:	47 95       	ror	r20
 d4e:	37 95       	ror	r19
 d50:	27 95       	ror	r18
 d52:	ba 95       	dec	r27
 d54:	c9 f7       	brne	.-14     	; 0xd48 <__ultoa_invert+0xa2>
 d56:	62 0f       	add	r22, r18
 d58:	73 1f       	adc	r23, r19
 d5a:	84 1f       	adc	r24, r20
 d5c:	95 1f       	adc	r25, r21
 d5e:	a0 1d       	adc	r26, r0
 d60:	08 95       	ret

00000d62 <__prologue_saves__>:
 d62:	2f 92       	push	r2
 d64:	3f 92       	push	r3
 d66:	4f 92       	push	r4
 d68:	5f 92       	push	r5
 d6a:	6f 92       	push	r6
 d6c:	7f 92       	push	r7
 d6e:	8f 92       	push	r8
 d70:	9f 92       	push	r9
 d72:	af 92       	push	r10
 d74:	bf 92       	push	r11
 d76:	cf 92       	push	r12
 d78:	df 92       	push	r13
 d7a:	ef 92       	push	r14
 d7c:	ff 92       	push	r15
 d7e:	0f 93       	push	r16
 d80:	1f 93       	push	r17
 d82:	cf 93       	push	r28
 d84:	df 93       	push	r29
 d86:	cd b7       	in	r28, 0x3d	; 61
 d88:	de b7       	in	r29, 0x3e	; 62
 d8a:	ca 1b       	sub	r28, r26
 d8c:	db 0b       	sbc	r29, r27
 d8e:	0f b6       	in	r0, 0x3f	; 63
 d90:	f8 94       	cli
 d92:	de bf       	out	0x3e, r29	; 62
 d94:	0f be       	out	0x3f, r0	; 63
 d96:	cd bf       	out	0x3d, r28	; 61
 d98:	09 94       	ijmp

00000d9a <__epilogue_restores__>:
 d9a:	2a 88       	ldd	r2, Y+18	; 0x12
 d9c:	39 88       	ldd	r3, Y+17	; 0x11
 d9e:	48 88       	ldd	r4, Y+16	; 0x10
 da0:	5f 84       	ldd	r5, Y+15	; 0x0f
 da2:	6e 84       	ldd	r6, Y+14	; 0x0e
 da4:	7d 84       	ldd	r7, Y+13	; 0x0d
 da6:	8c 84       	ldd	r8, Y+12	; 0x0c
 da8:	9b 84       	ldd	r9, Y+11	; 0x0b
 daa:	aa 84       	ldd	r10, Y+10	; 0x0a
 dac:	b9 84       	ldd	r11, Y+9	; 0x09
 dae:	c8 84       	ldd	r12, Y+8	; 0x08
 db0:	df 80       	ldd	r13, Y+7	; 0x07
 db2:	ee 80       	ldd	r14, Y+6	; 0x06
 db4:	fd 80       	ldd	r15, Y+5	; 0x05
 db6:	0c 81       	ldd	r16, Y+4	; 0x04
 db8:	1b 81       	ldd	r17, Y+3	; 0x03
 dba:	aa 81       	ldd	r26, Y+2	; 0x02
 dbc:	b9 81       	ldd	r27, Y+1	; 0x01
 dbe:	ce 0f       	add	r28, r30
 dc0:	d1 1d       	adc	r29, r1
 dc2:	0f b6       	in	r0, 0x3f	; 63
 dc4:	f8 94       	cli
 dc6:	de bf       	out	0x3e, r29	; 62
 dc8:	0f be       	out	0x3f, r0	; 63
 dca:	cd bf       	out	0x3d, r28	; 61
 dcc:	ed 01       	movw	r28, r26
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
